import '../../utils.dart';
import '../../extensions/binary_reader.dart';

import '../base_contructor.dart';

class InputPeerEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2134579434;
  static const SUBCLASS_OF_ID = 3374092470;
  final classType = "constructor";
  final ID = 2134579434;

  InputPeerEmpty();

  static InputPeerEmpty fromReader(BinaryReader reader) {
    var len;
    return InputPeerEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2134579434, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPeerEmpty{ID: $ID, }';
  }
}

class InputPeerSelf extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2107670217;
  static const SUBCLASS_OF_ID = 3374092470;
  final classType = "constructor";
  final ID = 2107670217;

  InputPeerSelf();

  static InputPeerSelf fromReader(BinaryReader reader) {
    var len;
    return InputPeerSelf();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2107670217, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPeerSelf{ID: $ID, }';
  }
}

class InputPeerChat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 900291769;
  static const SUBCLASS_OF_ID = 3374092470;
  final classType = "constructor";
  final ID = 900291769;
  BigInt chatId;

  InputPeerChat({required this.chatId});

  static InputPeerChat fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readLong();
    return InputPeerChat(chatId: chatId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(900291769, 4),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPeerChat{ID: $ID, chatId: $chatId}';
  }
}

class InputPeerUser extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3723011404;
  static const SUBCLASS_OF_ID = 3374092470;
  final classType = "constructor";
  final ID = 3723011404;
  BigInt userId;
  BigInt accessHash;

  InputPeerUser({required this.userId, required this.accessHash});

  static InputPeerUser fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var accessHash = reader.readLong();
    return InputPeerUser(userId: userId, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3723011404, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPeerUser{ID: $ID, userId: $userId, accessHash: $accessHash}';
  }
}

class InputPeerChannel extends BaseConstructor {
  static const CONSTRUCTOR_ID = 666680316;
  static const SUBCLASS_OF_ID = 3374092470;
  final classType = "constructor";
  final ID = 666680316;
  BigInt channelId;
  BigInt accessHash;

  InputPeerChannel({required this.channelId, required this.accessHash});

  static InputPeerChannel fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var accessHash = reader.readLong();
    return InputPeerChannel(channelId: channelId, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(666680316, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPeerChannel{ID: $ID, channelId: $channelId, accessHash: $accessHash}';
  }
}

class InputPeerUserFromMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2826635804;
  static const SUBCLASS_OF_ID = 3374092470;
  final classType = "constructor";
  final ID = 2826635804;
  var peer;
  int msgId;
  BigInt userId;

  InputPeerUserFromMessage(
      {required this.peer, required this.msgId, required this.userId});

  static InputPeerUserFromMessage fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var msgId = reader.readInt();
    var userId = reader.readLong();
    return InputPeerUserFromMessage(peer: peer, msgId: msgId, userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2826635804, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPeerUserFromMessage{ID: $ID, peer: $peer, msgId: $msgId, userId: $userId}';
  }
}

class InputPeerChannelFromMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3173648448;
  static const SUBCLASS_OF_ID = 3374092470;
  final classType = "constructor";
  final ID = 3173648448;
  var peer;
  int msgId;
  BigInt channelId;

  InputPeerChannelFromMessage(
      {required this.peer, required this.msgId, required this.channelId});

  static InputPeerChannelFromMessage fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var msgId = reader.readInt();
    var channelId = reader.readLong();
    return InputPeerChannelFromMessage(
        peer: peer, msgId: msgId, channelId: channelId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3173648448, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPeerChannelFromMessage{ID: $ID, peer: $peer, msgId: $msgId, channelId: $channelId}';
  }
}

class InputUserEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3112732367;
  static const SUBCLASS_OF_ID = 3865689926;
  final classType = "constructor";
  final ID = 3112732367;

  InputUserEmpty();

  static InputUserEmpty fromReader(BinaryReader reader) {
    var len;
    return InputUserEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3112732367, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputUserEmpty{ID: $ID, }';
  }
}

class InputUserSelf extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4156666175;
  static const SUBCLASS_OF_ID = 3865689926;
  final classType = "constructor";
  final ID = 4156666175;

  InputUserSelf();

  static InputUserSelf fromReader(BinaryReader reader) {
    var len;
    return InputUserSelf();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4156666175, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputUserSelf{ID: $ID, }';
  }
}

class InputUser extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4061223110;
  static const SUBCLASS_OF_ID = 3865689926;
  final classType = "constructor";
  final ID = 4061223110;
  BigInt userId;
  BigInt accessHash;

  InputUser({required this.userId, required this.accessHash});

  static InputUser fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var accessHash = reader.readLong();
    return InputUser(userId: userId, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4061223110, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputUser{ID: $ID, userId: $userId, accessHash: $accessHash}';
  }
}

class InputUserFromMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 497305826;
  static const SUBCLASS_OF_ID = 3865689926;
  final classType = "constructor";
  final ID = 497305826;
  var peer;
  int msgId;
  BigInt userId;

  InputUserFromMessage(
      {required this.peer, required this.msgId, required this.userId});

  static InputUserFromMessage fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var msgId = reader.readInt();
    var userId = reader.readLong();
    return InputUserFromMessage(peer: peer, msgId: msgId, userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(497305826, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputUserFromMessage{ID: $ID, peer: $peer, msgId: $msgId, userId: $userId}';
  }
}

class InputPhoneContact extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4086478836;
  static const SUBCLASS_OF_ID = 2926144130;
  final classType = "constructor";
  final ID = 4086478836;
  BigInt clientId;
  String phone;
  String firstName;
  String lastName;

  InputPhoneContact(
      {required this.clientId,
      required this.phone,
      required this.firstName,
      required this.lastName});

  static InputPhoneContact fromReader(BinaryReader reader) {
    var len;
    var clientId = reader.readLong();
    var phone = reader.tgReadString();
    var firstName = reader.tgReadString();
    var lastName = reader.tgReadString();
    return InputPhoneContact(
        clientId: clientId,
        phone: phone,
        firstName: firstName,
        lastName: lastName);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4086478836, 4),
      readBufferFromBigInt(this.clientId, 8, little: true, signed: true),
      serializeBytes(this.phone),
      serializeBytes(this.firstName),
      serializeBytes(this.lastName),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPhoneContact{ID: $ID, clientId: $clientId, phone: $phone, firstName: $firstName, lastName: $lastName}';
  }
}

class InputFile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4113560191;
  static const SUBCLASS_OF_ID = 3882180383;
  final classType = "constructor";
  final ID = 4113560191;
  BigInt id;
  int parts;
  String name;
  String md5Checksum;

  InputFile(
      {required this.id,
      required this.parts,
      required this.name,
      required this.md5Checksum});

  static InputFile fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var parts = reader.readInt();
    var name = reader.tgReadString();
    var md5Checksum = reader.tgReadString();
    return InputFile(
        id: id, parts: parts, name: name, md5Checksum: md5Checksum);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4113560191, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.parts, 4, little: true, signed: true),
      serializeBytes(this.name),
      serializeBytes(this.md5Checksum),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputFile{ID: $ID, id: $id, parts: $parts, name: $name, md5Checksum: $md5Checksum}';
  }
}

class InputFileBig extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4199484341;
  static const SUBCLASS_OF_ID = 3882180383;
  final classType = "constructor";
  final ID = 4199484341;
  BigInt id;
  int parts;
  String name;

  InputFileBig({required this.id, required this.parts, required this.name});

  static InputFileBig fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var parts = reader.readInt();
    var name = reader.tgReadString();
    return InputFileBig(id: id, parts: parts, name: name);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4199484341, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.parts, 4, little: true, signed: true),
      serializeBytes(this.name),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputFileBig{ID: $ID, id: $id, parts: $parts, name: $name}';
  }
}

class InputMediaEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2523198847;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 2523198847;

  InputMediaEmpty();

  static InputMediaEmpty fromReader(BinaryReader reader) {
    var len;
    return InputMediaEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2523198847, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaEmpty{ID: $ID, }';
  }
}

class InputMediaUploadedPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 505969924;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 505969924;
  var file;
  List<dynamic>? stickers;
  int? ttlSeconds;

  InputMediaUploadedPhoto(
      {required this.file, required this.stickers, required this.ttlSeconds});

  static InputMediaUploadedPhoto fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var file = reader.tgReadObject();
    var stickers;
    if ((flags & 1) == 1) {
      var _vectorstickers = reader.readInt();
      if (_vectorstickers != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> stickers = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        stickers.add(reader.tgReadObject());
      }
    } else {
      stickers = null;
    }
    var ttlSeconds;
    if ((flags & 2) == 2) {
      ttlSeconds = reader.readInt();
    } else {
      ttlSeconds = null;
    }
    return InputMediaUploadedPhoto(
        file: file, stickers: stickers, ttlSeconds: ttlSeconds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(505969924, 4),
      [0, 0, 0, 0],
      (this.file.getBytes() as List<int>),
      (this.stickers == null || this.stickers == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.stickers!.length, 4,
                  little: true, signed: true),
              this
                  .stickers!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.ttlSeconds == null || this.ttlSeconds == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlSeconds, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaUploadedPhoto{ID: $ID, file: $file, stickers: $stickers, ttlSeconds: $ttlSeconds}';
  }
}

class InputMediaPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3015312949;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 3015312949;
  var id;
  int? ttlSeconds;

  InputMediaPhoto({required this.id, required this.ttlSeconds});

  static InputMediaPhoto fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.tgReadObject();
    var ttlSeconds;
    if ((flags & 1) == 1) {
      ttlSeconds = reader.readInt();
    } else {
      ttlSeconds = null;
    }
    return InputMediaPhoto(id: id, ttlSeconds: ttlSeconds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3015312949, 4),
      [0, 0, 0, 0],
      (this.id.getBytes() as List<int>),
      (this.ttlSeconds == null || this.ttlSeconds == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlSeconds, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaPhoto{ID: $ID, id: $id, ttlSeconds: $ttlSeconds}';
  }
}

class InputMediaGeoPoint extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4190388548;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 4190388548;
  var geoPoint;

  InputMediaGeoPoint({required this.geoPoint});

  static InputMediaGeoPoint fromReader(BinaryReader reader) {
    var len;
    var geoPoint = reader.tgReadObject();
    return InputMediaGeoPoint(geoPoint: geoPoint);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4190388548, 4),
      (this.geoPoint.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaGeoPoint{ID: $ID, geoPoint: $geoPoint}';
  }
}

class InputMediaContact extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4171988475;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 4171988475;
  String phoneNumber;
  String firstName;
  String lastName;
  String vcard;

  InputMediaContact(
      {required this.phoneNumber,
      required this.firstName,
      required this.lastName,
      required this.vcard});

  static InputMediaContact fromReader(BinaryReader reader) {
    var len;
    var phoneNumber = reader.tgReadString();
    var firstName = reader.tgReadString();
    var lastName = reader.tgReadString();
    var vcard = reader.tgReadString();
    return InputMediaContact(
        phoneNumber: phoneNumber,
        firstName: firstName,
        lastName: lastName,
        vcard: vcard);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4171988475, 4),
      serializeBytes(this.phoneNumber),
      serializeBytes(this.firstName),
      serializeBytes(this.lastName),
      serializeBytes(this.vcard),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaContact{ID: $ID, phoneNumber: $phoneNumber, firstName: $firstName, lastName: $lastName, vcard: $vcard}';
  }
}

class InputMediaUploadedDocument extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1530447553;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 1530447553;
  bool? nosoundVideo;
  bool? forceFile;
  var file;
  var thumb;
  String mimeType;
  List<dynamic> attributes;
  List<dynamic>? stickers;
  int? ttlSeconds;

  InputMediaUploadedDocument(
      {required this.nosoundVideo,
      required this.forceFile,
      required this.file,
      required this.thumb,
      required this.mimeType,
      required this.attributes,
      required this.stickers,
      required this.ttlSeconds});

  static InputMediaUploadedDocument fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final nosoundVideo = (flags & 8) == 8;
    final forceFile = (flags & 16) == 16;
    var file = reader.tgReadObject();
    var thumb;
    if ((flags & 4) == 4) {
      thumb = reader.tgReadObject();
    } else {
      thumb = null;
    }
    var mimeType = reader.tgReadString();
    var _vectorattributes = reader.readInt();
    if (_vectorattributes != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> attributes = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      attributes.add(reader.tgReadObject());
    }
    var stickers;
    if ((flags & 1) == 1) {
      var _vectorstickers = reader.readInt();
      if (_vectorstickers != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> stickers = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        stickers.add(reader.tgReadObject());
      }
    } else {
      stickers = null;
    }
    var ttlSeconds;
    if ((flags & 2) == 2) {
      ttlSeconds = reader.readInt();
    } else {
      ttlSeconds = null;
    }
    return InputMediaUploadedDocument(
        nosoundVideo: nosoundVideo,
        forceFile: forceFile,
        file: file,
        thumb: thumb,
        mimeType: mimeType,
        attributes: attributes,
        stickers: stickers,
        ttlSeconds: ttlSeconds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1530447553, 4),
      [0, 0, 0, 0],
      (this.file.getBytes() as List<int>),
      (this.thumb == null || this.thumb == false)
          ? List<int>.empty()
          : [(this.thumb.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.mimeType),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.attributes!.length, 4,
          little: true, signed: true),
      this
          .attributes!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.stickers == null || this.stickers == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.stickers!.length, 4,
                  little: true, signed: true),
              this
                  .stickers!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.ttlSeconds == null || this.ttlSeconds == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlSeconds, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaUploadedDocument{ID: $ID, nosoundVideo: $nosoundVideo, forceFile: $forceFile, file: $file, thumb: $thumb, mimeType: $mimeType, attributes: $attributes, stickers: $stickers, ttlSeconds: $ttlSeconds}';
  }
}

class InputMediaDocument extends BaseConstructor {
  static const CONSTRUCTOR_ID = 860303448;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 860303448;
  var id;
  int? ttlSeconds;
  String? query;

  InputMediaDocument(
      {required this.id, required this.ttlSeconds, required this.query});

  static InputMediaDocument fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.tgReadObject();
    var ttlSeconds;
    if ((flags & 1) == 1) {
      ttlSeconds = reader.readInt();
    } else {
      ttlSeconds = null;
    }
    var query;
    if ((flags & 2) == 2) {
      query = reader.tgReadString();
    } else {
      query = null;
    }
    return InputMediaDocument(id: id, ttlSeconds: ttlSeconds, query: query);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(860303448, 4),
      [0, 0, 0, 0],
      (this.id.getBytes() as List<int>),
      (this.ttlSeconds == null || this.ttlSeconds == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlSeconds, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.query == null || this.query == false)
          ? List<int>.empty()
          : [serializeBytes(this.query)].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaDocument{ID: $ID, id: $id, ttlSeconds: $ttlSeconds, query: $query}';
  }
}

class InputMediaVenue extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3242007569;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 3242007569;
  var geoPoint;
  String title;
  String address;
  String provider;
  String venueId;
  String venueType;

  InputMediaVenue(
      {required this.geoPoint,
      required this.title,
      required this.address,
      required this.provider,
      required this.venueId,
      required this.venueType});

  static InputMediaVenue fromReader(BinaryReader reader) {
    var len;
    var geoPoint = reader.tgReadObject();
    var title = reader.tgReadString();
    var address = reader.tgReadString();
    var provider = reader.tgReadString();
    var venueId = reader.tgReadString();
    var venueType = reader.tgReadString();
    return InputMediaVenue(
        geoPoint: geoPoint,
        title: title,
        address: address,
        provider: provider,
        venueId: venueId,
        venueType: venueType);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3242007569, 4),
      (this.geoPoint.getBytes() as List<int>),
      serializeBytes(this.title),
      serializeBytes(this.address),
      serializeBytes(this.provider),
      serializeBytes(this.venueId),
      serializeBytes(this.venueType),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaVenue{ID: $ID, geoPoint: $geoPoint, title: $title, address: $address, provider: $provider, venueId: $venueId, venueType: $venueType}';
  }
}

class InputMediaPhotoExternal extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3854302746;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 3854302746;
  String url;
  int? ttlSeconds;

  InputMediaPhotoExternal({required this.url, required this.ttlSeconds});

  static InputMediaPhotoExternal fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var url = reader.tgReadString();
    var ttlSeconds;
    if ((flags & 1) == 1) {
      ttlSeconds = reader.readInt();
    } else {
      ttlSeconds = null;
    }
    return InputMediaPhotoExternal(url: url, ttlSeconds: ttlSeconds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3854302746, 4),
      [0, 0, 0, 0],
      serializeBytes(this.url),
      (this.ttlSeconds == null || this.ttlSeconds == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlSeconds, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaPhotoExternal{ID: $ID, url: $url, ttlSeconds: $ttlSeconds}';
  }
}

class InputMediaDocumentExternal extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4216511641;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 4216511641;
  String url;
  int? ttlSeconds;

  InputMediaDocumentExternal({required this.url, required this.ttlSeconds});

  static InputMediaDocumentExternal fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var url = reader.tgReadString();
    var ttlSeconds;
    if ((flags & 1) == 1) {
      ttlSeconds = reader.readInt();
    } else {
      ttlSeconds = null;
    }
    return InputMediaDocumentExternal(url: url, ttlSeconds: ttlSeconds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4216511641, 4),
      [0, 0, 0, 0],
      serializeBytes(this.url),
      (this.ttlSeconds == null || this.ttlSeconds == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlSeconds, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaDocumentExternal{ID: $ID, url: $url, ttlSeconds: $ttlSeconds}';
  }
}

class InputMediaGame extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3544138739;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 3544138739;
  var id;

  InputMediaGame({required this.id});

  static InputMediaGame fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadObject();
    return InputMediaGame(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3544138739, 4),
      (this.id.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaGame{ID: $ID, id: $id}';
  }
}

class InputMediaInvoice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3648624756;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 3648624756;
  String title;
  String description;
  var photo;
  var invoice;
  List<int> payload;
  String provider;
  var providerData;
  String? startParam;

  InputMediaInvoice(
      {required this.title,
      required this.description,
      required this.photo,
      required this.invoice,
      required this.payload,
      required this.provider,
      required this.providerData,
      required this.startParam});

  static InputMediaInvoice fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var title = reader.tgReadString();
    var description = reader.tgReadString();
    var photo;
    if ((flags & 1) == 1) {
      photo = reader.tgReadObject();
    } else {
      photo = null;
    }
    var invoice = reader.tgReadObject();
    var payload = reader.tgReadBytes();
    var provider = reader.tgReadString();
    var providerData = reader.tgReadObject();
    var startParam;
    if ((flags & 2) == 2) {
      startParam = reader.tgReadString();
    } else {
      startParam = null;
    }
    return InputMediaInvoice(
        title: title,
        description: description,
        photo: photo,
        invoice: invoice,
        payload: payload,
        provider: provider,
        providerData: providerData,
        startParam: startParam);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3648624756, 4),
      [0, 0, 0, 0],
      serializeBytes(this.title),
      serializeBytes(this.description),
      (this.photo == null || this.photo == false)
          ? List<int>.empty()
          : [(this.photo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.invoice.getBytes() as List<int>),
      serializeBytes(this.payload),
      serializeBytes(this.provider),
      (this.providerData.getBytes() as List<int>),
      (this.startParam == null || this.startParam == false)
          ? List<int>.empty()
          : [serializeBytes(this.startParam)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaInvoice{ID: $ID, title: $title, description: $description, photo: $photo, invoice: $invoice, payload: $payload, provider: $provider, providerData: $providerData, startParam: $startParam}';
  }
}

class InputMediaGeoLive extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2535434307;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 2535434307;
  bool? stopped;
  var geoPoint;
  int? heading;
  int? period;
  int? proximityNotificationRadius;

  InputMediaGeoLive(
      {required this.stopped,
      required this.geoPoint,
      required this.heading,
      required this.period,
      required this.proximityNotificationRadius});

  static InputMediaGeoLive fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final stopped = (flags & 1) == 1;
    var geoPoint = reader.tgReadObject();
    var heading;
    if ((flags & 4) == 4) {
      heading = reader.readInt();
    } else {
      heading = null;
    }
    var period;
    if ((flags & 2) == 2) {
      period = reader.readInt();
    } else {
      period = null;
    }
    var proximityNotificationRadius;
    if ((flags & 8) == 8) {
      proximityNotificationRadius = reader.readInt();
    } else {
      proximityNotificationRadius = null;
    }
    return InputMediaGeoLive(
        stopped: stopped,
        geoPoint: geoPoint,
        heading: heading,
        period: period,
        proximityNotificationRadius: proximityNotificationRadius);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2535434307, 4),
      [0, 0, 0, 0],
      (this.geoPoint.getBytes() as List<int>),
      (this.heading == null || this.heading == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.heading, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.period == null || this.period == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.period, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.proximityNotificationRadius == null ||
              this.proximityNotificationRadius == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.proximityNotificationRadius, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaGeoLive{ID: $ID, stopped: $stopped, geoPoint: $geoPoint, heading: $heading, period: $period, proximityNotificationRadius: $proximityNotificationRadius}';
  }
}

class InputMediaPoll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 261416433;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 261416433;
  var poll;
  List<List<int>>? correctAnswers;
  String? solution;
  List<dynamic>? solutionEntities;

  InputMediaPoll(
      {required this.poll,
      required this.correctAnswers,
      required this.solution,
      required this.solutionEntities});

  static InputMediaPoll fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var poll = reader.tgReadObject();
    var correctAnswers;
    if ((flags & 1) == 1) {
      var _vectorcorrectAnswers = reader.readInt();
      if (_vectorcorrectAnswers != 481674261) throw Exception('Wrong vectorId');
      List<List<int>> correctAnswers = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        correctAnswers.add(reader.tgReadBytes());
      }
    } else {
      correctAnswers = null;
    }
    var solution;
    if ((flags & 2) == 2) {
      solution = reader.tgReadString();
    } else {
      solution = null;
    }
    var solutionEntities;
    if ((flags & 2) == 2) {
      var _vectorsolutionEntities = reader.readInt();
      if (_vectorsolutionEntities != 481674261)
        throw Exception('Wrong vectorId');
      List<dynamic> solutionEntities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        solutionEntities.add(reader.tgReadObject());
      }
    } else {
      solutionEntities = null;
    }
    return InputMediaPoll(
        poll: poll,
        correctAnswers: correctAnswers,
        solution: solution,
        solutionEntities: solutionEntities);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(261416433, 4),
      [0, 0, 0, 0],
      (this.poll.getBytes() as List<int>),
      (this.correctAnswers == null || this.correctAnswers == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.correctAnswers!.length, 4,
                  little: true, signed: true),
              this
                  .correctAnswers!
                  .map((x) => serializeBytes(x))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.solution == null || this.solution == false)
          ? List<int>.empty()
          : [serializeBytes(this.solution)]
              .expand((element) => element)
              .toList(),
      (this.solutionEntities == null || this.solutionEntities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.solutionEntities!.length, 4,
                  little: true, signed: true),
              this
                  .solutionEntities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaPoll{ID: $ID, poll: $poll, correctAnswers: $correctAnswers, solution: $solution, solutionEntities: $solutionEntities}';
  }
}

class InputMediaDice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3866083195;
  static const SUBCLASS_OF_ID = 4210575092;
  final classType = "constructor";
  final ID = 3866083195;
  String emoticon;

  InputMediaDice({required this.emoticon});

  static InputMediaDice fromReader(BinaryReader reader) {
    var len;
    var emoticon = reader.tgReadString();
    return InputMediaDice(emoticon: emoticon);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3866083195, 4),
      serializeBytes(this.emoticon),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMediaDice{ID: $ID, emoticon: $emoticon}';
  }
}

class InputChatPhotoEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 480546647;
  static const SUBCLASS_OF_ID = 3572182388;
  final classType = "constructor";
  final ID = 480546647;

  InputChatPhotoEmpty();

  static InputChatPhotoEmpty fromReader(BinaryReader reader) {
    var len;
    return InputChatPhotoEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(480546647, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputChatPhotoEmpty{ID: $ID, }';
  }
}

class InputChatUploadedPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3326243406;
  static const SUBCLASS_OF_ID = 3572182388;
  final classType = "constructor";
  final ID = 3326243406;
  var file;
  var video;
  double? videoStartTs;

  InputChatUploadedPhoto(
      {required this.file, required this.video, required this.videoStartTs});

  static InputChatUploadedPhoto fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var file;
    if ((flags & 1) == 1) {
      file = reader.tgReadObject();
    } else {
      file = null;
    }
    var video;
    if ((flags & 2) == 2) {
      video = reader.tgReadObject();
    } else {
      video = null;
    }
    var videoStartTs;
    if ((flags & 4) == 4) {
      videoStartTs = reader.readDouble();
    } else {
      videoStartTs = null;
    }
    return InputChatUploadedPhoto(
        file: file, video: video, videoStartTs: videoStartTs);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3326243406, 4),
      [0, 0, 0, 0],
      (this.file == null || this.file == false)
          ? List<int>.empty()
          : [(this.file.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.video == null || this.video == false)
          ? List<int>.empty()
          : [(this.video.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.videoStartTs == null || this.videoStartTs == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.videoStartTs, 4)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputChatUploadedPhoto{ID: $ID, file: $file, video: $video, videoStartTs: $videoStartTs}';
  }
}

class InputChatPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2303962423;
  static const SUBCLASS_OF_ID = 3572182388;
  final classType = "constructor";
  final ID = 2303962423;
  var id;

  InputChatPhoto({required this.id});

  static InputChatPhoto fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadObject();
    return InputChatPhoto(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2303962423, 4),
      (this.id.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputChatPhoto{ID: $ID, id: $id}';
  }
}

class InputGeoPointEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3837862870;
  static const SUBCLASS_OF_ID = 70308389;
  final classType = "constructor";
  final ID = 3837862870;

  InputGeoPointEmpty();

  static InputGeoPointEmpty fromReader(BinaryReader reader) {
    var len;
    return InputGeoPointEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3837862870, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputGeoPointEmpty{ID: $ID, }';
  }
}

class InputGeoPoint extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1210199983;
  static const SUBCLASS_OF_ID = 70308389;
  final classType = "constructor";
  final ID = 1210199983;
  double lat;
  double long;
  int? accuracyRadius;

  InputGeoPoint(
      {required this.lat, required this.long, required this.accuracyRadius});

  static InputGeoPoint fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var lat = reader.readDouble();
    var long = reader.readDouble();
    var accuracyRadius;
    if ((flags & 1) == 1) {
      accuracyRadius = reader.readInt();
    } else {
      accuracyRadius = null;
    }
    return InputGeoPoint(lat: lat, long: long, accuracyRadius: accuracyRadius);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1210199983, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.lat, 4),
      readBufferFromBigInt(this.long, 4),
      (this.accuracyRadius == null || this.accuracyRadius == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.accuracyRadius, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputGeoPoint{ID: $ID, lat: $lat, long: $long, accuracyRadius: $accuracyRadius}';
  }
}

class InputPhotoEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 483901197;
  static const SUBCLASS_OF_ID = 2221106144;
  final classType = "constructor";
  final ID = 483901197;

  InputPhotoEmpty();

  static InputPhotoEmpty fromReader(BinaryReader reader) {
    var len;
    return InputPhotoEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(483901197, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPhotoEmpty{ID: $ID, }';
  }
}

class InputPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1001634122;
  static const SUBCLASS_OF_ID = 2221106144;
  final classType = "constructor";
  final ID = 1001634122;
  BigInt id;
  BigInt accessHash;
  List<int> fileReference;

  InputPhoto(
      {required this.id,
      required this.accessHash,
      required this.fileReference});

  static InputPhoto fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var fileReference = reader.tgReadBytes();
    return InputPhoto(
        id: id, accessHash: accessHash, fileReference: fileReference);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1001634122, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.fileReference),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPhoto{ID: $ID, id: $id, accessHash: $accessHash, fileReference: $fileReference}';
  }
}

class InputFileLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3755650017;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 3755650017;
  BigInt volumeId;
  int localId;
  BigInt secret;
  List<int> fileReference;

  InputFileLocation(
      {required this.volumeId,
      required this.localId,
      required this.secret,
      required this.fileReference});

  static InputFileLocation fromReader(BinaryReader reader) {
    var len;
    var volumeId = reader.readLong();
    var localId = reader.readInt();
    var secret = reader.readLong();
    var fileReference = reader.tgReadBytes();
    return InputFileLocation(
        volumeId: volumeId,
        localId: localId,
        secret: secret,
        fileReference: fileReference);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3755650017, 4),
      readBufferFromBigInt(this.volumeId, 8, little: true, signed: true),
      readBufferFromBigInt(this.localId, 4, little: true, signed: true),
      readBufferFromBigInt(this.secret, 8, little: true, signed: true),
      serializeBytes(this.fileReference),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputFileLocation{ID: $ID, volumeId: $volumeId, localId: $localId, secret: $secret, fileReference: $fileReference}';
  }
}

class InputEncryptedFileLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4112735573;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 4112735573;
  BigInt id;
  BigInt accessHash;

  InputEncryptedFileLocation({required this.id, required this.accessHash});

  static InputEncryptedFileLocation fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputEncryptedFileLocation(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4112735573, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputEncryptedFileLocation{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class InputDocumentFileLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3134223748;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 3134223748;
  BigInt id;
  BigInt accessHash;
  List<int> fileReference;
  String thumbSize;

  InputDocumentFileLocation(
      {required this.id,
      required this.accessHash,
      required this.fileReference,
      required this.thumbSize});

  static InputDocumentFileLocation fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var fileReference = reader.tgReadBytes();
    var thumbSize = reader.tgReadString();
    return InputDocumentFileLocation(
        id: id,
        accessHash: accessHash,
        fileReference: fileReference,
        thumbSize: thumbSize);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3134223748, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.fileReference),
      serializeBytes(this.thumbSize),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputDocumentFileLocation{ID: $ID, id: $id, accessHash: $accessHash, fileReference: $fileReference, thumbSize: $thumbSize}';
  }
}

class InputSecureFileLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3418877480;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 3418877480;
  BigInt id;
  BigInt accessHash;

  InputSecureFileLocation({required this.id, required this.accessHash});

  static InputSecureFileLocation fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputSecureFileLocation(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3418877480, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputSecureFileLocation{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class InputTakeoutFileLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 700340377;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 700340377;

  InputTakeoutFileLocation();

  static InputTakeoutFileLocation fromReader(BinaryReader reader) {
    var len;
    return InputTakeoutFileLocation();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(700340377, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputTakeoutFileLocation{ID: $ID, }';
  }
}

class InputPhotoFileLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1075322878;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 1075322878;
  BigInt id;
  BigInt accessHash;
  List<int> fileReference;
  String thumbSize;

  InputPhotoFileLocation(
      {required this.id,
      required this.accessHash,
      required this.fileReference,
      required this.thumbSize});

  static InputPhotoFileLocation fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var fileReference = reader.tgReadBytes();
    var thumbSize = reader.tgReadString();
    return InputPhotoFileLocation(
        id: id,
        accessHash: accessHash,
        fileReference: fileReference,
        thumbSize: thumbSize);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1075322878, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.fileReference),
      serializeBytes(this.thumbSize),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPhotoFileLocation{ID: $ID, id: $id, accessHash: $accessHash, fileReference: $fileReference, thumbSize: $thumbSize}';
  }
}

class InputPhotoLegacyFileLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3627312883;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 3627312883;
  BigInt id;
  BigInt accessHash;
  List<int> fileReference;
  BigInt volumeId;
  int localId;
  BigInt secret;

  InputPhotoLegacyFileLocation(
      {required this.id,
      required this.accessHash,
      required this.fileReference,
      required this.volumeId,
      required this.localId,
      required this.secret});

  static InputPhotoLegacyFileLocation fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var fileReference = reader.tgReadBytes();
    var volumeId = reader.readLong();
    var localId = reader.readInt();
    var secret = reader.readLong();
    return InputPhotoLegacyFileLocation(
        id: id,
        accessHash: accessHash,
        fileReference: fileReference,
        volumeId: volumeId,
        localId: localId,
        secret: secret);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3627312883, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.fileReference),
      readBufferFromBigInt(this.volumeId, 8, little: true, signed: true),
      readBufferFromBigInt(this.localId, 4, little: true, signed: true),
      readBufferFromBigInt(this.secret, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPhotoLegacyFileLocation{ID: $ID, id: $id, accessHash: $accessHash, fileReference: $fileReference, volumeId: $volumeId, localId: $localId, secret: $secret}';
  }
}

class InputPeerPhotoFileLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 925204121;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 925204121;
  bool? big;
  var peer;
  BigInt photoId;

  InputPeerPhotoFileLocation(
      {required this.big, required this.peer, required this.photoId});

  static InputPeerPhotoFileLocation fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final big = (flags & 1) == 1;
    var peer = reader.tgReadObject();
    var photoId = reader.readLong();
    return InputPeerPhotoFileLocation(big: big, peer: peer, photoId: photoId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(925204121, 4),
      [0, 0, 0, 0],
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.photoId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPeerPhotoFileLocation{ID: $ID, big: $big, peer: $peer, photoId: $photoId}';
  }
}

class InputStickerSetThumb extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2642736091;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 2642736091;
  var stickerset;
  int thumbVersion;

  InputStickerSetThumb({required this.stickerset, required this.thumbVersion});

  static InputStickerSetThumb fromReader(BinaryReader reader) {
    var len;
    var stickerset = reader.tgReadObject();
    var thumbVersion = reader.readInt();
    return InputStickerSetThumb(
        stickerset: stickerset, thumbVersion: thumbVersion);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2642736091, 4),
      (this.stickerset.getBytes() as List<int>),
      readBufferFromBigInt(this.thumbVersion, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickerSetThumb{ID: $ID, stickerset: $stickerset, thumbVersion: $thumbVersion}';
  }
}

class InputGroupCallStream extends BaseConstructor {
  static const CONSTRUCTOR_ID = 93890858;
  static const SUBCLASS_OF_ID = 354669666;
  final classType = "constructor";
  final ID = 93890858;
  var call;
  BigInt timeMs;
  int scale;
  int? videoChannel;
  int? videoQuality;

  InputGroupCallStream(
      {required this.call,
      required this.timeMs,
      required this.scale,
      required this.videoChannel,
      required this.videoQuality});

  static InputGroupCallStream fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var call = reader.tgReadObject();
    var timeMs = reader.readLong();
    var scale = reader.readInt();
    var videoChannel;
    if ((flags & 1) == 1) {
      videoChannel = reader.readInt();
    } else {
      videoChannel = null;
    }
    var videoQuality;
    if ((flags & 1) == 1) {
      videoQuality = reader.readInt();
    } else {
      videoQuality = null;
    }
    return InputGroupCallStream(
        call: call,
        timeMs: timeMs,
        scale: scale,
        videoChannel: videoChannel,
        videoQuality: videoQuality);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(93890858, 4),
      [0, 0, 0, 0],
      (this.call.getBytes() as List<int>),
      readBufferFromBigInt(this.timeMs, 8, little: true, signed: true),
      readBufferFromBigInt(this.scale, 4, little: true, signed: true),
      (this.videoChannel == null || this.videoChannel == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.videoChannel, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.videoQuality == null || this.videoQuality == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.videoQuality, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputGroupCallStream{ID: $ID, call: $call, timeMs: $timeMs, scale: $scale, videoChannel: $videoChannel, videoQuality: $videoQuality}';
  }
}

class PeerUser extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1498486562;
  static const SUBCLASS_OF_ID = 47470215;
  final classType = "constructor";
  final ID = 1498486562;
  BigInt userId;

  PeerUser({required this.userId});

  static PeerUser fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    return PeerUser(userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1498486562, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PeerUser{ID: $ID, userId: $userId}';
  }
}

class PeerChat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 918946202;
  static const SUBCLASS_OF_ID = 47470215;
  final classType = "constructor";
  final ID = 918946202;
  BigInt chatId;

  PeerChat({required this.chatId});

  static PeerChat fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readLong();
    return PeerChat(chatId: chatId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(918946202, 4),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PeerChat{ID: $ID, chatId: $chatId}';
  }
}

class PeerChannel extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2728736542;
  static const SUBCLASS_OF_ID = 47470215;
  final classType = "constructor";
  final ID = 2728736542;
  BigInt channelId;

  PeerChannel({required this.channelId});

  static PeerChannel fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    return PeerChannel(channelId: channelId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2728736542, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PeerChannel{ID: $ID, channelId: $channelId}';
  }
}

class UserEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3552332666;
  static const SUBCLASS_OF_ID = 765557111;
  final classType = "constructor";
  final ID = 3552332666;
  BigInt id;

  UserEmpty({required this.id});

  static UserEmpty fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    return UserEmpty(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3552332666, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserEmpty{ID: $ID, id: $id}';
  }
}

class User extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1073147056;
  static const SUBCLASS_OF_ID = 765557111;
  final classType = "constructor";
  final ID = 1073147056;
  bool? self;
  bool? contact;
  bool? mutualContact;
  bool? deleted;
  bool? bot;
  bool? botChatHistory;
  bool? botNochats;
  bool? verified;
  bool? restricted;
  bool? min;
  bool? botInlineGeo;
  bool? support;
  bool? scam;
  bool? applyMinPhoto;
  bool? fake;
  BigInt id;
  BigInt? accessHash;
  String? firstName;
  String? lastName;
  String? username;
  String? phone;
  var photo;
  var status;
  int? botInfoVersion;
  List<dynamic>? restrictionReason;
  String? botInlinePlaceholder;
  String? langCode;

  User(
      {required this.self,
      required this.contact,
      required this.mutualContact,
      required this.deleted,
      required this.bot,
      required this.botChatHistory,
      required this.botNochats,
      required this.verified,
      required this.restricted,
      required this.min,
      required this.botInlineGeo,
      required this.support,
      required this.scam,
      required this.applyMinPhoto,
      required this.fake,
      required this.id,
      required this.accessHash,
      required this.firstName,
      required this.lastName,
      required this.username,
      required this.phone,
      required this.photo,
      required this.status,
      required this.botInfoVersion,
      required this.restrictionReason,
      required this.botInlinePlaceholder,
      required this.langCode});

  static User fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final self = (flags & 1024) == 1024;
    final contact = (flags & 2048) == 2048;
    final mutualContact = (flags & 4096) == 4096;
    final deleted = (flags & 8192) == 8192;
    final bot = (flags & 16384) == 16384;
    final botChatHistory = (flags & 32768) == 32768;
    final botNochats = (flags & 65536) == 65536;
    final verified = (flags & 131072) == 131072;
    final restricted = (flags & 262144) == 262144;
    final min = (flags & 1048576) == 1048576;
    final botInlineGeo = (flags & 2097152) == 2097152;
    final support = (flags & 8388608) == 8388608;
    final scam = (flags & 16777216) == 16777216;
    final applyMinPhoto = (flags & 33554432) == 33554432;
    final fake = (flags & 67108864) == 67108864;
    var id = reader.readLong();
    var accessHash;
    if ((flags & 1) == 1) {
      accessHash = reader.readLong();
    } else {
      accessHash = null;
    }
    var firstName;
    if ((flags & 2) == 2) {
      firstName = reader.tgReadString();
    } else {
      firstName = null;
    }
    var lastName;
    if ((flags & 4) == 4) {
      lastName = reader.tgReadString();
    } else {
      lastName = null;
    }
    var username;
    if ((flags & 8) == 8) {
      username = reader.tgReadString();
    } else {
      username = null;
    }
    var phone;
    if ((flags & 16) == 16) {
      phone = reader.tgReadString();
    } else {
      phone = null;
    }
    var photo;
    if ((flags & 32) == 32) {
      photo = reader.tgReadObject();
    } else {
      photo = null;
    }
    var status;
    if ((flags & 64) == 64) {
      status = reader.tgReadObject();
    } else {
      status = null;
    }
    var botInfoVersion;
    if ((flags & 16384) == 16384) {
      botInfoVersion = reader.readInt();
    } else {
      botInfoVersion = null;
    }
    var restrictionReason;
    if ((flags & 262144) == 262144) {
      var _vectorrestrictionReason = reader.readInt();
      if (_vectorrestrictionReason != 481674261)
        throw Exception('Wrong vectorId');
      List<dynamic> restrictionReason = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        restrictionReason.add(reader.tgReadObject());
      }
    } else {
      restrictionReason = null;
    }
    var botInlinePlaceholder;
    if ((flags & 524288) == 524288) {
      botInlinePlaceholder = reader.tgReadString();
    } else {
      botInlinePlaceholder = null;
    }
    var langCode;
    if ((flags & 4194304) == 4194304) {
      langCode = reader.tgReadString();
    } else {
      langCode = null;
    }
    return User(
        self: self,
        contact: contact,
        mutualContact: mutualContact,
        deleted: deleted,
        bot: bot,
        botChatHistory: botChatHistory,
        botNochats: botNochats,
        verified: verified,
        restricted: restricted,
        min: min,
        botInlineGeo: botInlineGeo,
        support: support,
        scam: scam,
        applyMinPhoto: applyMinPhoto,
        fake: fake,
        id: id,
        accessHash: accessHash,
        firstName: firstName,
        lastName: lastName,
        username: username,
        phone: phone,
        photo: photo,
        status: status,
        botInfoVersion: botInfoVersion,
        restrictionReason: restrictionReason,
        botInlinePlaceholder: botInlinePlaceholder,
        langCode: langCode);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1073147056, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      (this.accessHash == null || this.accessHash == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.accessHash, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.firstName == null || this.firstName == false)
          ? List<int>.empty()
          : [serializeBytes(this.firstName)]
              .expand((element) => element)
              .toList(),
      (this.lastName == null || this.lastName == false)
          ? List<int>.empty()
          : [serializeBytes(this.lastName)]
              .expand((element) => element)
              .toList(),
      (this.username == null || this.username == false)
          ? List<int>.empty()
          : [serializeBytes(this.username)]
              .expand((element) => element)
              .toList(),
      (this.phone == null || this.phone == false)
          ? List<int>.empty()
          : [serializeBytes(this.phone)].expand((element) => element).toList(),
      (this.photo == null || this.photo == false)
          ? List<int>.empty()
          : [(this.photo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.status == null || this.status == false)
          ? List<int>.empty()
          : [(this.status.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.botInfoVersion == null || this.botInfoVersion == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.botInfoVersion, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.restrictionReason == null || this.restrictionReason == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.restrictionReason!.length, 4,
                  little: true, signed: true),
              this
                  .restrictionReason!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.botInlinePlaceholder == null || this.botInlinePlaceholder == false)
          ? List<int>.empty()
          : [serializeBytes(this.botInlinePlaceholder)]
              .expand((element) => element)
              .toList(),
      (this.langCode == null || this.langCode == false)
          ? List<int>.empty()
          : [serializeBytes(this.langCode)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'User{ID: $ID, self: $self, contact: $contact, mutualContact: $mutualContact, deleted: $deleted, bot: $bot, botChatHistory: $botChatHistory, botNochats: $botNochats, verified: $verified, restricted: $restricted, min: $min, botInlineGeo: $botInlineGeo, support: $support, scam: $scam, applyMinPhoto: $applyMinPhoto, fake: $fake, id: $id, accessHash: $accessHash, firstName: $firstName, lastName: $lastName, username: $username, phone: $phone, photo: $photo, status: $status, botInfoVersion: $botInfoVersion, restrictionReason: $restrictionReason, botInlinePlaceholder: $botInlinePlaceholder, langCode: $langCode}';
  }
}

class UserProfilePhotoEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1326562017;
  static const SUBCLASS_OF_ID = 3325267837;
  final classType = "constructor";
  final ID = 1326562017;

  UserProfilePhotoEmpty();

  static UserProfilePhotoEmpty fromReader(BinaryReader reader) {
    var len;
    return UserProfilePhotoEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1326562017, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserProfilePhotoEmpty{ID: $ID, }';
  }
}

class UserProfilePhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2194798342;
  static const SUBCLASS_OF_ID = 3325267837;
  final classType = "constructor";
  final ID = 2194798342;
  bool? hasVideo;
  BigInt photoId;
  List<int>? strippedThumb;
  int dcId;

  UserProfilePhoto(
      {required this.hasVideo,
      required this.photoId,
      required this.strippedThumb,
      required this.dcId});

  static UserProfilePhoto fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final hasVideo = (flags & 1) == 1;
    var photoId = reader.readLong();
    var strippedThumb;
    if ((flags & 2) == 2) {
      strippedThumb = reader.tgReadBytes();
    } else {
      strippedThumb = null;
    }
    var dcId = reader.readInt();
    return UserProfilePhoto(
        hasVideo: hasVideo,
        photoId: photoId,
        strippedThumb: strippedThumb,
        dcId: dcId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2194798342, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.photoId, 8, little: true, signed: true),
      (this.strippedThumb == null || this.strippedThumb == false)
          ? List<int>.empty()
          : [serializeBytes(this.strippedThumb)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserProfilePhoto{ID: $ID, hasVideo: $hasVideo, photoId: $photoId, strippedThumb: $strippedThumb, dcId: $dcId}';
  }
}

class UserStatusEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 164646985;
  static const SUBCLASS_OF_ID = 1527477310;
  final classType = "constructor";
  final ID = 164646985;

  UserStatusEmpty();

  static UserStatusEmpty fromReader(BinaryReader reader) {
    var len;
    return UserStatusEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(164646985, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserStatusEmpty{ID: $ID, }';
  }
}

class UserStatusOnline extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3988339017;
  static const SUBCLASS_OF_ID = 1527477310;
  final classType = "constructor";
  final ID = 3988339017;
  int expires;

  UserStatusOnline({required this.expires});

  static UserStatusOnline fromReader(BinaryReader reader) {
    var len;
    var expires = reader.readInt();
    return UserStatusOnline(expires: expires);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3988339017, 4),
      readBufferFromBigInt(this.expires, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserStatusOnline{ID: $ID, expires: $expires}';
  }
}

class UserStatusOffline extends BaseConstructor {
  static const CONSTRUCTOR_ID = 9203775;
  static const SUBCLASS_OF_ID = 1527477310;
  final classType = "constructor";
  final ID = 9203775;
  int wasOnline;

  UserStatusOffline({required this.wasOnline});

  static UserStatusOffline fromReader(BinaryReader reader) {
    var len;
    var wasOnline = reader.readInt();
    return UserStatusOffline(wasOnline: wasOnline);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(9203775, 4),
      readBufferFromBigInt(this.wasOnline, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserStatusOffline{ID: $ID, wasOnline: $wasOnline}';
  }
}

class UserStatusRecently extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3798942449;
  static const SUBCLASS_OF_ID = 1527477310;
  final classType = "constructor";
  final ID = 3798942449;

  UserStatusRecently();

  static UserStatusRecently fromReader(BinaryReader reader) {
    var len;
    return UserStatusRecently();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3798942449, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserStatusRecently{ID: $ID, }';
  }
}

class UserStatusLastWeek extends BaseConstructor {
  static const CONSTRUCTOR_ID = 129960444;
  static const SUBCLASS_OF_ID = 1527477310;
  final classType = "constructor";
  final ID = 129960444;

  UserStatusLastWeek();

  static UserStatusLastWeek fromReader(BinaryReader reader) {
    var len;
    return UserStatusLastWeek();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(129960444, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserStatusLastWeek{ID: $ID, }';
  }
}

class UserStatusLastMonth extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2011940674;
  static const SUBCLASS_OF_ID = 1527477310;
  final classType = "constructor";
  final ID = 2011940674;

  UserStatusLastMonth();

  static UserStatusLastMonth fromReader(BinaryReader reader) {
    var len;
    return UserStatusLastMonth();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2011940674, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserStatusLastMonth{ID: $ID, }';
  }
}

class ChatEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 693512293;
  static const SUBCLASS_OF_ID = 3316604308;
  final classType = "constructor";
  final ID = 693512293;
  BigInt id;

  ChatEmpty({required this.id});

  static ChatEmpty fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    return ChatEmpty(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(693512293, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatEmpty{ID: $ID, id: $id}';
  }
}

class Chat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1103884886;
  static const SUBCLASS_OF_ID = 3316604308;
  final classType = "constructor";
  final ID = 1103884886;
  bool? creator;
  bool? kicked;
  bool? left;
  bool? deactivated;
  bool? callActive;
  bool? callNotEmpty;
  bool? noforwards;
  BigInt id;
  String title;
  var photo;
  int participantsCount;
  int date;
  int version;
  var migratedTo;
  var adminRights;
  var defaultBannedRights;

  Chat(
      {required this.creator,
      required this.kicked,
      required this.left,
      required this.deactivated,
      required this.callActive,
      required this.callNotEmpty,
      required this.noforwards,
      required this.id,
      required this.title,
      required this.photo,
      required this.participantsCount,
      required this.date,
      required this.version,
      required this.migratedTo,
      required this.adminRights,
      required this.defaultBannedRights});

  static Chat fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final creator = (flags & 1) == 1;
    final kicked = (flags & 2) == 2;
    final left = (flags & 4) == 4;
    final deactivated = (flags & 32) == 32;
    final callActive = (flags & 8388608) == 8388608;
    final callNotEmpty = (flags & 16777216) == 16777216;
    final noforwards = (flags & 33554432) == 33554432;
    var id = reader.readLong();
    var title = reader.tgReadString();
    var photo = reader.tgReadObject();
    var participantsCount = reader.readInt();
    var date = reader.readInt();
    var version = reader.readInt();
    var migratedTo;
    if ((flags & 64) == 64) {
      migratedTo = reader.tgReadObject();
    } else {
      migratedTo = null;
    }
    var adminRights;
    if ((flags & 16384) == 16384) {
      adminRights = reader.tgReadObject();
    } else {
      adminRights = null;
    }
    var defaultBannedRights;
    if ((flags & 262144) == 262144) {
      defaultBannedRights = reader.tgReadObject();
    } else {
      defaultBannedRights = null;
    }
    return Chat(
        creator: creator,
        kicked: kicked,
        left: left,
        deactivated: deactivated,
        callActive: callActive,
        callNotEmpty: callNotEmpty,
        noforwards: noforwards,
        id: id,
        title: title,
        photo: photo,
        participantsCount: participantsCount,
        date: date,
        version: version,
        migratedTo: migratedTo,
        adminRights: adminRights,
        defaultBannedRights: defaultBannedRights);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1103884886, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      serializeBytes(this.title),
      (this.photo.getBytes() as List<int>),
      readBufferFromBigInt(this.participantsCount, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
      (this.migratedTo == null || this.migratedTo == false)
          ? List<int>.empty()
          : [(this.migratedTo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.adminRights == null || this.adminRights == false)
          ? List<int>.empty()
          : [(this.adminRights.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.defaultBannedRights == null || this.defaultBannedRights == false)
          ? List<int>.empty()
          : [(this.defaultBannedRights.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Chat{ID: $ID, creator: $creator, kicked: $kicked, left: $left, deactivated: $deactivated, callActive: $callActive, callNotEmpty: $callNotEmpty, noforwards: $noforwards, id: $id, title: $title, photo: $photo, participantsCount: $participantsCount, date: $date, version: $version, migratedTo: $migratedTo, adminRights: $adminRights, defaultBannedRights: $defaultBannedRights}';
  }
}

class ChatForbidden extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1704108455;
  static const SUBCLASS_OF_ID = 3316604308;
  final classType = "constructor";
  final ID = 1704108455;
  BigInt id;
  String title;

  ChatForbidden({required this.id, required this.title});

  static ChatForbidden fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var title = reader.tgReadString();
    return ChatForbidden(id: id, title: title);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1704108455, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      serializeBytes(this.title),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatForbidden{ID: $ID, id: $id, title: $title}';
  }
}

class Channel extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2187439201;
  static const SUBCLASS_OF_ID = 3316604308;
  final classType = "constructor";
  final ID = 2187439201;
  bool? creator;
  bool? left;
  bool? broadcast;
  bool? verified;
  bool? megagroup;
  bool? restricted;
  bool? signatures;
  bool? min;
  bool? scam;
  bool? hasLink;
  bool? hasGeo;
  bool? slowmodeEnabled;
  bool? callActive;
  bool? callNotEmpty;
  bool? fake;
  bool? gigagroup;
  bool? noforwards;
  BigInt id;
  BigInt? accessHash;
  String title;
  String? username;
  var photo;
  int date;
  List<dynamic>? restrictionReason;
  var adminRights;
  var bannedRights;
  var defaultBannedRights;
  int? participantsCount;

  Channel(
      {required this.creator,
      required this.left,
      required this.broadcast,
      required this.verified,
      required this.megagroup,
      required this.restricted,
      required this.signatures,
      required this.min,
      required this.scam,
      required this.hasLink,
      required this.hasGeo,
      required this.slowmodeEnabled,
      required this.callActive,
      required this.callNotEmpty,
      required this.fake,
      required this.gigagroup,
      required this.noforwards,
      required this.id,
      required this.accessHash,
      required this.title,
      required this.username,
      required this.photo,
      required this.date,
      required this.restrictionReason,
      required this.adminRights,
      required this.bannedRights,
      required this.defaultBannedRights,
      required this.participantsCount});

  static Channel fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final creator = (flags & 1) == 1;
    final left = (flags & 4) == 4;
    final broadcast = (flags & 32) == 32;
    final verified = (flags & 128) == 128;
    final megagroup = (flags & 256) == 256;
    final restricted = (flags & 512) == 512;
    final signatures = (flags & 2048) == 2048;
    final min = (flags & 4096) == 4096;
    final scam = (flags & 524288) == 524288;
    final hasLink = (flags & 1048576) == 1048576;
    final hasGeo = (flags & 2097152) == 2097152;
    final slowmodeEnabled = (flags & 4194304) == 4194304;
    final callActive = (flags & 8388608) == 8388608;
    final callNotEmpty = (flags & 16777216) == 16777216;
    final fake = (flags & 33554432) == 33554432;
    final gigagroup = (flags & 67108864) == 67108864;
    final noforwards = (flags & 134217728) == 134217728;
    var id = reader.readLong();
    var accessHash;
    if ((flags & 8192) == 8192) {
      accessHash = reader.readLong();
    } else {
      accessHash = null;
    }
    var title = reader.tgReadString();
    var username;
    if ((flags & 64) == 64) {
      username = reader.tgReadString();
    } else {
      username = null;
    }
    var photo = reader.tgReadObject();
    var date = reader.readInt();
    var restrictionReason;
    if ((flags & 512) == 512) {
      var _vectorrestrictionReason = reader.readInt();
      if (_vectorrestrictionReason != 481674261)
        throw Exception('Wrong vectorId');
      List<dynamic> restrictionReason = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        restrictionReason.add(reader.tgReadObject());
      }
    } else {
      restrictionReason = null;
    }
    var adminRights;
    if ((flags & 16384) == 16384) {
      adminRights = reader.tgReadObject();
    } else {
      adminRights = null;
    }
    var bannedRights;
    if ((flags & 32768) == 32768) {
      bannedRights = reader.tgReadObject();
    } else {
      bannedRights = null;
    }
    var defaultBannedRights;
    if ((flags & 262144) == 262144) {
      defaultBannedRights = reader.tgReadObject();
    } else {
      defaultBannedRights = null;
    }
    var participantsCount;
    if ((flags & 131072) == 131072) {
      participantsCount = reader.readInt();
    } else {
      participantsCount = null;
    }
    return Channel(
        creator: creator,
        left: left,
        broadcast: broadcast,
        verified: verified,
        megagroup: megagroup,
        restricted: restricted,
        signatures: signatures,
        min: min,
        scam: scam,
        hasLink: hasLink,
        hasGeo: hasGeo,
        slowmodeEnabled: slowmodeEnabled,
        callActive: callActive,
        callNotEmpty: callNotEmpty,
        fake: fake,
        gigagroup: gigagroup,
        noforwards: noforwards,
        id: id,
        accessHash: accessHash,
        title: title,
        username: username,
        photo: photo,
        date: date,
        restrictionReason: restrictionReason,
        adminRights: adminRights,
        bannedRights: bannedRights,
        defaultBannedRights: defaultBannedRights,
        participantsCount: participantsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2187439201, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      (this.accessHash == null || this.accessHash == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.accessHash, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      serializeBytes(this.title),
      (this.username == null || this.username == false)
          ? List<int>.empty()
          : [serializeBytes(this.username)]
              .expand((element) => element)
              .toList(),
      (this.photo.getBytes() as List<int>),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.restrictionReason == null || this.restrictionReason == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.restrictionReason!.length, 4,
                  little: true, signed: true),
              this
                  .restrictionReason!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.adminRights == null || this.adminRights == false)
          ? List<int>.empty()
          : [(this.adminRights.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.bannedRights == null || this.bannedRights == false)
          ? List<int>.empty()
          : [(this.bannedRights.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.defaultBannedRights == null || this.defaultBannedRights == false)
          ? List<int>.empty()
          : [(this.defaultBannedRights.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.participantsCount == null || this.participantsCount == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.participantsCount, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Channel{ID: $ID, creator: $creator, left: $left, broadcast: $broadcast, verified: $verified, megagroup: $megagroup, restricted: $restricted, signatures: $signatures, min: $min, scam: $scam, hasLink: $hasLink, hasGeo: $hasGeo, slowmodeEnabled: $slowmodeEnabled, callActive: $callActive, callNotEmpty: $callNotEmpty, fake: $fake, gigagroup: $gigagroup, noforwards: $noforwards, id: $id, accessHash: $accessHash, title: $title, username: $username, photo: $photo, date: $date, restrictionReason: $restrictionReason, adminRights: $adminRights, bannedRights: $bannedRights, defaultBannedRights: $defaultBannedRights, participantsCount: $participantsCount}';
  }
}

class ChannelForbidden extends BaseConstructor {
  static const CONSTRUCTOR_ID = 399807445;
  static const SUBCLASS_OF_ID = 3316604308;
  final classType = "constructor";
  final ID = 399807445;
  bool? broadcast;
  bool? megagroup;
  BigInt id;
  BigInt accessHash;
  String title;
  int? untilDate;

  ChannelForbidden(
      {required this.broadcast,
      required this.megagroup,
      required this.id,
      required this.accessHash,
      required this.title,
      required this.untilDate});

  static ChannelForbidden fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final broadcast = (flags & 32) == 32;
    final megagroup = (flags & 256) == 256;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var title = reader.tgReadString();
    var untilDate;
    if ((flags & 65536) == 65536) {
      untilDate = reader.readInt();
    } else {
      untilDate = null;
    }
    return ChannelForbidden(
        broadcast: broadcast,
        megagroup: megagroup,
        id: id,
        accessHash: accessHash,
        title: title,
        untilDate: untilDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(399807445, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.title),
      (this.untilDate == null || this.untilDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.untilDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelForbidden{ID: $ID, broadcast: $broadcast, megagroup: $megagroup, id: $id, accessHash: $accessHash, title: $title, untilDate: $untilDate}';
  }
}

class ChatFull extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3515802150;
  static const SUBCLASS_OF_ID = 3566872215;
  final classType = "constructor";
  final ID = 3515802150;
  bool? canSetUsername;
  bool? hasScheduled;
  BigInt id;
  String about;
  var participants;
  var chatPhoto;
  var notifySettings;
  var exportedInvite;
  List<dynamic>? botInfo;
  int? pinnedMsgId;
  int? folderId;
  var call;
  int? ttlPeriod;
  var groupcallDefaultJoinAs;
  String? themeEmoticon;
  int? requestsPending;
  List<BigInt>? recentRequesters;
  List<String>? availableReactions;

  ChatFull(
      {required this.canSetUsername,
      required this.hasScheduled,
      required this.id,
      required this.about,
      required this.participants,
      required this.chatPhoto,
      required this.notifySettings,
      required this.exportedInvite,
      required this.botInfo,
      required this.pinnedMsgId,
      required this.folderId,
      required this.call,
      required this.ttlPeriod,
      required this.groupcallDefaultJoinAs,
      required this.themeEmoticon,
      required this.requestsPending,
      required this.recentRequesters,
      required this.availableReactions});

  static ChatFull fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final canSetUsername = (flags & 128) == 128;
    final hasScheduled = (flags & 256) == 256;
    var id = reader.readLong();
    var about = reader.tgReadString();
    var participants = reader.tgReadObject();
    var chatPhoto;
    if ((flags & 4) == 4) {
      chatPhoto = reader.tgReadObject();
    } else {
      chatPhoto = null;
    }
    var notifySettings = reader.tgReadObject();
    var exportedInvite;
    if ((flags & 8192) == 8192) {
      exportedInvite = reader.tgReadObject();
    } else {
      exportedInvite = null;
    }
    var botInfo;
    if ((flags & 8) == 8) {
      var _vectorbotInfo = reader.readInt();
      if (_vectorbotInfo != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> botInfo = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        botInfo.add(reader.tgReadObject());
      }
    } else {
      botInfo = null;
    }
    var pinnedMsgId;
    if ((flags & 64) == 64) {
      pinnedMsgId = reader.readInt();
    } else {
      pinnedMsgId = null;
    }
    var folderId;
    if ((flags & 2048) == 2048) {
      folderId = reader.readInt();
    } else {
      folderId = null;
    }
    var call;
    if ((flags & 4096) == 4096) {
      call = reader.tgReadObject();
    } else {
      call = null;
    }
    var ttlPeriod;
    if ((flags & 16384) == 16384) {
      ttlPeriod = reader.readInt();
    } else {
      ttlPeriod = null;
    }
    var groupcallDefaultJoinAs;
    if ((flags & 32768) == 32768) {
      groupcallDefaultJoinAs = reader.tgReadObject();
    } else {
      groupcallDefaultJoinAs = null;
    }
    var themeEmoticon;
    if ((flags & 65536) == 65536) {
      themeEmoticon = reader.tgReadString();
    } else {
      themeEmoticon = null;
    }
    var requestsPending;
    if ((flags & 131072) == 131072) {
      requestsPending = reader.readInt();
    } else {
      requestsPending = null;
    }
    var recentRequesters;
    if ((flags & 131072) == 131072) {
      var _vectorrecentRequesters = reader.readInt();
      if (_vectorrecentRequesters != 481674261)
        throw Exception('Wrong vectorId');
      List<BigInt> recentRequesters = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        recentRequesters.add(reader.readLong());
      }
    } else {
      recentRequesters = null;
    }
    var availableReactions;
    if ((flags & 262144) == 262144) {
      var _vectoravailableReactions = reader.readInt();
      if (_vectoravailableReactions != 481674261)
        throw Exception('Wrong vectorId');
      List<String> availableReactions = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        availableReactions.add(reader.tgReadString());
      }
    } else {
      availableReactions = null;
    }
    return ChatFull(
        canSetUsername: canSetUsername,
        hasScheduled: hasScheduled,
        id: id,
        about: about,
        participants: participants,
        chatPhoto: chatPhoto,
        notifySettings: notifySettings,
        exportedInvite: exportedInvite,
        botInfo: botInfo,
        pinnedMsgId: pinnedMsgId,
        folderId: folderId,
        call: call,
        ttlPeriod: ttlPeriod,
        groupcallDefaultJoinAs: groupcallDefaultJoinAs,
        themeEmoticon: themeEmoticon,
        requestsPending: requestsPending,
        recentRequesters: recentRequesters,
        availableReactions: availableReactions);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3515802150, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      serializeBytes(this.about),
      (this.participants.getBytes() as List<int>),
      (this.chatPhoto == null || this.chatPhoto == false)
          ? List<int>.empty()
          : [(this.chatPhoto.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.notifySettings.getBytes() as List<int>),
      (this.exportedInvite == null || this.exportedInvite == false)
          ? List<int>.empty()
          : [(this.exportedInvite.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.botInfo == null || this.botInfo == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.botInfo!.length, 4,
                  little: true, signed: true),
              this
                  .botInfo!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.pinnedMsgId == null || this.pinnedMsgId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.pinnedMsgId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.folderId == null || this.folderId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.folderId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.call == null || this.call == false)
          ? List<int>.empty()
          : [(this.call.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.ttlPeriod == null || this.ttlPeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlPeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.groupcallDefaultJoinAs == null ||
              this.groupcallDefaultJoinAs == false)
          ? List<int>.empty()
          : [(this.groupcallDefaultJoinAs.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.themeEmoticon == null || this.themeEmoticon == false)
          ? List<int>.empty()
          : [serializeBytes(this.themeEmoticon)]
              .expand((element) => element)
              .toList(),
      (this.requestsPending == null || this.requestsPending == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.requestsPending, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.recentRequesters == null || this.recentRequesters == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.recentRequesters!.length, 4,
                  little: true, signed: true),
              this
                  .recentRequesters!
                  .map((x) =>
                      readBufferFromBigInt(x, 8, little: true, signed: true))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.availableReactions == null || this.availableReactions == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.availableReactions!.length, 4,
                  little: true, signed: true),
              this
                  .availableReactions!
                  .map((x) => serializeBytes(x))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatFull{ID: $ID, canSetUsername: $canSetUsername, hasScheduled: $hasScheduled, id: $id, about: $about, participants: $participants, chatPhoto: $chatPhoto, notifySettings: $notifySettings, exportedInvite: $exportedInvite, botInfo: $botInfo, pinnedMsgId: $pinnedMsgId, folderId: $folderId, call: $call, ttlPeriod: $ttlPeriod, groupcallDefaultJoinAs: $groupcallDefaultJoinAs, themeEmoticon: $themeEmoticon, requestsPending: $requestsPending, recentRequesters: $recentRequesters, availableReactions: $availableReactions}';
  }
}

class ChannelFull extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3778821408;
  static const SUBCLASS_OF_ID = 3566872215;
  final classType = "constructor";
  final ID = 3778821408;
  bool? canViewParticipants;
  bool? canSetUsername;
  bool? canSetStickers;
  bool? hiddenPrehistory;
  bool? canSetLocation;
  bool? hasScheduled;
  bool? canViewStats;
  bool? blocked;
  BigInt id;
  String about;
  int? participantsCount;
  int? adminsCount;
  int? kickedCount;
  int? bannedCount;
  int? onlineCount;
  int readInboxMaxId;
  int readOutboxMaxId;
  int unreadCount;
  var chatPhoto;
  var notifySettings;
  var exportedInvite;
  List<dynamic> botInfo;
  BigInt? migratedFromChatId;
  int? migratedFromMaxId;
  int? pinnedMsgId;
  var stickerset;
  int? availableMinId;
  int? folderId;
  BigInt? linkedChatId;
  var location;
  int? slowmodeSeconds;
  int? slowmodeNextSendDate;
  int? statsDc;
  int pts;
  var call;
  int? ttlPeriod;
  List<String>? pendingSuggestions;
  var groupcallDefaultJoinAs;
  String? themeEmoticon;
  int? requestsPending;
  List<BigInt>? recentRequesters;
  var defaultSendAs;
  List<String>? availableReactions;

  ChannelFull(
      {required this.canViewParticipants,
      required this.canSetUsername,
      required this.canSetStickers,
      required this.hiddenPrehistory,
      required this.canSetLocation,
      required this.hasScheduled,
      required this.canViewStats,
      required this.blocked,
      required this.id,
      required this.about,
      required this.participantsCount,
      required this.adminsCount,
      required this.kickedCount,
      required this.bannedCount,
      required this.onlineCount,
      required this.readInboxMaxId,
      required this.readOutboxMaxId,
      required this.unreadCount,
      required this.chatPhoto,
      required this.notifySettings,
      required this.exportedInvite,
      required this.botInfo,
      required this.migratedFromChatId,
      required this.migratedFromMaxId,
      required this.pinnedMsgId,
      required this.stickerset,
      required this.availableMinId,
      required this.folderId,
      required this.linkedChatId,
      required this.location,
      required this.slowmodeSeconds,
      required this.slowmodeNextSendDate,
      required this.statsDc,
      required this.pts,
      required this.call,
      required this.ttlPeriod,
      required this.pendingSuggestions,
      required this.groupcallDefaultJoinAs,
      required this.themeEmoticon,
      required this.requestsPending,
      required this.recentRequesters,
      required this.defaultSendAs,
      required this.availableReactions});

  static ChannelFull fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final canViewParticipants = (flags & 8) == 8;
    final canSetUsername = (flags & 64) == 64;
    final canSetStickers = (flags & 128) == 128;
    final hiddenPrehistory = (flags & 1024) == 1024;
    final canSetLocation = (flags & 65536) == 65536;
    final hasScheduled = (flags & 524288) == 524288;
    final canViewStats = (flags & 1048576) == 1048576;
    final blocked = (flags & 4194304) == 4194304;
    var id = reader.readLong();
    var about = reader.tgReadString();
    var participantsCount;
    if ((flags & 1) == 1) {
      participantsCount = reader.readInt();
    } else {
      participantsCount = null;
    }
    var adminsCount;
    if ((flags & 2) == 2) {
      adminsCount = reader.readInt();
    } else {
      adminsCount = null;
    }
    var kickedCount;
    if ((flags & 4) == 4) {
      kickedCount = reader.readInt();
    } else {
      kickedCount = null;
    }
    var bannedCount;
    if ((flags & 4) == 4) {
      bannedCount = reader.readInt();
    } else {
      bannedCount = null;
    }
    var onlineCount;
    if ((flags & 8192) == 8192) {
      onlineCount = reader.readInt();
    } else {
      onlineCount = null;
    }
    var readInboxMaxId = reader.readInt();
    var readOutboxMaxId = reader.readInt();
    var unreadCount = reader.readInt();
    var chatPhoto = reader.tgReadObject();
    var notifySettings = reader.tgReadObject();
    var exportedInvite;
    if ((flags & 8388608) == 8388608) {
      exportedInvite = reader.tgReadObject();
    } else {
      exportedInvite = null;
    }
    var _vectorbotInfo = reader.readInt();
    if (_vectorbotInfo != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> botInfo = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      botInfo.add(reader.tgReadObject());
    }
    var migratedFromChatId;
    if ((flags & 16) == 16) {
      migratedFromChatId = reader.readLong();
    } else {
      migratedFromChatId = null;
    }
    var migratedFromMaxId;
    if ((flags & 16) == 16) {
      migratedFromMaxId = reader.readInt();
    } else {
      migratedFromMaxId = null;
    }
    var pinnedMsgId;
    if ((flags & 32) == 32) {
      pinnedMsgId = reader.readInt();
    } else {
      pinnedMsgId = null;
    }
    var stickerset;
    if ((flags & 256) == 256) {
      stickerset = reader.tgReadObject();
    } else {
      stickerset = null;
    }
    var availableMinId;
    if ((flags & 512) == 512) {
      availableMinId = reader.readInt();
    } else {
      availableMinId = null;
    }
    var folderId;
    if ((flags & 2048) == 2048) {
      folderId = reader.readInt();
    } else {
      folderId = null;
    }
    var linkedChatId;
    if ((flags & 16384) == 16384) {
      linkedChatId = reader.readLong();
    } else {
      linkedChatId = null;
    }
    var location;
    if ((flags & 32768) == 32768) {
      location = reader.tgReadObject();
    } else {
      location = null;
    }
    var slowmodeSeconds;
    if ((flags & 131072) == 131072) {
      slowmodeSeconds = reader.readInt();
    } else {
      slowmodeSeconds = null;
    }
    var slowmodeNextSendDate;
    if ((flags & 262144) == 262144) {
      slowmodeNextSendDate = reader.readInt();
    } else {
      slowmodeNextSendDate = null;
    }
    var statsDc;
    if ((flags & 4096) == 4096) {
      statsDc = reader.readInt();
    } else {
      statsDc = null;
    }
    var pts = reader.readInt();
    var call;
    if ((flags & 2097152) == 2097152) {
      call = reader.tgReadObject();
    } else {
      call = null;
    }
    var ttlPeriod;
    if ((flags & 16777216) == 16777216) {
      ttlPeriod = reader.readInt();
    } else {
      ttlPeriod = null;
    }
    var pendingSuggestions;
    if ((flags & 33554432) == 33554432) {
      var _vectorpendingSuggestions = reader.readInt();
      if (_vectorpendingSuggestions != 481674261)
        throw Exception('Wrong vectorId');
      List<String> pendingSuggestions = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        pendingSuggestions.add(reader.tgReadString());
      }
    } else {
      pendingSuggestions = null;
    }
    var groupcallDefaultJoinAs;
    if ((flags & 67108864) == 67108864) {
      groupcallDefaultJoinAs = reader.tgReadObject();
    } else {
      groupcallDefaultJoinAs = null;
    }
    var themeEmoticon;
    if ((flags & 134217728) == 134217728) {
      themeEmoticon = reader.tgReadString();
    } else {
      themeEmoticon = null;
    }
    var requestsPending;
    if ((flags & 268435456) == 268435456) {
      requestsPending = reader.readInt();
    } else {
      requestsPending = null;
    }
    var recentRequesters;
    if ((flags & 268435456) == 268435456) {
      var _vectorrecentRequesters = reader.readInt();
      if (_vectorrecentRequesters != 481674261)
        throw Exception('Wrong vectorId');
      List<BigInt> recentRequesters = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        recentRequesters.add(reader.readLong());
      }
    } else {
      recentRequesters = null;
    }
    var defaultSendAs;
    if ((flags & 536870912) == 536870912) {
      defaultSendAs = reader.tgReadObject();
    } else {
      defaultSendAs = null;
    }
    var availableReactions;
    if ((flags & 1073741824) == 1073741824) {
      var _vectoravailableReactions = reader.readInt();
      if (_vectoravailableReactions != 481674261)
        throw Exception('Wrong vectorId');
      List<String> availableReactions = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        availableReactions.add(reader.tgReadString());
      }
    } else {
      availableReactions = null;
    }
    return ChannelFull(
        canViewParticipants: canViewParticipants,
        canSetUsername: canSetUsername,
        canSetStickers: canSetStickers,
        hiddenPrehistory: hiddenPrehistory,
        canSetLocation: canSetLocation,
        hasScheduled: hasScheduled,
        canViewStats: canViewStats,
        blocked: blocked,
        id: id,
        about: about,
        participantsCount: participantsCount,
        adminsCount: adminsCount,
        kickedCount: kickedCount,
        bannedCount: bannedCount,
        onlineCount: onlineCount,
        readInboxMaxId: readInboxMaxId,
        readOutboxMaxId: readOutboxMaxId,
        unreadCount: unreadCount,
        chatPhoto: chatPhoto,
        notifySettings: notifySettings,
        exportedInvite: exportedInvite,
        botInfo: botInfo,
        migratedFromChatId: migratedFromChatId,
        migratedFromMaxId: migratedFromMaxId,
        pinnedMsgId: pinnedMsgId,
        stickerset: stickerset,
        availableMinId: availableMinId,
        folderId: folderId,
        linkedChatId: linkedChatId,
        location: location,
        slowmodeSeconds: slowmodeSeconds,
        slowmodeNextSendDate: slowmodeNextSendDate,
        statsDc: statsDc,
        pts: pts,
        call: call,
        ttlPeriod: ttlPeriod,
        pendingSuggestions: pendingSuggestions,
        groupcallDefaultJoinAs: groupcallDefaultJoinAs,
        themeEmoticon: themeEmoticon,
        requestsPending: requestsPending,
        recentRequesters: recentRequesters,
        defaultSendAs: defaultSendAs,
        availableReactions: availableReactions);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3778821408, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      serializeBytes(this.about),
      (this.participantsCount == null || this.participantsCount == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.participantsCount, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.adminsCount == null || this.adminsCount == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.adminsCount, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.kickedCount == null || this.kickedCount == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.kickedCount, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.bannedCount == null || this.bannedCount == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.bannedCount, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.onlineCount == null || this.onlineCount == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.onlineCount, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.readInboxMaxId, 4, little: true, signed: true),
      readBufferFromBigInt(this.readOutboxMaxId, 4, little: true, signed: true),
      readBufferFromBigInt(this.unreadCount, 4, little: true, signed: true),
      (this.chatPhoto.getBytes() as List<int>),
      (this.notifySettings.getBytes() as List<int>),
      (this.exportedInvite == null || this.exportedInvite == false)
          ? List<int>.empty()
          : [(this.exportedInvite.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.botInfo!.length, 4, little: true, signed: true),
      this
          .botInfo!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.migratedFromChatId == null || this.migratedFromChatId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.migratedFromChatId, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.migratedFromMaxId == null || this.migratedFromMaxId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.migratedFromMaxId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.pinnedMsgId == null || this.pinnedMsgId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.pinnedMsgId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.stickerset == null || this.stickerset == false)
          ? List<int>.empty()
          : [(this.stickerset.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.availableMinId == null || this.availableMinId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.availableMinId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.folderId == null || this.folderId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.folderId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.linkedChatId == null || this.linkedChatId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.linkedChatId, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.location == null || this.location == false)
          ? List<int>.empty()
          : [(this.location.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.slowmodeSeconds == null || this.slowmodeSeconds == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.slowmodeSeconds, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.slowmodeNextSendDate == null || this.slowmodeNextSendDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.slowmodeNextSendDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.statsDc == null || this.statsDc == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.statsDc, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      (this.call == null || this.call == false)
          ? List<int>.empty()
          : [(this.call.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.ttlPeriod == null || this.ttlPeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlPeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.pendingSuggestions == null || this.pendingSuggestions == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.pendingSuggestions!.length, 4,
                  little: true, signed: true),
              this
                  .pendingSuggestions!
                  .map((x) => serializeBytes(x))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.groupcallDefaultJoinAs == null ||
              this.groupcallDefaultJoinAs == false)
          ? List<int>.empty()
          : [(this.groupcallDefaultJoinAs.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.themeEmoticon == null || this.themeEmoticon == false)
          ? List<int>.empty()
          : [serializeBytes(this.themeEmoticon)]
              .expand((element) => element)
              .toList(),
      (this.requestsPending == null || this.requestsPending == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.requestsPending, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.recentRequesters == null || this.recentRequesters == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.recentRequesters!.length, 4,
                  little: true, signed: true),
              this
                  .recentRequesters!
                  .map((x) =>
                      readBufferFromBigInt(x, 8, little: true, signed: true))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.defaultSendAs == null || this.defaultSendAs == false)
          ? List<int>.empty()
          : [(this.defaultSendAs.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.availableReactions == null || this.availableReactions == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.availableReactions!.length, 4,
                  little: true, signed: true),
              this
                  .availableReactions!
                  .map((x) => serializeBytes(x))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelFull{ID: $ID, canViewParticipants: $canViewParticipants, canSetUsername: $canSetUsername, canSetStickers: $canSetStickers, hiddenPrehistory: $hiddenPrehistory, canSetLocation: $canSetLocation, hasScheduled: $hasScheduled, canViewStats: $canViewStats, blocked: $blocked, id: $id, about: $about, participantsCount: $participantsCount, adminsCount: $adminsCount, kickedCount: $kickedCount, bannedCount: $bannedCount, onlineCount: $onlineCount, readInboxMaxId: $readInboxMaxId, readOutboxMaxId: $readOutboxMaxId, unreadCount: $unreadCount, chatPhoto: $chatPhoto, notifySettings: $notifySettings, exportedInvite: $exportedInvite, botInfo: $botInfo, migratedFromChatId: $migratedFromChatId, migratedFromMaxId: $migratedFromMaxId, pinnedMsgId: $pinnedMsgId, stickerset: $stickerset, availableMinId: $availableMinId, folderId: $folderId, linkedChatId: $linkedChatId, location: $location, slowmodeSeconds: $slowmodeSeconds, slowmodeNextSendDate: $slowmodeNextSendDate, statsDc: $statsDc, pts: $pts, call: $call, ttlPeriod: $ttlPeriod, pendingSuggestions: $pendingSuggestions, groupcallDefaultJoinAs: $groupcallDefaultJoinAs, themeEmoticon: $themeEmoticon, requestsPending: $requestsPending, recentRequesters: $recentRequesters, defaultSendAs: $defaultSendAs, availableReactions: $availableReactions}';
  }
}

class ChatParticipant extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3224190983;
  static const SUBCLASS_OF_ID = 2105307014;
  final classType = "constructor";
  final ID = 3224190983;
  BigInt userId;
  BigInt inviterId;
  int date;

  ChatParticipant(
      {required this.userId, required this.inviterId, required this.date});

  static ChatParticipant fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var inviterId = reader.readLong();
    var date = reader.readInt();
    return ChatParticipant(userId: userId, inviterId: inviterId, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3224190983, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.inviterId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatParticipant{ID: $ID, userId: $userId, inviterId: $inviterId, date: $date}';
  }
}

class ChatParticipantCreator extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3832270564;
  static const SUBCLASS_OF_ID = 2105307014;
  final classType = "constructor";
  final ID = 3832270564;
  BigInt userId;

  ChatParticipantCreator({required this.userId});

  static ChatParticipantCreator fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    return ChatParticipantCreator(userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3832270564, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatParticipantCreator{ID: $ID, userId: $userId}';
  }
}

class ChatParticipantAdmin extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2694004571;
  static const SUBCLASS_OF_ID = 2105307014;
  final classType = "constructor";
  final ID = 2694004571;
  BigInt userId;
  BigInt inviterId;
  int date;

  ChatParticipantAdmin(
      {required this.userId, required this.inviterId, required this.date});

  static ChatParticipantAdmin fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var inviterId = reader.readLong();
    var date = reader.readInt();
    return ChatParticipantAdmin(
        userId: userId, inviterId: inviterId, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2694004571, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.inviterId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatParticipantAdmin{ID: $ID, userId: $userId, inviterId: $inviterId, date: $date}';
  }
}

class ChatParticipantsForbidden extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2271466465;
  static const SUBCLASS_OF_ID = 531142001;
  final classType = "constructor";
  final ID = 2271466465;
  BigInt chatId;
  var selfParticipant;

  ChatParticipantsForbidden(
      {required this.chatId, required this.selfParticipant});

  static ChatParticipantsForbidden fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var chatId = reader.readLong();
    var selfParticipant;
    if ((flags & 1) == 1) {
      selfParticipant = reader.tgReadObject();
    } else {
      selfParticipant = null;
    }
    return ChatParticipantsForbidden(
        chatId: chatId, selfParticipant: selfParticipant);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2271466465, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
      (this.selfParticipant == null || this.selfParticipant == false)
          ? List<int>.empty()
          : [(this.selfParticipant.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatParticipantsForbidden{ID: $ID, chatId: $chatId, selfParticipant: $selfParticipant}';
  }
}

class ChatParticipants extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1018991608;
  static const SUBCLASS_OF_ID = 531142001;
  final classType = "constructor";
  final ID = 1018991608;
  BigInt chatId;
  List<dynamic> participants;
  int version;

  ChatParticipants(
      {required this.chatId,
      required this.participants,
      required this.version});

  static ChatParticipants fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readLong();
    var _vectorparticipants = reader.readInt();
    if (_vectorparticipants != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> participants = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      participants.add(reader.tgReadObject());
    }
    var version = reader.readInt();
    return ChatParticipants(
        chatId: chatId, participants: participants, version: version);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1018991608, 4),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.participants!.length, 4,
          little: true, signed: true),
      this
          .participants!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatParticipants{ID: $ID, chatId: $chatId, participants: $participants, version: $version}';
  }
}

class ChatPhotoEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 935395612;
  static const SUBCLASS_OF_ID = 2889794789;
  final classType = "constructor";
  final ID = 935395612;

  ChatPhotoEmpty();

  static ChatPhotoEmpty fromReader(BinaryReader reader) {
    var len;
    return ChatPhotoEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(935395612, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatPhotoEmpty{ID: $ID, }';
  }
}

class ChatPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 476978193;
  static const SUBCLASS_OF_ID = 2889794789;
  final classType = "constructor";
  final ID = 476978193;
  bool? hasVideo;
  BigInt photoId;
  List<int>? strippedThumb;
  int dcId;

  ChatPhoto(
      {required this.hasVideo,
      required this.photoId,
      required this.strippedThumb,
      required this.dcId});

  static ChatPhoto fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final hasVideo = (flags & 1) == 1;
    var photoId = reader.readLong();
    var strippedThumb;
    if ((flags & 2) == 2) {
      strippedThumb = reader.tgReadBytes();
    } else {
      strippedThumb = null;
    }
    var dcId = reader.readInt();
    return ChatPhoto(
        hasVideo: hasVideo,
        photoId: photoId,
        strippedThumb: strippedThumb,
        dcId: dcId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(476978193, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.photoId, 8, little: true, signed: true),
      (this.strippedThumb == null || this.strippedThumb == false)
          ? List<int>.empty()
          : [serializeBytes(this.strippedThumb)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatPhoto{ID: $ID, hasVideo: $hasVideo, photoId: $photoId, strippedThumb: $strippedThumb, dcId: $dcId}';
  }
}

class MessageEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2426849924;
  static const SUBCLASS_OF_ID = 2030045667;
  final classType = "constructor";
  final ID = 2426849924;
  int id;
  var peerId;

  MessageEmpty({required this.id, required this.peerId});

  static MessageEmpty fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.readInt();
    var peerId;
    if ((flags & 1) == 1) {
      peerId = reader.tgReadObject();
    } else {
      peerId = null;
    }
    return MessageEmpty(id: id, peerId: peerId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2426849924, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      (this.peerId == null || this.peerId == false)
          ? List<int>.empty()
          : [(this.peerId.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEmpty{ID: $ID, id: $id, peerId: $peerId}';
  }
}

class Message extends BaseConstructor {
  static const CONSTRUCTOR_ID = 940666592;
  static const SUBCLASS_OF_ID = 2030045667;
  final classType = "constructor";
  final ID = 940666592;
  bool? out;
  bool? mentioned;
  bool? mediaUnread;
  bool? silent;
  bool? post;
  bool? fromScheduled;
  bool? legacy;
  bool? editHide;
  bool? pinned;
  bool? noforwards;
  int id;
  var fromId;
  var peerId;
  var fwdFrom;
  BigInt? viaBotId;
  var replyTo;
  int date;
  String message;
  var media;
  var replyMarkup;
  List<dynamic>? entities;
  int? views;
  int? forwards;
  var replies;
  int? editDate;
  String? postAuthor;
  BigInt? groupedId;
  var reactions;
  List<dynamic>? restrictionReason;
  int? ttlPeriod;

  Message(
      {required this.out,
      required this.mentioned,
      required this.mediaUnread,
      required this.silent,
      required this.post,
      required this.fromScheduled,
      required this.legacy,
      required this.editHide,
      required this.pinned,
      required this.noforwards,
      required this.id,
      required this.fromId,
      required this.peerId,
      required this.fwdFrom,
      required this.viaBotId,
      required this.replyTo,
      required this.date,
      required this.message,
      required this.media,
      required this.replyMarkup,
      required this.entities,
      required this.views,
      required this.forwards,
      required this.replies,
      required this.editDate,
      required this.postAuthor,
      required this.groupedId,
      required this.reactions,
      required this.restrictionReason,
      required this.ttlPeriod});

  static Message fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final out = (flags & 2) == 2;
    final mentioned = (flags & 16) == 16;
    final mediaUnread = (flags & 32) == 32;
    final silent = (flags & 8192) == 8192;
    final post = (flags & 16384) == 16384;
    final fromScheduled = (flags & 262144) == 262144;
    final legacy = (flags & 524288) == 524288;
    final editHide = (flags & 2097152) == 2097152;
    final pinned = (flags & 16777216) == 16777216;
    final noforwards = (flags & 67108864) == 67108864;
    var id = reader.readInt();
    var fromId;
    if ((flags & 256) == 256) {
      fromId = reader.tgReadObject();
    } else {
      fromId = null;
    }
    var peerId = reader.tgReadObject();
    var fwdFrom;
    if ((flags & 4) == 4) {
      fwdFrom = reader.tgReadObject();
    } else {
      fwdFrom = null;
    }
    var viaBotId;
    if ((flags & 2048) == 2048) {
      viaBotId = reader.readLong();
    } else {
      viaBotId = null;
    }
    var replyTo;
    if ((flags & 8) == 8) {
      replyTo = reader.tgReadObject();
    } else {
      replyTo = null;
    }
    var date = reader.readInt();
    var message = reader.tgReadString();
    var media;
    if ((flags & 512) == 512) {
      media = reader.tgReadObject();
    } else {
      media = null;
    }
    var replyMarkup;
    if ((flags & 64) == 64) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    var entities;
    if ((flags & 128) == 128) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    var views;
    if ((flags & 1024) == 1024) {
      views = reader.readInt();
    } else {
      views = null;
    }
    var forwards;
    if ((flags & 1024) == 1024) {
      forwards = reader.readInt();
    } else {
      forwards = null;
    }
    var replies;
    if ((flags & 8388608) == 8388608) {
      replies = reader.tgReadObject();
    } else {
      replies = null;
    }
    var editDate;
    if ((flags & 32768) == 32768) {
      editDate = reader.readInt();
    } else {
      editDate = null;
    }
    var postAuthor;
    if ((flags & 65536) == 65536) {
      postAuthor = reader.tgReadString();
    } else {
      postAuthor = null;
    }
    var groupedId;
    if ((flags & 131072) == 131072) {
      groupedId = reader.readLong();
    } else {
      groupedId = null;
    }
    var reactions;
    if ((flags & 1048576) == 1048576) {
      reactions = reader.tgReadObject();
    } else {
      reactions = null;
    }
    var restrictionReason;
    if ((flags & 4194304) == 4194304) {
      var _vectorrestrictionReason = reader.readInt();
      if (_vectorrestrictionReason != 481674261)
        throw Exception('Wrong vectorId');
      List<dynamic> restrictionReason = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        restrictionReason.add(reader.tgReadObject());
      }
    } else {
      restrictionReason = null;
    }
    var ttlPeriod;
    if ((flags & 33554432) == 33554432) {
      ttlPeriod = reader.readInt();
    } else {
      ttlPeriod = null;
    }
    return Message(
        out: out,
        mentioned: mentioned,
        mediaUnread: mediaUnread,
        silent: silent,
        post: post,
        fromScheduled: fromScheduled,
        legacy: legacy,
        editHide: editHide,
        pinned: pinned,
        noforwards: noforwards,
        id: id,
        fromId: fromId,
        peerId: peerId,
        fwdFrom: fwdFrom,
        viaBotId: viaBotId,
        replyTo: replyTo,
        date: date,
        message: message,
        media: media,
        replyMarkup: replyMarkup,
        entities: entities,
        views: views,
        forwards: forwards,
        replies: replies,
        editDate: editDate,
        postAuthor: postAuthor,
        groupedId: groupedId,
        reactions: reactions,
        restrictionReason: restrictionReason,
        ttlPeriod: ttlPeriod);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(940666592, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      (this.fromId == null || this.fromId == false)
          ? List<int>.empty()
          : [(this.fromId.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.peerId.getBytes() as List<int>),
      (this.fwdFrom == null || this.fwdFrom == false)
          ? List<int>.empty()
          : [(this.fwdFrom.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.viaBotId == null || this.viaBotId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.viaBotId, 8, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.replyTo == null || this.replyTo == false)
          ? List<int>.empty()
          : [(this.replyTo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      serializeBytes(this.message),
      (this.media == null || this.media == false)
          ? List<int>.empty()
          : [(this.media.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.views == null || this.views == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.views, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.forwards == null || this.forwards == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.forwards, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.replies == null || this.replies == false)
          ? List<int>.empty()
          : [(this.replies.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.editDate == null || this.editDate == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.editDate, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.postAuthor == null || this.postAuthor == false)
          ? List<int>.empty()
          : [serializeBytes(this.postAuthor)]
              .expand((element) => element)
              .toList(),
      (this.groupedId == null || this.groupedId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.groupedId, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.reactions == null || this.reactions == false)
          ? List<int>.empty()
          : [(this.reactions.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.restrictionReason == null || this.restrictionReason == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.restrictionReason!.length, 4,
                  little: true, signed: true),
              this
                  .restrictionReason!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.ttlPeriod == null || this.ttlPeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlPeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Message{ID: $ID, out: $out, mentioned: $mentioned, mediaUnread: $mediaUnread, silent: $silent, post: $post, fromScheduled: $fromScheduled, legacy: $legacy, editHide: $editHide, pinned: $pinned, noforwards: $noforwards, id: $id, fromId: $fromId, peerId: $peerId, fwdFrom: $fwdFrom, viaBotId: $viaBotId, replyTo: $replyTo, date: $date, message: $message, media: $media, replyMarkup: $replyMarkup, entities: $entities, views: $views, forwards: $forwards, replies: $replies, editDate: $editDate, postAuthor: $postAuthor, groupedId: $groupedId, reactions: $reactions, restrictionReason: $restrictionReason, ttlPeriod: $ttlPeriod}';
  }
}

class MessageService extends BaseConstructor {
  static const CONSTRUCTOR_ID = 721967202;
  static const SUBCLASS_OF_ID = 2030045667;
  final classType = "constructor";
  final ID = 721967202;
  bool? out;
  bool? mentioned;
  bool? mediaUnread;
  bool? silent;
  bool? post;
  bool? legacy;
  int id;
  var fromId;
  var peerId;
  var replyTo;
  int date;
  var action;
  int? ttlPeriod;

  MessageService(
      {required this.out,
      required this.mentioned,
      required this.mediaUnread,
      required this.silent,
      required this.post,
      required this.legacy,
      required this.id,
      required this.fromId,
      required this.peerId,
      required this.replyTo,
      required this.date,
      required this.action,
      required this.ttlPeriod});

  static MessageService fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final out = (flags & 2) == 2;
    final mentioned = (flags & 16) == 16;
    final mediaUnread = (flags & 32) == 32;
    final silent = (flags & 8192) == 8192;
    final post = (flags & 16384) == 16384;
    final legacy = (flags & 524288) == 524288;
    var id = reader.readInt();
    var fromId;
    if ((flags & 256) == 256) {
      fromId = reader.tgReadObject();
    } else {
      fromId = null;
    }
    var peerId = reader.tgReadObject();
    var replyTo;
    if ((flags & 8) == 8) {
      replyTo = reader.tgReadObject();
    } else {
      replyTo = null;
    }
    var date = reader.readInt();
    var action = reader.tgReadObject();
    var ttlPeriod;
    if ((flags & 33554432) == 33554432) {
      ttlPeriod = reader.readInt();
    } else {
      ttlPeriod = null;
    }
    return MessageService(
        out: out,
        mentioned: mentioned,
        mediaUnread: mediaUnread,
        silent: silent,
        post: post,
        legacy: legacy,
        id: id,
        fromId: fromId,
        peerId: peerId,
        replyTo: replyTo,
        date: date,
        action: action,
        ttlPeriod: ttlPeriod);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(721967202, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      (this.fromId == null || this.fromId == false)
          ? List<int>.empty()
          : [(this.fromId.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.peerId.getBytes() as List<int>),
      (this.replyTo == null || this.replyTo == false)
          ? List<int>.empty()
          : [(this.replyTo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.action.getBytes() as List<int>),
      (this.ttlPeriod == null || this.ttlPeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlPeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageService{ID: $ID, out: $out, mentioned: $mentioned, mediaUnread: $mediaUnread, silent: $silent, post: $post, legacy: $legacy, id: $id, fromId: $fromId, peerId: $peerId, replyTo: $replyTo, date: $date, action: $action, ttlPeriod: $ttlPeriod}';
  }
}

class MessageMediaEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1038967584;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 1038967584;

  MessageMediaEmpty();

  static MessageMediaEmpty fromReader(BinaryReader reader) {
    var len;
    return MessageMediaEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1038967584, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaEmpty{ID: $ID, }';
  }
}

class MessageMediaPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1766936791;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 1766936791;
  var photo;
  int? ttlSeconds;

  MessageMediaPhoto({required this.photo, required this.ttlSeconds});

  static MessageMediaPhoto fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var photo;
    if ((flags & 1) == 1) {
      photo = reader.tgReadObject();
    } else {
      photo = null;
    }
    var ttlSeconds;
    if ((flags & 4) == 4) {
      ttlSeconds = reader.readInt();
    } else {
      ttlSeconds = null;
    }
    return MessageMediaPhoto(photo: photo, ttlSeconds: ttlSeconds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1766936791, 4),
      [0, 0, 0, 0],
      (this.photo == null || this.photo == false)
          ? List<int>.empty()
          : [(this.photo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.ttlSeconds == null || this.ttlSeconds == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlSeconds, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaPhoto{ID: $ID, photo: $photo, ttlSeconds: $ttlSeconds}';
  }
}

class MessageMediaGeo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1457575028;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 1457575028;
  var geo;

  MessageMediaGeo({required this.geo});

  static MessageMediaGeo fromReader(BinaryReader reader) {
    var len;
    var geo = reader.tgReadObject();
    return MessageMediaGeo(geo: geo);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1457575028, 4),
      (this.geo.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaGeo{ID: $ID, geo: $geo}';
  }
}

class MessageMediaContact extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1882335561;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 1882335561;
  String phoneNumber;
  String firstName;
  String lastName;
  String vcard;
  BigInt userId;

  MessageMediaContact(
      {required this.phoneNumber,
      required this.firstName,
      required this.lastName,
      required this.vcard,
      required this.userId});

  static MessageMediaContact fromReader(BinaryReader reader) {
    var len;
    var phoneNumber = reader.tgReadString();
    var firstName = reader.tgReadString();
    var lastName = reader.tgReadString();
    var vcard = reader.tgReadString();
    var userId = reader.readLong();
    return MessageMediaContact(
        phoneNumber: phoneNumber,
        firstName: firstName,
        lastName: lastName,
        vcard: vcard,
        userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1882335561, 4),
      serializeBytes(this.phoneNumber),
      serializeBytes(this.firstName),
      serializeBytes(this.lastName),
      serializeBytes(this.vcard),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaContact{ID: $ID, phoneNumber: $phoneNumber, firstName: $firstName, lastName: $lastName, vcard: $vcard, userId: $userId}';
  }
}

class MessageMediaUnsupported extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2676290718;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 2676290718;

  MessageMediaUnsupported();

  static MessageMediaUnsupported fromReader(BinaryReader reader) {
    var len;
    return MessageMediaUnsupported();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2676290718, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaUnsupported{ID: $ID, }';
  }
}

class MessageMediaDocument extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2628808919;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 2628808919;
  var document;
  int? ttlSeconds;

  MessageMediaDocument({required this.document, required this.ttlSeconds});

  static MessageMediaDocument fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var document;
    if ((flags & 1) == 1) {
      document = reader.tgReadObject();
    } else {
      document = null;
    }
    var ttlSeconds;
    if ((flags & 4) == 4) {
      ttlSeconds = reader.readInt();
    } else {
      ttlSeconds = null;
    }
    return MessageMediaDocument(document: document, ttlSeconds: ttlSeconds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2628808919, 4),
      [0, 0, 0, 0],
      (this.document == null || this.document == false)
          ? List<int>.empty()
          : [(this.document.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.ttlSeconds == null || this.ttlSeconds == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlSeconds, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaDocument{ID: $ID, document: $document, ttlSeconds: $ttlSeconds}';
  }
}

class MessageMediaWebPage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2737690112;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 2737690112;
  var webpage;

  MessageMediaWebPage({required this.webpage});

  static MessageMediaWebPage fromReader(BinaryReader reader) {
    var len;
    var webpage = reader.tgReadObject();
    return MessageMediaWebPage(webpage: webpage);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2737690112, 4),
      (this.webpage.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaWebPage{ID: $ID, webpage: $webpage}';
  }
}

class MessageMediaVenue extends BaseConstructor {
  static const CONSTRUCTOR_ID = 784356159;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 784356159;
  var geo;
  String title;
  String address;
  String provider;
  String venueId;
  String venueType;

  MessageMediaVenue(
      {required this.geo,
      required this.title,
      required this.address,
      required this.provider,
      required this.venueId,
      required this.venueType});

  static MessageMediaVenue fromReader(BinaryReader reader) {
    var len;
    var geo = reader.tgReadObject();
    var title = reader.tgReadString();
    var address = reader.tgReadString();
    var provider = reader.tgReadString();
    var venueId = reader.tgReadString();
    var venueType = reader.tgReadString();
    return MessageMediaVenue(
        geo: geo,
        title: title,
        address: address,
        provider: provider,
        venueId: venueId,
        venueType: venueType);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(784356159, 4),
      (this.geo.getBytes() as List<int>),
      serializeBytes(this.title),
      serializeBytes(this.address),
      serializeBytes(this.provider),
      serializeBytes(this.venueId),
      serializeBytes(this.venueType),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaVenue{ID: $ID, geo: $geo, title: $title, address: $address, provider: $provider, venueId: $venueId, venueType: $venueType}';
  }
}

class MessageMediaGame extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4256272392;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 4256272392;
  var game;

  MessageMediaGame({required this.game});

  static MessageMediaGame fromReader(BinaryReader reader) {
    var len;
    var game = reader.tgReadObject();
    return MessageMediaGame(game: game);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4256272392, 4),
      (this.game.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaGame{ID: $ID, game: $game}';
  }
}

class MessageMediaInvoice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2220168007;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 2220168007;
  bool? shippingAddressRequested;
  bool? test;
  String title;
  String description;
  var photo;
  int? receiptMsgId;
  String currency;
  BigInt totalAmount;
  String startParam;

  MessageMediaInvoice(
      {required this.shippingAddressRequested,
      required this.test,
      required this.title,
      required this.description,
      required this.photo,
      required this.receiptMsgId,
      required this.currency,
      required this.totalAmount,
      required this.startParam});

  static MessageMediaInvoice fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final shippingAddressRequested = (flags & 2) == 2;
    final test = (flags & 8) == 8;
    var title = reader.tgReadString();
    var description = reader.tgReadString();
    var photo;
    if ((flags & 1) == 1) {
      photo = reader.tgReadObject();
    } else {
      photo = null;
    }
    var receiptMsgId;
    if ((flags & 4) == 4) {
      receiptMsgId = reader.readInt();
    } else {
      receiptMsgId = null;
    }
    var currency = reader.tgReadString();
    var totalAmount = reader.readLong();
    var startParam = reader.tgReadString();
    return MessageMediaInvoice(
        shippingAddressRequested: shippingAddressRequested,
        test: test,
        title: title,
        description: description,
        photo: photo,
        receiptMsgId: receiptMsgId,
        currency: currency,
        totalAmount: totalAmount,
        startParam: startParam);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2220168007, 4),
      [0, 0, 0, 0],
      serializeBytes(this.title),
      serializeBytes(this.description),
      (this.photo == null || this.photo == false)
          ? List<int>.empty()
          : [(this.photo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.receiptMsgId == null || this.receiptMsgId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.receiptMsgId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      serializeBytes(this.currency),
      readBufferFromBigInt(this.totalAmount, 8, little: true, signed: true),
      serializeBytes(this.startParam),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaInvoice{ID: $ID, shippingAddressRequested: $shippingAddressRequested, test: $test, title: $title, description: $description, photo: $photo, receiptMsgId: $receiptMsgId, currency: $currency, totalAmount: $totalAmount, startParam: $startParam}';
  }
}

class MessageMediaGeoLive extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3108030054;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 3108030054;
  var geo;
  int? heading;
  int period;
  int? proximityNotificationRadius;

  MessageMediaGeoLive(
      {required this.geo,
      required this.heading,
      required this.period,
      required this.proximityNotificationRadius});

  static MessageMediaGeoLive fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var geo = reader.tgReadObject();
    var heading;
    if ((flags & 1) == 1) {
      heading = reader.readInt();
    } else {
      heading = null;
    }
    var period = reader.readInt();
    var proximityNotificationRadius;
    if ((flags & 2) == 2) {
      proximityNotificationRadius = reader.readInt();
    } else {
      proximityNotificationRadius = null;
    }
    return MessageMediaGeoLive(
        geo: geo,
        heading: heading,
        period: period,
        proximityNotificationRadius: proximityNotificationRadius);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3108030054, 4),
      [0, 0, 0, 0],
      (this.geo.getBytes() as List<int>),
      (this.heading == null || this.heading == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.heading, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.period, 4, little: true, signed: true),
      (this.proximityNotificationRadius == null ||
              this.proximityNotificationRadius == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.proximityNotificationRadius, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaGeoLive{ID: $ID, geo: $geo, heading: $heading, period: $period, proximityNotificationRadius: $proximityNotificationRadius}';
  }
}

class MessageMediaPoll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1272375192;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 1272375192;
  var poll;
  var results;

  MessageMediaPoll({required this.poll, required this.results});

  static MessageMediaPoll fromReader(BinaryReader reader) {
    var len;
    var poll = reader.tgReadObject();
    var results = reader.tgReadObject();
    return MessageMediaPoll(poll: poll, results: results);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1272375192, 4),
      (this.poll.getBytes() as List<int>),
      (this.results.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaPoll{ID: $ID, poll: $poll, results: $results}';
  }
}

class MessageMediaDice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1065280907;
  static const SUBCLASS_OF_ID = 1198308914;
  final classType = "constructor";
  final ID = 1065280907;
  int value;
  String emoticon;

  MessageMediaDice({required this.value, required this.emoticon});

  static MessageMediaDice fromReader(BinaryReader reader) {
    var len;
    var value = reader.readInt();
    var emoticon = reader.tgReadString();
    return MessageMediaDice(value: value, emoticon: emoticon);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1065280907, 4),
      readBufferFromBigInt(this.value, 4, little: true, signed: true),
      serializeBytes(this.emoticon),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageMediaDice{ID: $ID, value: $value, emoticon: $emoticon}';
  }
}

class MessageActionEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3064919984;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 3064919984;

  MessageActionEmpty();

  static MessageActionEmpty fromReader(BinaryReader reader) {
    var len;
    return MessageActionEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3064919984, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionEmpty{ID: $ID, }';
  }
}

class MessageActionChatCreate extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3175599021;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 3175599021;
  String title;
  List<BigInt> users;

  MessageActionChatCreate({required this.title, required this.users});

  static MessageActionChatCreate fromReader(BinaryReader reader) {
    var len;
    var title = reader.tgReadString();
    var _vectorusers = reader.readInt();
    if (_vectorusers != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> users = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      users.add(reader.readLong());
    }
    return MessageActionChatCreate(title: title, users: users);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3175599021, 4),
      serializeBytes(this.title),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.users!.length, 4, little: true, signed: true),
      this
          .users!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChatCreate{ID: $ID, title: $title, users: $users}';
  }
}

class MessageActionChatEditTitle extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3047280218;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 3047280218;
  String title;

  MessageActionChatEditTitle({required this.title});

  static MessageActionChatEditTitle fromReader(BinaryReader reader) {
    var len;
    var title = reader.tgReadString();
    return MessageActionChatEditTitle(title: title);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3047280218, 4),
      serializeBytes(this.title),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChatEditTitle{ID: $ID, title: $title}';
  }
}

class MessageActionChatEditPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2144015272;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2144015272;
  var photo;

  MessageActionChatEditPhoto({required this.photo});

  static MessageActionChatEditPhoto fromReader(BinaryReader reader) {
    var len;
    var photo = reader.tgReadObject();
    return MessageActionChatEditPhoto(photo: photo);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2144015272, 4),
      (this.photo.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChatEditPhoto{ID: $ID, photo: $photo}';
  }
}

class MessageActionChatDeletePhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2514746351;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2514746351;

  MessageActionChatDeletePhoto();

  static MessageActionChatDeletePhoto fromReader(BinaryReader reader) {
    var len;
    return MessageActionChatDeletePhoto();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2514746351, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChatDeletePhoto{ID: $ID, }';
  }
}

class MessageActionChatAddUser extends BaseConstructor {
  static const CONSTRUCTOR_ID = 365886720;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 365886720;
  List<BigInt> users;

  MessageActionChatAddUser({required this.users});

  static MessageActionChatAddUser fromReader(BinaryReader reader) {
    var len;
    var _vectorusers = reader.readInt();
    if (_vectorusers != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> users = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      users.add(reader.readLong());
    }
    return MessageActionChatAddUser(users: users);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(365886720, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.users!.length, 4, little: true, signed: true),
      this
          .users!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChatAddUser{ID: $ID, users: $users}';
  }
}

class MessageActionChatDeleteUser extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2755604684;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2755604684;
  BigInt userId;

  MessageActionChatDeleteUser({required this.userId});

  static MessageActionChatDeleteUser fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    return MessageActionChatDeleteUser(userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2755604684, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChatDeleteUser{ID: $ID, userId: $userId}';
  }
}

class MessageActionChatJoinedByLink extends BaseConstructor {
  static const CONSTRUCTOR_ID = 51520707;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 51520707;
  BigInt inviterId;

  MessageActionChatJoinedByLink({required this.inviterId});

  static MessageActionChatJoinedByLink fromReader(BinaryReader reader) {
    var len;
    var inviterId = reader.readLong();
    return MessageActionChatJoinedByLink(inviterId: inviterId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(51520707, 4),
      readBufferFromBigInt(this.inviterId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChatJoinedByLink{ID: $ID, inviterId: $inviterId}';
  }
}

class MessageActionChannelCreate extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2513611922;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2513611922;
  String title;

  MessageActionChannelCreate({required this.title});

  static MessageActionChannelCreate fromReader(BinaryReader reader) {
    var len;
    var title = reader.tgReadString();
    return MessageActionChannelCreate(title: title);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2513611922, 4),
      serializeBytes(this.title),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChannelCreate{ID: $ID, title: $title}';
  }
}

class MessageActionChatMigrateTo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3775102866;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 3775102866;
  BigInt channelId;

  MessageActionChatMigrateTo({required this.channelId});

  static MessageActionChatMigrateTo fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    return MessageActionChatMigrateTo(channelId: channelId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3775102866, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChatMigrateTo{ID: $ID, channelId: $channelId}';
  }
}

class MessageActionChannelMigrateFrom extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3929622761;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 3929622761;
  String title;
  BigInt chatId;

  MessageActionChannelMigrateFrom({required this.title, required this.chatId});

  static MessageActionChannelMigrateFrom fromReader(BinaryReader reader) {
    var len;
    var title = reader.tgReadString();
    var chatId = reader.readLong();
    return MessageActionChannelMigrateFrom(title: title, chatId: chatId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3929622761, 4),
      serializeBytes(this.title),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChannelMigrateFrom{ID: $ID, title: $title, chatId: $chatId}';
  }
}

class MessageActionPinMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2495428845;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2495428845;

  MessageActionPinMessage();

  static MessageActionPinMessage fromReader(BinaryReader reader) {
    var len;
    return MessageActionPinMessage();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2495428845, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionPinMessage{ID: $ID, }';
  }
}

class MessageActionHistoryClear extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2679813636;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2679813636;

  MessageActionHistoryClear();

  static MessageActionHistoryClear fromReader(BinaryReader reader) {
    var len;
    return MessageActionHistoryClear();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2679813636, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionHistoryClear{ID: $ID, }';
  }
}

class MessageActionGameScore extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2460428406;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2460428406;
  BigInt gameId;
  int score;

  MessageActionGameScore({required this.gameId, required this.score});

  static MessageActionGameScore fromReader(BinaryReader reader) {
    var len;
    var gameId = reader.readLong();
    var score = reader.readInt();
    return MessageActionGameScore(gameId: gameId, score: score);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2460428406, 4),
      readBufferFromBigInt(this.gameId, 8, little: true, signed: true),
      readBufferFromBigInt(this.score, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionGameScore{ID: $ID, gameId: $gameId, score: $score}';
  }
}

class MessageActionPaymentSentMe extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2402399015;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2402399015;
  String currency;
  BigInt totalAmount;
  List<int> payload;
  var info;
  String? shippingOptionId;
  var charge;

  MessageActionPaymentSentMe(
      {required this.currency,
      required this.totalAmount,
      required this.payload,
      required this.info,
      required this.shippingOptionId,
      required this.charge});

  static MessageActionPaymentSentMe fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var currency = reader.tgReadString();
    var totalAmount = reader.readLong();
    var payload = reader.tgReadBytes();
    var info;
    if ((flags & 1) == 1) {
      info = reader.tgReadObject();
    } else {
      info = null;
    }
    var shippingOptionId;
    if ((flags & 2) == 2) {
      shippingOptionId = reader.tgReadString();
    } else {
      shippingOptionId = null;
    }
    var charge = reader.tgReadObject();
    return MessageActionPaymentSentMe(
        currency: currency,
        totalAmount: totalAmount,
        payload: payload,
        info: info,
        shippingOptionId: shippingOptionId,
        charge: charge);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2402399015, 4),
      [0, 0, 0, 0],
      serializeBytes(this.currency),
      readBufferFromBigInt(this.totalAmount, 8, little: true, signed: true),
      serializeBytes(this.payload),
      (this.info == null || this.info == false)
          ? List<int>.empty()
          : [(this.info.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.shippingOptionId == null || this.shippingOptionId == false)
          ? List<int>.empty()
          : [serializeBytes(this.shippingOptionId)]
              .expand((element) => element)
              .toList(),
      (this.charge.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionPaymentSentMe{ID: $ID, currency: $currency, totalAmount: $totalAmount, payload: $payload, info: $info, shippingOptionId: $shippingOptionId, charge: $charge}';
  }
}

class MessageActionPaymentSent extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1080663248;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 1080663248;
  String currency;
  BigInt totalAmount;

  MessageActionPaymentSent({required this.currency, required this.totalAmount});

  static MessageActionPaymentSent fromReader(BinaryReader reader) {
    var len;
    var currency = reader.tgReadString();
    var totalAmount = reader.readLong();
    return MessageActionPaymentSent(
        currency: currency, totalAmount: totalAmount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1080663248, 4),
      serializeBytes(this.currency),
      readBufferFromBigInt(this.totalAmount, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionPaymentSent{ID: $ID, currency: $currency, totalAmount: $totalAmount}';
  }
}

class MessageActionPhoneCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2162236031;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2162236031;
  bool? video;
  BigInt callId;
  var reason;
  int? duration;

  MessageActionPhoneCall(
      {required this.video,
      required this.callId,
      required this.reason,
      required this.duration});

  static MessageActionPhoneCall fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final video = (flags & 4) == 4;
    var callId = reader.readLong();
    var reason;
    if ((flags & 1) == 1) {
      reason = reader.tgReadObject();
    } else {
      reason = null;
    }
    var duration;
    if ((flags & 2) == 2) {
      duration = reader.readInt();
    } else {
      duration = null;
    }
    return MessageActionPhoneCall(
        video: video, callId: callId, reason: reason, duration: duration);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2162236031, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.callId, 8, little: true, signed: true),
      (this.reason == null || this.reason == false)
          ? List<int>.empty()
          : [(this.reason.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.duration == null || this.duration == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.duration, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionPhoneCall{ID: $ID, video: $video, callId: $callId, reason: $reason, duration: $duration}';
  }
}

class MessageActionScreenshotTaken extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1200788123;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 1200788123;

  MessageActionScreenshotTaken();

  static MessageActionScreenshotTaken fromReader(BinaryReader reader) {
    var len;
    return MessageActionScreenshotTaken();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1200788123, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionScreenshotTaken{ID: $ID, }';
  }
}

class MessageActionCustomAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4209418070;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 4209418070;
  String message;

  MessageActionCustomAction({required this.message});

  static MessageActionCustomAction fromReader(BinaryReader reader) {
    var len;
    var message = reader.tgReadString();
    return MessageActionCustomAction(message: message);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4209418070, 4),
      serializeBytes(this.message),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionCustomAction{ID: $ID, message: $message}';
  }
}

class MessageActionBotAllowed extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2884218878;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2884218878;
  String domain;

  MessageActionBotAllowed({required this.domain});

  static MessageActionBotAllowed fromReader(BinaryReader reader) {
    var len;
    var domain = reader.tgReadString();
    return MessageActionBotAllowed(domain: domain);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2884218878, 4),
      serializeBytes(this.domain),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionBotAllowed{ID: $ID, domain: $domain}';
  }
}

class MessageActionSecureValuesSentMe extends BaseConstructor {
  static const CONSTRUCTOR_ID = 455635795;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 455635795;
  List<dynamic> values;
  var credentials;

  MessageActionSecureValuesSentMe(
      {required this.values, required this.credentials});

  static MessageActionSecureValuesSentMe fromReader(BinaryReader reader) {
    var len;
    var _vectorvalues = reader.readInt();
    if (_vectorvalues != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> values = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      values.add(reader.tgReadObject());
    }
    var credentials = reader.tgReadObject();
    return MessageActionSecureValuesSentMe(
        values: values, credentials: credentials);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(455635795, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.values!.length, 4, little: true, signed: true),
      this
          .values!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.credentials.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionSecureValuesSentMe{ID: $ID, values: $values, credentials: $credentials}';
  }
}

class MessageActionSecureValuesSent extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3646710100;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 3646710100;
  List<dynamic> types;

  MessageActionSecureValuesSent({required this.types});

  static MessageActionSecureValuesSent fromReader(BinaryReader reader) {
    var len;
    var _vectortypes = reader.readInt();
    if (_vectortypes != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> types = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      types.add(reader.tgReadObject());
    }
    return MessageActionSecureValuesSent(types: types);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3646710100, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.types!.length, 4, little: true, signed: true),
      this
          .types!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionSecureValuesSent{ID: $ID, types: $types}';
  }
}

class MessageActionContactSignUp extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4092747638;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 4092747638;

  MessageActionContactSignUp();

  static MessageActionContactSignUp fromReader(BinaryReader reader) {
    var len;
    return MessageActionContactSignUp();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4092747638, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionContactSignUp{ID: $ID, }';
  }
}

class MessageActionGeoProximityReached extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2564871831;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2564871831;
  var fromId;
  var toId;
  int distance;

  MessageActionGeoProximityReached(
      {required this.fromId, required this.toId, required this.distance});

  static MessageActionGeoProximityReached fromReader(BinaryReader reader) {
    var len;
    var fromId = reader.tgReadObject();
    var toId = reader.tgReadObject();
    var distance = reader.readInt();
    return MessageActionGeoProximityReached(
        fromId: fromId, toId: toId, distance: distance);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2564871831, 4),
      (this.fromId.getBytes() as List<int>),
      (this.toId.getBytes() as List<int>),
      readBufferFromBigInt(this.distance, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionGeoProximityReached{ID: $ID, fromId: $fromId, toId: $toId, distance: $distance}';
  }
}

class MessageActionGroupCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2047704898;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2047704898;
  var call;
  int? duration;

  MessageActionGroupCall({required this.call, required this.duration});

  static MessageActionGroupCall fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var call = reader.tgReadObject();
    var duration;
    if ((flags & 1) == 1) {
      duration = reader.readInt();
    } else {
      duration = null;
    }
    return MessageActionGroupCall(call: call, duration: duration);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2047704898, 4),
      [0, 0, 0, 0],
      (this.call.getBytes() as List<int>),
      (this.duration == null || this.duration == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.duration, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionGroupCall{ID: $ID, call: $call, duration: $duration}';
  }
}

class MessageActionInviteToGroupCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1345295095;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 1345295095;
  var call;
  List<BigInt> users;

  MessageActionInviteToGroupCall({required this.call, required this.users});

  static MessageActionInviteToGroupCall fromReader(BinaryReader reader) {
    var len;
    var call = reader.tgReadObject();
    var _vectorusers = reader.readInt();
    if (_vectorusers != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> users = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      users.add(reader.readLong());
    }
    return MessageActionInviteToGroupCall(call: call, users: users);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1345295095, 4),
      (this.call.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.users!.length, 4, little: true, signed: true),
      this
          .users!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionInviteToGroupCall{ID: $ID, call: $call, users: $users}';
  }
}

class MessageActionSetMessagesTTL extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2853895165;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2853895165;
  int period;

  MessageActionSetMessagesTTL({required this.period});

  static MessageActionSetMessagesTTL fromReader(BinaryReader reader) {
    var len;
    var period = reader.readInt();
    return MessageActionSetMessagesTTL(period: period);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2853895165, 4),
      readBufferFromBigInt(this.period, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionSetMessagesTTL{ID: $ID, period: $period}';
  }
}

class MessageActionGroupCallScheduled extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3013637729;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 3013637729;
  var call;
  int scheduleDate;

  MessageActionGroupCallScheduled(
      {required this.call, required this.scheduleDate});

  static MessageActionGroupCallScheduled fromReader(BinaryReader reader) {
    var len;
    var call = reader.tgReadObject();
    var scheduleDate = reader.readInt();
    return MessageActionGroupCallScheduled(
        call: call, scheduleDate: scheduleDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3013637729, 4),
      (this.call.getBytes() as List<int>),
      readBufferFromBigInt(this.scheduleDate, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionGroupCallScheduled{ID: $ID, call: $call, scheduleDate: $scheduleDate}';
  }
}

class MessageActionSetChatTheme extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2860016453;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 2860016453;
  String emoticon;

  MessageActionSetChatTheme({required this.emoticon});

  static MessageActionSetChatTheme fromReader(BinaryReader reader) {
    var len;
    var emoticon = reader.tgReadString();
    return MessageActionSetChatTheme(emoticon: emoticon);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2860016453, 4),
      serializeBytes(this.emoticon),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionSetChatTheme{ID: $ID, emoticon: $emoticon}';
  }
}

class MessageActionChatJoinedByRequest extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3955008459;
  static const SUBCLASS_OF_ID = 2256589094;
  final classType = "constructor";
  final ID = 3955008459;

  MessageActionChatJoinedByRequest();

  static MessageActionChatJoinedByRequest fromReader(BinaryReader reader) {
    var len;
    return MessageActionChatJoinedByRequest();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3955008459, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageActionChatJoinedByRequest{ID: $ID, }';
  }
}

class Dialog extends BaseConstructor {
  static const CONSTRUCTOR_ID = 739712882;
  static const SUBCLASS_OF_ID = 1120787796;
  final classType = "constructor";
  final ID = 739712882;
  bool? pinned;
  bool? unreadMark;
  var peer;
  int topMessage;
  int readInboxMaxId;
  int readOutboxMaxId;
  int unreadCount;
  int unreadMentionsCount;
  var notifySettings;
  int? pts;
  var draft;
  int? folderId;

  Dialog(
      {required this.pinned,
      required this.unreadMark,
      required this.peer,
      required this.topMessage,
      required this.readInboxMaxId,
      required this.readOutboxMaxId,
      required this.unreadCount,
      required this.unreadMentionsCount,
      required this.notifySettings,
      required this.pts,
      required this.draft,
      required this.folderId});

  static Dialog fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final pinned = (flags & 4) == 4;
    final unreadMark = (flags & 8) == 8;
    var peer = reader.tgReadObject();
    var topMessage = reader.readInt();
    var readInboxMaxId = reader.readInt();
    var readOutboxMaxId = reader.readInt();
    var unreadCount = reader.readInt();
    var unreadMentionsCount = reader.readInt();
    var notifySettings = reader.tgReadObject();
    var pts;
    if ((flags & 1) == 1) {
      pts = reader.readInt();
    } else {
      pts = null;
    }
    var draft;
    if ((flags & 2) == 2) {
      draft = reader.tgReadObject();
    } else {
      draft = null;
    }
    var folderId;
    if ((flags & 16) == 16) {
      folderId = reader.readInt();
    } else {
      folderId = null;
    }
    return Dialog(
        pinned: pinned,
        unreadMark: unreadMark,
        peer: peer,
        topMessage: topMessage,
        readInboxMaxId: readInboxMaxId,
        readOutboxMaxId: readOutboxMaxId,
        unreadCount: unreadCount,
        unreadMentionsCount: unreadMentionsCount,
        notifySettings: notifySettings,
        pts: pts,
        draft: draft,
        folderId: folderId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(739712882, 4),
      [0, 0, 0, 0],
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.topMessage, 4, little: true, signed: true),
      readBufferFromBigInt(this.readInboxMaxId, 4, little: true, signed: true),
      readBufferFromBigInt(this.readOutboxMaxId, 4, little: true, signed: true),
      readBufferFromBigInt(this.unreadCount, 4, little: true, signed: true),
      readBufferFromBigInt(this.unreadMentionsCount, 4,
          little: true, signed: true),
      (this.notifySettings.getBytes() as List<int>),
      (this.pts == null || this.pts == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.pts, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.draft == null || this.draft == false)
          ? List<int>.empty()
          : [(this.draft.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.folderId == null || this.folderId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.folderId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Dialog{ID: $ID, pinned: $pinned, unreadMark: $unreadMark, peer: $peer, topMessage: $topMessage, readInboxMaxId: $readInboxMaxId, readOutboxMaxId: $readOutboxMaxId, unreadCount: $unreadCount, unreadMentionsCount: $unreadMentionsCount, notifySettings: $notifySettings, pts: $pts, draft: $draft, folderId: $folderId}';
  }
}

class DialogFolder extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1908216652;
  static const SUBCLASS_OF_ID = 1120787796;
  final classType = "constructor";
  final ID = 1908216652;
  bool? pinned;
  var folder;
  var peer;
  int topMessage;
  int unreadMutedPeersCount;
  int unreadUnmutedPeersCount;
  int unreadMutedMessagesCount;
  int unreadUnmutedMessagesCount;

  DialogFolder(
      {required this.pinned,
      required this.folder,
      required this.peer,
      required this.topMessage,
      required this.unreadMutedPeersCount,
      required this.unreadUnmutedPeersCount,
      required this.unreadMutedMessagesCount,
      required this.unreadUnmutedMessagesCount});

  static DialogFolder fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final pinned = (flags & 4) == 4;
    var folder = reader.tgReadObject();
    var peer = reader.tgReadObject();
    var topMessage = reader.readInt();
    var unreadMutedPeersCount = reader.readInt();
    var unreadUnmutedPeersCount = reader.readInt();
    var unreadMutedMessagesCount = reader.readInt();
    var unreadUnmutedMessagesCount = reader.readInt();
    return DialogFolder(
        pinned: pinned,
        folder: folder,
        peer: peer,
        topMessage: topMessage,
        unreadMutedPeersCount: unreadMutedPeersCount,
        unreadUnmutedPeersCount: unreadUnmutedPeersCount,
        unreadMutedMessagesCount: unreadMutedMessagesCount,
        unreadUnmutedMessagesCount: unreadUnmutedMessagesCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1908216652, 4),
      [0, 0, 0, 0],
      (this.folder.getBytes() as List<int>),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.topMessage, 4, little: true, signed: true),
      readBufferFromBigInt(this.unreadMutedPeersCount, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.unreadUnmutedPeersCount, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.unreadMutedMessagesCount, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.unreadUnmutedMessagesCount, 4,
          little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DialogFolder{ID: $ID, pinned: $pinned, folder: $folder, peer: $peer, topMessage: $topMessage, unreadMutedPeersCount: $unreadMutedPeersCount, unreadUnmutedPeersCount: $unreadUnmutedPeersCount, unreadMutedMessagesCount: $unreadMutedMessagesCount, unreadUnmutedMessagesCount: $unreadUnmutedMessagesCount}';
  }
}

class PhotoEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 590459437;
  static const SUBCLASS_OF_ID = 3581324060;
  final classType = "constructor";
  final ID = 590459437;
  BigInt id;

  PhotoEmpty({required this.id});

  static PhotoEmpty fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    return PhotoEmpty(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(590459437, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhotoEmpty{ID: $ID, id: $id}';
  }
}

class Photo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4212750949;
  static const SUBCLASS_OF_ID = 3581324060;
  final classType = "constructor";
  final ID = 4212750949;
  bool? hasStickers;
  BigInt id;
  BigInt accessHash;
  List<int> fileReference;
  int date;
  List<dynamic> sizes;
  List<dynamic>? videoSizes;
  int dcId;

  Photo(
      {required this.hasStickers,
      required this.id,
      required this.accessHash,
      required this.fileReference,
      required this.date,
      required this.sizes,
      required this.videoSizes,
      required this.dcId});

  static Photo fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final hasStickers = (flags & 1) == 1;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var fileReference = reader.tgReadBytes();
    var date = reader.readInt();
    var _vectorsizes = reader.readInt();
    if (_vectorsizes != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> sizes = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      sizes.add(reader.tgReadObject());
    }
    var videoSizes;
    if ((flags & 2) == 2) {
      var _vectorvideoSizes = reader.readInt();
      if (_vectorvideoSizes != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> videoSizes = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        videoSizes.add(reader.tgReadObject());
      }
    } else {
      videoSizes = null;
    }
    var dcId = reader.readInt();
    return Photo(
        hasStickers: hasStickers,
        id: id,
        accessHash: accessHash,
        fileReference: fileReference,
        date: date,
        sizes: sizes,
        videoSizes: videoSizes,
        dcId: dcId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4212750949, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.fileReference),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.sizes!.length, 4, little: true, signed: true),
      this
          .sizes!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.videoSizes == null || this.videoSizes == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.videoSizes!.length, 4,
                  little: true, signed: true),
              this
                  .videoSizes!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Photo{ID: $ID, hasStickers: $hasStickers, id: $id, accessHash: $accessHash, fileReference: $fileReference, date: $date, sizes: $sizes, videoSizes: $videoSizes, dcId: $dcId}';
  }
}

class PhotoSizeEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 236446268;
  static const SUBCLASS_OF_ID = 399256025;
  final classType = "constructor";
  final ID = 236446268;
  String type;

  PhotoSizeEmpty({required this.type});

  static PhotoSizeEmpty fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadString();
    return PhotoSizeEmpty(type: type);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(236446268, 4),
      serializeBytes(this.type),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhotoSizeEmpty{ID: $ID, type: $type}';
  }
}

class PhotoSize extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1976012384;
  static const SUBCLASS_OF_ID = 399256025;
  final classType = "constructor";
  final ID = 1976012384;
  String type;
  int w;
  int h;
  int size;

  PhotoSize(
      {required this.type,
      required this.w,
      required this.h,
      required this.size});

  static PhotoSize fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadString();
    var w = reader.readInt();
    var h = reader.readInt();
    var size = reader.readInt();
    return PhotoSize(type: type, w: w, h: h, size: size);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1976012384, 4),
      serializeBytes(this.type),
      readBufferFromBigInt(this.w, 4, little: true, signed: true),
      readBufferFromBigInt(this.h, 4, little: true, signed: true),
      readBufferFromBigInt(this.size, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhotoSize{ID: $ID, type: $type, w: $w, h: $h, size: $size}';
  }
}

class PhotoCachedSize extends BaseConstructor {
  static const CONSTRUCTOR_ID = 35527382;
  static const SUBCLASS_OF_ID = 399256025;
  final classType = "constructor";
  final ID = 35527382;
  String type;
  int w;
  int h;
  List<int> bytes;

  PhotoCachedSize(
      {required this.type,
      required this.w,
      required this.h,
      required this.bytes});

  static PhotoCachedSize fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadString();
    var w = reader.readInt();
    var h = reader.readInt();
    var bytes = reader.tgReadBytes();
    return PhotoCachedSize(type: type, w: w, h: h, bytes: bytes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(35527382, 4),
      serializeBytes(this.type),
      readBufferFromBigInt(this.w, 4, little: true, signed: true),
      readBufferFromBigInt(this.h, 4, little: true, signed: true),
      serializeBytes(this.bytes),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhotoCachedSize{ID: $ID, type: $type, w: $w, h: $h, bytes: $bytes}';
  }
}

class PhotoStrippedSize extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3769678894;
  static const SUBCLASS_OF_ID = 399256025;
  final classType = "constructor";
  final ID = 3769678894;
  String type;
  List<int> bytes;

  PhotoStrippedSize({required this.type, required this.bytes});

  static PhotoStrippedSize fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadString();
    var bytes = reader.tgReadBytes();
    return PhotoStrippedSize(type: type, bytes: bytes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3769678894, 4),
      serializeBytes(this.type),
      serializeBytes(this.bytes),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhotoStrippedSize{ID: $ID, type: $type, bytes: $bytes}';
  }
}

class PhotoSizeProgressive extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4198431637;
  static const SUBCLASS_OF_ID = 399256025;
  final classType = "constructor";
  final ID = 4198431637;
  String type;
  int w;
  int h;
  List<int> sizes;

  PhotoSizeProgressive(
      {required this.type,
      required this.w,
      required this.h,
      required this.sizes});

  static PhotoSizeProgressive fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadString();
    var w = reader.readInt();
    var h = reader.readInt();
    var _vectorsizes = reader.readInt();
    if (_vectorsizes != 481674261) throw Exception('Wrong vectorId');
    List<int> sizes = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      sizes.add(reader.readInt());
    }
    return PhotoSizeProgressive(type: type, w: w, h: h, sizes: sizes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4198431637, 4),
      serializeBytes(this.type),
      readBufferFromBigInt(this.w, 4, little: true, signed: true),
      readBufferFromBigInt(this.h, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.sizes!.length, 4, little: true, signed: true),
      this
          .sizes!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhotoSizeProgressive{ID: $ID, type: $type, w: $w, h: $h, sizes: $sizes}';
  }
}

class PhotoPathSize extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3626061121;
  static const SUBCLASS_OF_ID = 399256025;
  final classType = "constructor";
  final ID = 3626061121;
  String type;
  List<int> bytes;

  PhotoPathSize({required this.type, required this.bytes});

  static PhotoPathSize fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadString();
    var bytes = reader.tgReadBytes();
    return PhotoPathSize(type: type, bytes: bytes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3626061121, 4),
      serializeBytes(this.type),
      serializeBytes(this.bytes),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhotoPathSize{ID: $ID, type: $type, bytes: $bytes}';
  }
}

class GeoPointEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 286776671;
  static const SUBCLASS_OF_ID = 3591430509;
  final classType = "constructor";
  final ID = 286776671;

  GeoPointEmpty();

  static GeoPointEmpty fromReader(BinaryReader reader) {
    var len;
    return GeoPointEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(286776671, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'GeoPointEmpty{ID: $ID, }';
  }
}

class GeoPoint extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2997024355;
  static const SUBCLASS_OF_ID = 3591430509;
  final classType = "constructor";
  final ID = 2997024355;
  double long;
  double lat;
  BigInt accessHash;
  int? accuracyRadius;

  GeoPoint(
      {required this.long,
      required this.lat,
      required this.accessHash,
      required this.accuracyRadius});

  static GeoPoint fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var long = reader.readDouble();
    var lat = reader.readDouble();
    var accessHash = reader.readLong();
    var accuracyRadius;
    if ((flags & 1) == 1) {
      accuracyRadius = reader.readInt();
    } else {
      accuracyRadius = null;
    }
    return GeoPoint(
        long: long,
        lat: lat,
        accessHash: accessHash,
        accuracyRadius: accuracyRadius);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2997024355, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.long, 4),
      readBufferFromBigInt(this.lat, 4),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      (this.accuracyRadius == null || this.accuracyRadius == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.accuracyRadius, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'GeoPoint{ID: $ID, long: $long, lat: $lat, accessHash: $accessHash, accuracyRadius: $accuracyRadius}';
  }
}

class InputNotifyPeer extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3099351820;
  static const SUBCLASS_OF_ID = 1486362133;
  final classType = "constructor";
  final ID = 3099351820;
  var peer;

  InputNotifyPeer({required this.peer});

  static InputNotifyPeer fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    return InputNotifyPeer(peer: peer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3099351820, 4),
      (this.peer.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputNotifyPeer{ID: $ID, peer: $peer}';
  }
}

class InputNotifyUsers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 423314455;
  static const SUBCLASS_OF_ID = 1486362133;
  final classType = "constructor";
  final ID = 423314455;

  InputNotifyUsers();

  static InputNotifyUsers fromReader(BinaryReader reader) {
    var len;
    return InputNotifyUsers();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(423314455, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputNotifyUsers{ID: $ID, }';
  }
}

class InputNotifyChats extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1251338318;
  static const SUBCLASS_OF_ID = 1486362133;
  final classType = "constructor";
  final ID = 1251338318;

  InputNotifyChats();

  static InputNotifyChats fromReader(BinaryReader reader) {
    var len;
    return InputNotifyChats();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1251338318, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputNotifyChats{ID: $ID, }';
  }
}

class InputNotifyBroadcasts extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2983951486;
  static const SUBCLASS_OF_ID = 1486362133;
  final classType = "constructor";
  final ID = 2983951486;

  InputNotifyBroadcasts();

  static InputNotifyBroadcasts fromReader(BinaryReader reader) {
    var len;
    return InputNotifyBroadcasts();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2983951486, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputNotifyBroadcasts{ID: $ID, }';
  }
}

class InputPeerNotifySettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2621249934;
  static const SUBCLASS_OF_ID = 2430274317;
  final classType = "constructor";
  final ID = 2621249934;
  bool? showPreviews;
  bool? silent;
  int? muteUntil;
  String? sound;

  InputPeerNotifySettings(
      {required this.showPreviews,
      required this.silent,
      required this.muteUntil,
      required this.sound});

  static InputPeerNotifySettings fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var showPreviews;
    if ((flags & 1) == 1) {
      showPreviews = reader.tgReadBool();
    } else {
      showPreviews = null;
    }
    var silent;
    if ((flags & 2) == 2) {
      silent = reader.tgReadBool();
    } else {
      silent = null;
    }
    var muteUntil;
    if ((flags & 4) == 4) {
      muteUntil = reader.readInt();
    } else {
      muteUntil = null;
    }
    var sound;
    if ((flags & 8) == 8) {
      sound = reader.tgReadString();
    } else {
      sound = null;
    }
    return InputPeerNotifySettings(
        showPreviews: showPreviews,
        silent: silent,
        muteUntil: muteUntil,
        sound: sound);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2621249934, 4),
      [0, 0, 0, 0],
      (this.showPreviews == null || this.showPreviews == false)
          ? List<int>.empty()
          : [
              [this.showPreviews == true ? 0xb5757299 : 0x379779bc]
            ].expand((element) => element).toList(),
      (this.silent == null || this.silent == false)
          ? List<int>.empty()
          : [
              [this.silent == true ? 0xb5757299 : 0x379779bc]
            ].expand((element) => element).toList(),
      (this.muteUntil == null || this.muteUntil == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.muteUntil, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.sound == null || this.sound == false)
          ? List<int>.empty()
          : [serializeBytes(this.sound)].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPeerNotifySettings{ID: $ID, showPreviews: $showPreviews, silent: $silent, muteUntil: $muteUntil, sound: $sound}';
  }
}

class PeerNotifySettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2941295904;
  static const SUBCLASS_OF_ID = 3475030132;
  final classType = "constructor";
  final ID = 2941295904;
  bool? showPreviews;
  bool? silent;
  int? muteUntil;
  String? sound;

  PeerNotifySettings(
      {required this.showPreviews,
      required this.silent,
      required this.muteUntil,
      required this.sound});

  static PeerNotifySettings fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var showPreviews;
    if ((flags & 1) == 1) {
      showPreviews = reader.tgReadBool();
    } else {
      showPreviews = null;
    }
    var silent;
    if ((flags & 2) == 2) {
      silent = reader.tgReadBool();
    } else {
      silent = null;
    }
    var muteUntil;
    if ((flags & 4) == 4) {
      muteUntil = reader.readInt();
    } else {
      muteUntil = null;
    }
    var sound;
    if ((flags & 8) == 8) {
      sound = reader.tgReadString();
    } else {
      sound = null;
    }
    return PeerNotifySettings(
        showPreviews: showPreviews,
        silent: silent,
        muteUntil: muteUntil,
        sound: sound);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2941295904, 4),
      [0, 0, 0, 0],
      (this.showPreviews == null || this.showPreviews == false)
          ? List<int>.empty()
          : [
              [this.showPreviews == true ? 0xb5757299 : 0x379779bc]
            ].expand((element) => element).toList(),
      (this.silent == null || this.silent == false)
          ? List<int>.empty()
          : [
              [this.silent == true ? 0xb5757299 : 0x379779bc]
            ].expand((element) => element).toList(),
      (this.muteUntil == null || this.muteUntil == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.muteUntil, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.sound == null || this.sound == false)
          ? List<int>.empty()
          : [serializeBytes(this.sound)].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PeerNotifySettings{ID: $ID, showPreviews: $showPreviews, silent: $silent, muteUntil: $muteUntil, sound: $sound}';
  }
}

class PeerSettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2769817869;
  static const SUBCLASS_OF_ID = 4138180484;
  final classType = "constructor";
  final ID = 2769817869;
  bool? reportSpam;
  bool? addContact;
  bool? blockContact;
  bool? shareContact;
  bool? needContactsException;
  bool? reportGeo;
  bool? autoarchived;
  bool? inviteMembers;
  bool? requestChatBroadcast;
  int? geoDistance;
  String? requestChatTitle;
  int? requestChatDate;

  PeerSettings(
      {required this.reportSpam,
      required this.addContact,
      required this.blockContact,
      required this.shareContact,
      required this.needContactsException,
      required this.reportGeo,
      required this.autoarchived,
      required this.inviteMembers,
      required this.requestChatBroadcast,
      required this.geoDistance,
      required this.requestChatTitle,
      required this.requestChatDate});

  static PeerSettings fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final reportSpam = (flags & 1) == 1;
    final addContact = (flags & 2) == 2;
    final blockContact = (flags & 4) == 4;
    final shareContact = (flags & 8) == 8;
    final needContactsException = (flags & 16) == 16;
    final reportGeo = (flags & 32) == 32;
    final autoarchived = (flags & 128) == 128;
    final inviteMembers = (flags & 256) == 256;
    final requestChatBroadcast = (flags & 1024) == 1024;
    var geoDistance;
    if ((flags & 64) == 64) {
      geoDistance = reader.readInt();
    } else {
      geoDistance = null;
    }
    var requestChatTitle;
    if ((flags & 512) == 512) {
      requestChatTitle = reader.tgReadString();
    } else {
      requestChatTitle = null;
    }
    var requestChatDate;
    if ((flags & 512) == 512) {
      requestChatDate = reader.readInt();
    } else {
      requestChatDate = null;
    }
    return PeerSettings(
        reportSpam: reportSpam,
        addContact: addContact,
        blockContact: blockContact,
        shareContact: shareContact,
        needContactsException: needContactsException,
        reportGeo: reportGeo,
        autoarchived: autoarchived,
        inviteMembers: inviteMembers,
        requestChatBroadcast: requestChatBroadcast,
        geoDistance: geoDistance,
        requestChatTitle: requestChatTitle,
        requestChatDate: requestChatDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2769817869, 4),
      [0, 0, 0, 0],
      (this.geoDistance == null || this.geoDistance == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.geoDistance, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.requestChatTitle == null || this.requestChatTitle == false)
          ? List<int>.empty()
          : [serializeBytes(this.requestChatTitle)]
              .expand((element) => element)
              .toList(),
      (this.requestChatDate == null || this.requestChatDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.requestChatDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PeerSettings{ID: $ID, reportSpam: $reportSpam, addContact: $addContact, blockContact: $blockContact, shareContact: $shareContact, needContactsException: $needContactsException, reportGeo: $reportGeo, autoarchived: $autoarchived, inviteMembers: $inviteMembers, requestChatBroadcast: $requestChatBroadcast, geoDistance: $geoDistance, requestChatTitle: $requestChatTitle, requestChatDate: $requestChatDate}';
  }
}

class WallPaper extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2755118061;
  static const SUBCLASS_OF_ID = 2527250827;
  final classType = "constructor";
  final ID = 2755118061;
  BigInt id;
  bool? creator;
  bool? defaultVar;
  bool? pattern;
  bool? dark;
  BigInt accessHash;
  String slug;
  var document;
  var settings;

  WallPaper(
      {required this.id,
      required this.creator,
      required this.defaultVar,
      required this.pattern,
      required this.dark,
      required this.accessHash,
      required this.slug,
      required this.document,
      required this.settings});

  static WallPaper fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    final flags = reader.readInt();
    final creator = (flags & 1) == 1;
    final defaultVar = (flags & 2) == 2;
    final pattern = (flags & 8) == 8;
    final dark = (flags & 16) == 16;
    var accessHash = reader.readLong();
    var slug = reader.tgReadString();
    var document = reader.tgReadObject();
    var settings;
    if ((flags & 4) == 4) {
      settings = reader.tgReadObject();
    } else {
      settings = null;
    }
    return WallPaper(
        id: id,
        creator: creator,
        defaultVar: defaultVar,
        pattern: pattern,
        dark: dark,
        accessHash: accessHash,
        slug: slug,
        document: document,
        settings: settings);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2755118061, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.slug),
      (this.document.getBytes() as List<int>),
      (this.settings == null || this.settings == false)
          ? List<int>.empty()
          : [(this.settings.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WallPaper{ID: $ID, id: $id, creator: $creator, defaultVar: $defaultVar, pattern: $pattern, dark: $dark, accessHash: $accessHash, slug: $slug, document: $document, settings: $settings}';
  }
}

class WallPaperNoFile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3766501654;
  static const SUBCLASS_OF_ID = 2527250827;
  final classType = "constructor";
  final ID = 3766501654;
  BigInt id;
  bool? defaultVar;
  bool? dark;
  var settings;

  WallPaperNoFile(
      {required this.id,
      required this.defaultVar,
      required this.dark,
      required this.settings});

  static WallPaperNoFile fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    final flags = reader.readInt();
    final defaultVar = (flags & 2) == 2;
    final dark = (flags & 16) == 16;
    var settings;
    if ((flags & 4) == 4) {
      settings = reader.tgReadObject();
    } else {
      settings = null;
    }
    return WallPaperNoFile(
        id: id, defaultVar: defaultVar, dark: dark, settings: settings);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3766501654, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      [0, 0, 0, 0],
      (this.settings == null || this.settings == false)
          ? List<int>.empty()
          : [(this.settings.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WallPaperNoFile{ID: $ID, id: $id, defaultVar: $defaultVar, dark: $dark, settings: $settings}';
  }
}

class InputReportReasonSpam extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1490799288;
  static const SUBCLASS_OF_ID = 2214706471;
  final classType = "constructor";
  final ID = 1490799288;

  InputReportReasonSpam();

  static InputReportReasonSpam fromReader(BinaryReader reader) {
    var len;
    return InputReportReasonSpam();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1490799288, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputReportReasonSpam{ID: $ID, }';
  }
}

class InputReportReasonViolence extends BaseConstructor {
  static const CONSTRUCTOR_ID = 505595789;
  static const SUBCLASS_OF_ID = 2214706471;
  final classType = "constructor";
  final ID = 505595789;

  InputReportReasonViolence();

  static InputReportReasonViolence fromReader(BinaryReader reader) {
    var len;
    return InputReportReasonViolence();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(505595789, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputReportReasonViolence{ID: $ID, }';
  }
}

class InputReportReasonPornography extends BaseConstructor {
  static const CONSTRUCTOR_ID = 777640226;
  static const SUBCLASS_OF_ID = 2214706471;
  final classType = "constructor";
  final ID = 777640226;

  InputReportReasonPornography();

  static InputReportReasonPornography fromReader(BinaryReader reader) {
    var len;
    return InputReportReasonPornography();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(777640226, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputReportReasonPornography{ID: $ID, }';
  }
}

class InputReportReasonChildAbuse extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2918469347;
  static const SUBCLASS_OF_ID = 2214706471;
  final classType = "constructor";
  final ID = 2918469347;

  InputReportReasonChildAbuse();

  static InputReportReasonChildAbuse fromReader(BinaryReader reader) {
    var len;
    return InputReportReasonChildAbuse();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2918469347, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputReportReasonChildAbuse{ID: $ID, }';
  }
}

class InputReportReasonOther extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3252986545;
  static const SUBCLASS_OF_ID = 2214706471;
  final classType = "constructor";
  final ID = 3252986545;

  InputReportReasonOther();

  static InputReportReasonOther fromReader(BinaryReader reader) {
    var len;
    return InputReportReasonOther();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3252986545, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputReportReasonOther{ID: $ID, }';
  }
}

class InputReportReasonCopyright extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2609510714;
  static const SUBCLASS_OF_ID = 2214706471;
  final classType = "constructor";
  final ID = 2609510714;

  InputReportReasonCopyright();

  static InputReportReasonCopyright fromReader(BinaryReader reader) {
    var len;
    return InputReportReasonCopyright();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2609510714, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputReportReasonCopyright{ID: $ID, }';
  }
}

class InputReportReasonGeoIrrelevant extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3688169197;
  static const SUBCLASS_OF_ID = 2214706471;
  final classType = "constructor";
  final ID = 3688169197;

  InputReportReasonGeoIrrelevant();

  static InputReportReasonGeoIrrelevant fromReader(BinaryReader reader) {
    var len;
    return InputReportReasonGeoIrrelevant();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3688169197, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputReportReasonGeoIrrelevant{ID: $ID, }';
  }
}

class InputReportReasonFake extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4124956391;
  static const SUBCLASS_OF_ID = 2214706471;
  final classType = "constructor";
  final ID = 4124956391;

  InputReportReasonFake();

  static InputReportReasonFake fromReader(BinaryReader reader) {
    var len;
    return InputReportReasonFake();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4124956391, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputReportReasonFake{ID: $ID, }';
  }
}

class UserFull extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3476448545;
  static const SUBCLASS_OF_ID = 524706233;
  final classType = "constructor";
  final ID = 3476448545;
  bool? blocked;
  bool? phoneCallsAvailable;
  bool? phoneCallsPrivate;
  bool? canPinMessage;
  bool? hasScheduled;
  bool? videoCallsAvailable;
  BigInt id;
  String? about;
  var settings;
  var profilePhoto;
  var notifySettings;
  var botInfo;
  int? pinnedMsgId;
  int commonChatsCount;
  int? folderId;
  int? ttlPeriod;
  String? themeEmoticon;
  String? privateForwardName;

  UserFull(
      {required this.blocked,
      required this.phoneCallsAvailable,
      required this.phoneCallsPrivate,
      required this.canPinMessage,
      required this.hasScheduled,
      required this.videoCallsAvailable,
      required this.id,
      required this.about,
      required this.settings,
      required this.profilePhoto,
      required this.notifySettings,
      required this.botInfo,
      required this.pinnedMsgId,
      required this.commonChatsCount,
      required this.folderId,
      required this.ttlPeriod,
      required this.themeEmoticon,
      required this.privateForwardName});

  static UserFull fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final blocked = (flags & 1) == 1;
    final phoneCallsAvailable = (flags & 16) == 16;
    final phoneCallsPrivate = (flags & 32) == 32;
    final canPinMessage = (flags & 128) == 128;
    final hasScheduled = (flags & 4096) == 4096;
    final videoCallsAvailable = (flags & 8192) == 8192;
    var id = reader.readLong();
    var about;
    if ((flags & 2) == 2) {
      about = reader.tgReadString();
    } else {
      about = null;
    }
    var settings = reader.tgReadObject();
    var profilePhoto;
    if ((flags & 4) == 4) {
      profilePhoto = reader.tgReadObject();
    } else {
      profilePhoto = null;
    }
    var notifySettings = reader.tgReadObject();
    var botInfo;
    if ((flags & 8) == 8) {
      botInfo = reader.tgReadObject();
    } else {
      botInfo = null;
    }
    var pinnedMsgId;
    if ((flags & 64) == 64) {
      pinnedMsgId = reader.readInt();
    } else {
      pinnedMsgId = null;
    }
    var commonChatsCount = reader.readInt();
    var folderId;
    if ((flags & 2048) == 2048) {
      folderId = reader.readInt();
    } else {
      folderId = null;
    }
    var ttlPeriod;
    if ((flags & 16384) == 16384) {
      ttlPeriod = reader.readInt();
    } else {
      ttlPeriod = null;
    }
    var themeEmoticon;
    if ((flags & 32768) == 32768) {
      themeEmoticon = reader.tgReadString();
    } else {
      themeEmoticon = null;
    }
    var privateForwardName;
    if ((flags & 65536) == 65536) {
      privateForwardName = reader.tgReadString();
    } else {
      privateForwardName = null;
    }
    return UserFull(
        blocked: blocked,
        phoneCallsAvailable: phoneCallsAvailable,
        phoneCallsPrivate: phoneCallsPrivate,
        canPinMessage: canPinMessage,
        hasScheduled: hasScheduled,
        videoCallsAvailable: videoCallsAvailable,
        id: id,
        about: about,
        settings: settings,
        profilePhoto: profilePhoto,
        notifySettings: notifySettings,
        botInfo: botInfo,
        pinnedMsgId: pinnedMsgId,
        commonChatsCount: commonChatsCount,
        folderId: folderId,
        ttlPeriod: ttlPeriod,
        themeEmoticon: themeEmoticon,
        privateForwardName: privateForwardName);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3476448545, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      (this.about == null || this.about == false)
          ? List<int>.empty()
          : [serializeBytes(this.about)].expand((element) => element).toList(),
      (this.settings.getBytes() as List<int>),
      (this.profilePhoto == null || this.profilePhoto == false)
          ? List<int>.empty()
          : [(this.profilePhoto.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.notifySettings.getBytes() as List<int>),
      (this.botInfo == null || this.botInfo == false)
          ? List<int>.empty()
          : [(this.botInfo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.pinnedMsgId == null || this.pinnedMsgId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.pinnedMsgId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.commonChatsCount, 4,
          little: true, signed: true),
      (this.folderId == null || this.folderId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.folderId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.ttlPeriod == null || this.ttlPeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlPeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.themeEmoticon == null || this.themeEmoticon == false)
          ? List<int>.empty()
          : [serializeBytes(this.themeEmoticon)]
              .expand((element) => element)
              .toList(),
      (this.privateForwardName == null || this.privateForwardName == false)
          ? List<int>.empty()
          : [serializeBytes(this.privateForwardName)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UserFull{ID: $ID, blocked: $blocked, phoneCallsAvailable: $phoneCallsAvailable, phoneCallsPrivate: $phoneCallsPrivate, canPinMessage: $canPinMessage, hasScheduled: $hasScheduled, videoCallsAvailable: $videoCallsAvailable, id: $id, about: $about, settings: $settings, profilePhoto: $profilePhoto, notifySettings: $notifySettings, botInfo: $botInfo, pinnedMsgId: $pinnedMsgId, commonChatsCount: $commonChatsCount, folderId: $folderId, ttlPeriod: $ttlPeriod, themeEmoticon: $themeEmoticon, privateForwardName: $privateForwardName}';
  }
}

class Contact extends BaseConstructor {
  static const CONSTRUCTOR_ID = 341499403;
  static const SUBCLASS_OF_ID = 2212487076;
  final classType = "constructor";
  final ID = 341499403;
  BigInt userId;
  bool mutual;

  Contact({required this.userId, required this.mutual});

  static Contact fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var mutual = reader.tgReadBool();
    return Contact(userId: userId, mutual: mutual);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(341499403, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      [this.mutual == true ? 0xb5757299 : 0x379779bc],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Contact{ID: $ID, userId: $userId, mutual: $mutual}';
  }
}

class ImportedContact extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3242081360;
  static const SUBCLASS_OF_ID = 3041246170;
  final classType = "constructor";
  final ID = 3242081360;
  BigInt userId;
  BigInt clientId;

  ImportedContact({required this.userId, required this.clientId});

  static ImportedContact fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var clientId = reader.readLong();
    return ImportedContact(userId: userId, clientId: clientId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3242081360, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.clientId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ImportedContact{ID: $ID, userId: $userId, clientId: $clientId}';
  }
}

class ContactStatus extends BaseConstructor {
  static const CONSTRUCTOR_ID = 383348795;
  static const SUBCLASS_OF_ID = 1757468492;
  final classType = "constructor";
  final ID = 383348795;
  BigInt userId;
  var status;

  ContactStatus({required this.userId, required this.status});

  static ContactStatus fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var status = reader.tgReadObject();
    return ContactStatus(userId: userId, status: status);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(383348795, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.status.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ContactStatus{ID: $ID, userId: $userId, status: $status}';
  }
}

class InputMessagesFilterEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1474492012;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 1474492012;

  InputMessagesFilterEmpty();

  static InputMessagesFilterEmpty fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1474492012, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterEmpty{ID: $ID, }';
  }
}

class InputMessagesFilterPhotos extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2517214492;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 2517214492;

  InputMessagesFilterPhotos();

  static InputMessagesFilterPhotos fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterPhotos();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2517214492, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterPhotos{ID: $ID, }';
  }
}

class InputMessagesFilterVideo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2680163941;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 2680163941;

  InputMessagesFilterVideo();

  static InputMessagesFilterVideo fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterVideo();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2680163941, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterVideo{ID: $ID, }';
  }
}

class InputMessagesFilterPhotoVideo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1458172132;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 1458172132;

  InputMessagesFilterPhotoVideo();

  static InputMessagesFilterPhotoVideo fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterPhotoVideo();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1458172132, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterPhotoVideo{ID: $ID, }';
  }
}

class InputMessagesFilterDocument extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2665345416;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 2665345416;

  InputMessagesFilterDocument();

  static InputMessagesFilterDocument fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterDocument();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2665345416, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterDocument{ID: $ID, }';
  }
}

class InputMessagesFilterUrl extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2129714567;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 2129714567;

  InputMessagesFilterUrl();

  static InputMessagesFilterUrl fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterUrl();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2129714567, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterUrl{ID: $ID, }';
  }
}

class InputMessagesFilterGif extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4291323271;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 4291323271;

  InputMessagesFilterGif();

  static InputMessagesFilterGif fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterGif();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4291323271, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterGif{ID: $ID, }';
  }
}

class InputMessagesFilterVoice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1358283666;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 1358283666;

  InputMessagesFilterVoice();

  static InputMessagesFilterVoice fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterVoice();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1358283666, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterVoice{ID: $ID, }';
  }
}

class InputMessagesFilterMusic extends BaseConstructor {
  static const CONSTRUCTOR_ID = 928101534;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 928101534;

  InputMessagesFilterMusic();

  static InputMessagesFilterMusic fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterMusic();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(928101534, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterMusic{ID: $ID, }';
  }
}

class InputMessagesFilterChatPhotos extends BaseConstructor {
  static const CONSTRUCTOR_ID = 975236280;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 975236280;

  InputMessagesFilterChatPhotos();

  static InputMessagesFilterChatPhotos fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterChatPhotos();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(975236280, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterChatPhotos{ID: $ID, }';
  }
}

class InputMessagesFilterPhoneCalls extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2160695144;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 2160695144;
  bool? missed;

  InputMessagesFilterPhoneCalls({required this.missed});

  static InputMessagesFilterPhoneCalls fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final missed = (flags & 1) == 1;
    return InputMessagesFilterPhoneCalls(missed: missed);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2160695144, 4),
      [0, 0, 0, 0],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterPhoneCalls{ID: $ID, missed: $missed}';
  }
}

class InputMessagesFilterRoundVoice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2054952868;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 2054952868;

  InputMessagesFilterRoundVoice();

  static InputMessagesFilterRoundVoice fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterRoundVoice();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2054952868, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterRoundVoice{ID: $ID, }';
  }
}

class InputMessagesFilterRoundVideo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3041516115;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 3041516115;

  InputMessagesFilterRoundVideo();

  static InputMessagesFilterRoundVideo fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterRoundVideo();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3041516115, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterRoundVideo{ID: $ID, }';
  }
}

class InputMessagesFilterMyMentions extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3254314650;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 3254314650;

  InputMessagesFilterMyMentions();

  static InputMessagesFilterMyMentions fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterMyMentions();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3254314650, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterMyMentions{ID: $ID, }';
  }
}

class InputMessagesFilterGeo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3875695885;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 3875695885;

  InputMessagesFilterGeo();

  static InputMessagesFilterGeo fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterGeo();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3875695885, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterGeo{ID: $ID, }';
  }
}

class InputMessagesFilterContacts extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3764575107;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 3764575107;

  InputMessagesFilterContacts();

  static InputMessagesFilterContacts fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterContacts();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3764575107, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterContacts{ID: $ID, }';
  }
}

class InputMessagesFilterPinned extends BaseConstructor {
  static const CONSTRUCTOR_ID = 464520273;
  static const SUBCLASS_OF_ID = 2318855188;
  final classType = "constructor";
  final ID = 464520273;

  InputMessagesFilterPinned();

  static InputMessagesFilterPinned fromReader(BinaryReader reader) {
    var len;
    return InputMessagesFilterPinned();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(464520273, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagesFilterPinned{ID: $ID, }';
  }
}

class UpdateNewMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 522914557;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 522914557;
  var message;
  int pts;
  int ptsCount;

  UpdateNewMessage(
      {required this.message, required this.pts, required this.ptsCount});

  static UpdateNewMessage fromReader(BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateNewMessage(message: message, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(522914557, 4),
      (this.message.getBytes() as List<int>),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateNewMessage{ID: $ID, message: $message, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateMessageID extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1318109142;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1318109142;
  int id;
  BigInt randomId;

  UpdateMessageID({required this.id, required this.randomId});

  static UpdateMessageID fromReader(BinaryReader reader) {
    var len;
    var id = reader.readInt();
    var randomId = reader.readLong();
    return UpdateMessageID(id: id, randomId: randomId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1318109142, 4),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.randomId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateMessageID{ID: $ID, id: $id, randomId: $randomId}';
  }
}

class UpdateDeleteMessages extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2718806245;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2718806245;
  List<int> messages;
  int pts;
  int ptsCount;

  UpdateDeleteMessages(
      {required this.messages, required this.pts, required this.ptsCount});

  static UpdateDeleteMessages fromReader(BinaryReader reader) {
    var len;
    var _vectormessages = reader.readInt();
    if (_vectormessages != 481674261) throw Exception('Wrong vectorId');
    List<int> messages = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      messages.add(reader.readInt());
    }
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateDeleteMessages(
        messages: messages, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2718806245, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.messages!.length, 4,
          little: true, signed: true),
      this
          .messages!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDeleteMessages{ID: $ID, messages: $messages, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateUserTyping extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3223225727;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3223225727;
  BigInt userId;
  var action;

  UpdateUserTyping({required this.userId, required this.action});

  static UpdateUserTyping fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var action = reader.tgReadObject();
    return UpdateUserTyping(userId: userId, action: action);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3223225727, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.action.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateUserTyping{ID: $ID, userId: $userId, action: $action}';
  }
}

class UpdateChatUserTyping extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2202565360;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2202565360;
  BigInt chatId;
  var fromId;
  var action;

  UpdateChatUserTyping(
      {required this.chatId, required this.fromId, required this.action});

  static UpdateChatUserTyping fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readLong();
    var fromId = reader.tgReadObject();
    var action = reader.tgReadObject();
    return UpdateChatUserTyping(chatId: chatId, fromId: fromId, action: action);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2202565360, 4),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
      (this.fromId.getBytes() as List<int>),
      (this.action.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChatUserTyping{ID: $ID, chatId: $chatId, fromId: $fromId, action: $action}';
  }
}

class UpdateChatParticipants extends BaseConstructor {
  static const CONSTRUCTOR_ID = 125178264;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 125178264;
  var participants;

  UpdateChatParticipants({required this.participants});

  static UpdateChatParticipants fromReader(BinaryReader reader) {
    var len;
    var participants = reader.tgReadObject();
    return UpdateChatParticipants(participants: participants);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(125178264, 4),
      (this.participants.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChatParticipants{ID: $ID, participants: $participants}';
  }
}

class UpdateUserStatus extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3854432478;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3854432478;
  BigInt userId;
  var status;

  UpdateUserStatus({required this.userId, required this.status});

  static UpdateUserStatus fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var status = reader.tgReadObject();
    return UpdateUserStatus(userId: userId, status: status);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3854432478, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.status.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateUserStatus{ID: $ID, userId: $userId, status: $status}';
  }
}

class UpdateUserName extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3287417568;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3287417568;
  BigInt userId;
  String firstName;
  String lastName;
  String username;

  UpdateUserName(
      {required this.userId,
      required this.firstName,
      required this.lastName,
      required this.username});

  static UpdateUserName fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var firstName = reader.tgReadString();
    var lastName = reader.tgReadString();
    var username = reader.tgReadString();
    return UpdateUserName(
        userId: userId,
        firstName: firstName,
        lastName: lastName,
        username: username);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3287417568, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.firstName),
      serializeBytes(this.lastName),
      serializeBytes(this.username),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateUserName{ID: $ID, userId: $userId, firstName: $firstName, lastName: $lastName, username: $username}';
  }
}

class UpdateUserPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4062676620;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 4062676620;
  BigInt userId;
  int date;
  var photo;
  bool previous;

  UpdateUserPhoto(
      {required this.userId,
      required this.date,
      required this.photo,
      required this.previous});

  static UpdateUserPhoto fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var date = reader.readInt();
    var photo = reader.tgReadObject();
    var previous = reader.tgReadBool();
    return UpdateUserPhoto(
        userId: userId, date: date, photo: photo, previous: previous);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4062676620, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.photo.getBytes() as List<int>),
      [this.previous == true ? 0xb5757299 : 0x379779bc],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateUserPhoto{ID: $ID, userId: $userId, date: $date, photo: $photo, previous: $previous}';
  }
}

class UpdateNewEncryptedMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 314359194;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 314359194;
  var message;
  int qts;

  UpdateNewEncryptedMessage({required this.message, required this.qts});

  static UpdateNewEncryptedMessage fromReader(BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    var qts = reader.readInt();
    return UpdateNewEncryptedMessage(message: message, qts: qts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(314359194, 4),
      (this.message.getBytes() as List<int>),
      readBufferFromBigInt(this.qts, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateNewEncryptedMessage{ID: $ID, message: $message, qts: $qts}';
  }
}

class UpdateEncryptedChatTyping extends BaseConstructor {
  static const CONSTRUCTOR_ID = 386986326;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 386986326;
  int chatId;

  UpdateEncryptedChatTyping({required this.chatId});

  static UpdateEncryptedChatTyping fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readInt();
    return UpdateEncryptedChatTyping(chatId: chatId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(386986326, 4),
      readBufferFromBigInt(this.chatId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateEncryptedChatTyping{ID: $ID, chatId: $chatId}';
  }
}

class UpdateEncryption extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3030575245;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3030575245;
  var chat;
  int date;

  UpdateEncryption({required this.chat, required this.date});

  static UpdateEncryption fromReader(BinaryReader reader) {
    var len;
    var chat = reader.tgReadObject();
    var date = reader.readInt();
    return UpdateEncryption(chat: chat, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3030575245, 4),
      (this.chat.getBytes() as List<int>),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateEncryption{ID: $ID, chat: $chat, date: $date}';
  }
}

class UpdateEncryptedMessagesRead extends BaseConstructor {
  static const CONSTRUCTOR_ID = 956179895;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 956179895;
  int chatId;
  int maxDate;
  int date;

  UpdateEncryptedMessagesRead(
      {required this.chatId, required this.maxDate, required this.date});

  static UpdateEncryptedMessagesRead fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readInt();
    var maxDate = reader.readInt();
    var date = reader.readInt();
    return UpdateEncryptedMessagesRead(
        chatId: chatId, maxDate: maxDate, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(956179895, 4),
      readBufferFromBigInt(this.chatId, 4, little: true, signed: true),
      readBufferFromBigInt(this.maxDate, 4, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateEncryptedMessagesRead{ID: $ID, chatId: $chatId, maxDate: $maxDate, date: $date}';
  }
}

class UpdateChatParticipantAdd extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1037718609;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1037718609;
  BigInt chatId;
  BigInt userId;
  BigInt inviterId;
  int date;
  int version;

  UpdateChatParticipantAdd(
      {required this.chatId,
      required this.userId,
      required this.inviterId,
      required this.date,
      required this.version});

  static UpdateChatParticipantAdd fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readLong();
    var userId = reader.readLong();
    var inviterId = reader.readLong();
    var date = reader.readInt();
    var version = reader.readInt();
    return UpdateChatParticipantAdd(
        chatId: chatId,
        userId: userId,
        inviterId: inviterId,
        date: date,
        version: version);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1037718609, 4),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.inviterId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChatParticipantAdd{ID: $ID, chatId: $chatId, userId: $userId, inviterId: $inviterId, date: $date, version: $version}';
  }
}

class UpdateChatParticipantDelete extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3811523959;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3811523959;
  BigInt chatId;
  BigInt userId;
  int version;

  UpdateChatParticipantDelete(
      {required this.chatId, required this.userId, required this.version});

  static UpdateChatParticipantDelete fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readLong();
    var userId = reader.readLong();
    var version = reader.readInt();
    return UpdateChatParticipantDelete(
        chatId: chatId, userId: userId, version: version);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3811523959, 4),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChatParticipantDelete{ID: $ID, chatId: $chatId, userId: $userId, version: $version}';
  }
}

class UpdateDcOptions extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2388564083;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2388564083;
  List<dynamic> dcOptions;

  UpdateDcOptions({required this.dcOptions});

  static UpdateDcOptions fromReader(BinaryReader reader) {
    var len;
    var _vectordcOptions = reader.readInt();
    if (_vectordcOptions != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> dcOptions = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      dcOptions.add(reader.tgReadObject());
    }
    return UpdateDcOptions(dcOptions: dcOptions);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2388564083, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.dcOptions!.length, 4,
          little: true, signed: true),
      this
          .dcOptions!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDcOptions{ID: $ID, dcOptions: $dcOptions}';
  }
}

class UpdateNotifySettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3200411887;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3200411887;
  var peer;
  var notifySettings;

  UpdateNotifySettings({required this.peer, required this.notifySettings});

  static UpdateNotifySettings fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var notifySettings = reader.tgReadObject();
    return UpdateNotifySettings(peer: peer, notifySettings: notifySettings);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3200411887, 4),
      (this.peer.getBytes() as List<int>),
      (this.notifySettings.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateNotifySettings{ID: $ID, peer: $peer, notifySettings: $notifySettings}';
  }
}

class UpdateServiceNotification extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3957614617;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3957614617;
  bool? popup;
  int? inboxDate;
  String type;
  String message;
  var media;
  List<dynamic> entities;

  UpdateServiceNotification(
      {required this.popup,
      required this.inboxDate,
      required this.type,
      required this.message,
      required this.media,
      required this.entities});

  static UpdateServiceNotification fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final popup = (flags & 1) == 1;
    var inboxDate;
    if ((flags & 2) == 2) {
      inboxDate = reader.readInt();
    } else {
      inboxDate = null;
    }
    var type = reader.tgReadString();
    var message = reader.tgReadString();
    var media = reader.tgReadObject();
    var _vectorentities = reader.readInt();
    if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> entities = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      entities.add(reader.tgReadObject());
    }
    return UpdateServiceNotification(
        popup: popup,
        inboxDate: inboxDate,
        type: type,
        message: message,
        media: media,
        entities: entities);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3957614617, 4),
      [0, 0, 0, 0],
      (this.inboxDate == null || this.inboxDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.inboxDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      serializeBytes(this.type),
      serializeBytes(this.message),
      (this.media.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.entities!.length, 4,
          little: true, signed: true),
      this
          .entities!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateServiceNotification{ID: $ID, popup: $popup, inboxDate: $inboxDate, type: $type, message: $message, media: $media, entities: $entities}';
  }
}

class UpdatePrivacy extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3996854058;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3996854058;
  var key;
  List<dynamic> rules;

  UpdatePrivacy({required this.key, required this.rules});

  static UpdatePrivacy fromReader(BinaryReader reader) {
    var len;
    var key = reader.tgReadObject();
    var _vectorrules = reader.readInt();
    if (_vectorrules != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> rules = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      rules.add(reader.tgReadObject());
    }
    return UpdatePrivacy(key: key, rules: rules);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3996854058, 4),
      (this.key.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.rules!.length, 4, little: true, signed: true),
      this
          .rules!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePrivacy{ID: $ID, key: $key, rules: $rules}';
  }
}

class UpdateUserPhone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 88680979;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 88680979;
  BigInt userId;
  String phone;

  UpdateUserPhone({required this.userId, required this.phone});

  static UpdateUserPhone fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var phone = reader.tgReadString();
    return UpdateUserPhone(userId: userId, phone: phone);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(88680979, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.phone),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateUserPhone{ID: $ID, userId: $userId, phone: $phone}';
  }
}

class UpdateReadHistoryInbox extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2627162079;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2627162079;
  int? folderId;
  var peer;
  int maxId;
  int stillUnreadCount;
  int pts;
  int ptsCount;

  UpdateReadHistoryInbox(
      {required this.folderId,
      required this.peer,
      required this.maxId,
      required this.stillUnreadCount,
      required this.pts,
      required this.ptsCount});

  static UpdateReadHistoryInbox fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var folderId;
    if ((flags & 1) == 1) {
      folderId = reader.readInt();
    } else {
      folderId = null;
    }
    var peer = reader.tgReadObject();
    var maxId = reader.readInt();
    var stillUnreadCount = reader.readInt();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateReadHistoryInbox(
        folderId: folderId,
        peer: peer,
        maxId: maxId,
        stillUnreadCount: stillUnreadCount,
        pts: pts,
        ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2627162079, 4),
      [0, 0, 0, 0],
      (this.folderId == null || this.folderId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.folderId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.maxId, 4, little: true, signed: true),
      readBufferFromBigInt(this.stillUnreadCount, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateReadHistoryInbox{ID: $ID, folderId: $folderId, peer: $peer, maxId: $maxId, stillUnreadCount: $stillUnreadCount, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateReadHistoryOutbox extends BaseConstructor {
  static const CONSTRUCTOR_ID = 791617983;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 791617983;
  var peer;
  int maxId;
  int pts;
  int ptsCount;

  UpdateReadHistoryOutbox(
      {required this.peer,
      required this.maxId,
      required this.pts,
      required this.ptsCount});

  static UpdateReadHistoryOutbox fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var maxId = reader.readInt();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateReadHistoryOutbox(
        peer: peer, maxId: maxId, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(791617983, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.maxId, 4, little: true, signed: true),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateReadHistoryOutbox{ID: $ID, peer: $peer, maxId: $maxId, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateWebPage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2139689491;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2139689491;
  var webpage;
  int pts;
  int ptsCount;

  UpdateWebPage(
      {required this.webpage, required this.pts, required this.ptsCount});

  static UpdateWebPage fromReader(BinaryReader reader) {
    var len;
    var webpage = reader.tgReadObject();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateWebPage(webpage: webpage, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2139689491, 4),
      (this.webpage.getBytes() as List<int>),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateWebPage{ID: $ID, webpage: $webpage, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateReadMessagesContents extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1757493555;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1757493555;
  List<int> messages;
  int pts;
  int ptsCount;

  UpdateReadMessagesContents(
      {required this.messages, required this.pts, required this.ptsCount});

  static UpdateReadMessagesContents fromReader(BinaryReader reader) {
    var len;
    var _vectormessages = reader.readInt();
    if (_vectormessages != 481674261) throw Exception('Wrong vectorId');
    List<int> messages = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      messages.add(reader.readInt());
    }
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateReadMessagesContents(
        messages: messages, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1757493555, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.messages!.length, 4,
          little: true, signed: true),
      this
          .messages!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateReadMessagesContents{ID: $ID, messages: $messages, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateChannelTooLong extends BaseConstructor {
  static const CONSTRUCTOR_ID = 277713951;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 277713951;
  BigInt channelId;
  int? pts;

  UpdateChannelTooLong({required this.channelId, required this.pts});

  static UpdateChannelTooLong fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var channelId = reader.readLong();
    var pts;
    if ((flags & 1) == 1) {
      pts = reader.readInt();
    } else {
      pts = null;
    }
    return UpdateChannelTooLong(channelId: channelId, pts: pts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(277713951, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      (this.pts == null || this.pts == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.pts, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChannelTooLong{ID: $ID, channelId: $channelId, pts: $pts}';
  }
}

class UpdateChannel extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1666927625;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1666927625;
  BigInt channelId;

  UpdateChannel({required this.channelId});

  static UpdateChannel fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    return UpdateChannel(channelId: channelId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1666927625, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChannel{ID: $ID, channelId: $channelId}';
  }
}

class UpdateNewChannelMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1656358105;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1656358105;
  var message;
  int pts;
  int ptsCount;

  UpdateNewChannelMessage(
      {required this.message, required this.pts, required this.ptsCount});

  static UpdateNewChannelMessage fromReader(BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateNewChannelMessage(
        message: message, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1656358105, 4),
      (this.message.getBytes() as List<int>),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateNewChannelMessage{ID: $ID, message: $message, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateReadChannelInbox extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2452516368;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2452516368;
  int? folderId;
  BigInt channelId;
  int maxId;
  int stillUnreadCount;
  int pts;

  UpdateReadChannelInbox(
      {required this.folderId,
      required this.channelId,
      required this.maxId,
      required this.stillUnreadCount,
      required this.pts});

  static UpdateReadChannelInbox fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var folderId;
    if ((flags & 1) == 1) {
      folderId = reader.readInt();
    } else {
      folderId = null;
    }
    var channelId = reader.readLong();
    var maxId = reader.readInt();
    var stillUnreadCount = reader.readInt();
    var pts = reader.readInt();
    return UpdateReadChannelInbox(
        folderId: folderId,
        channelId: channelId,
        maxId: maxId,
        stillUnreadCount: stillUnreadCount,
        pts: pts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2452516368, 4),
      [0, 0, 0, 0],
      (this.folderId == null || this.folderId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.folderId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.maxId, 4, little: true, signed: true),
      readBufferFromBigInt(this.stillUnreadCount, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateReadChannelInbox{ID: $ID, folderId: $folderId, channelId: $channelId, maxId: $maxId, stillUnreadCount: $stillUnreadCount, pts: $pts}';
  }
}

class UpdateDeleteChannelMessages extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3274529554;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3274529554;
  BigInt channelId;
  List<int> messages;
  int pts;
  int ptsCount;

  UpdateDeleteChannelMessages(
      {required this.channelId,
      required this.messages,
      required this.pts,
      required this.ptsCount});

  static UpdateDeleteChannelMessages fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var _vectormessages = reader.readInt();
    if (_vectormessages != 481674261) throw Exception('Wrong vectorId');
    List<int> messages = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      messages.add(reader.readInt());
    }
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateDeleteChannelMessages(
        channelId: channelId, messages: messages, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3274529554, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.messages!.length, 4,
          little: true, signed: true),
      this
          .messages!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDeleteChannelMessages{ID: $ID, channelId: $channelId, messages: $messages, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateChannelMessageViews extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4062620680;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 4062620680;
  BigInt channelId;
  int id;
  int views;

  UpdateChannelMessageViews(
      {required this.channelId, required this.id, required this.views});

  static UpdateChannelMessageViews fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var id = reader.readInt();
    var views = reader.readInt();
    return UpdateChannelMessageViews(
        channelId: channelId, id: id, views: views);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4062620680, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.views, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChannelMessageViews{ID: $ID, channelId: $channelId, id: $id, views: $views}';
  }
}

class UpdateChatParticipantAdmin extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3620364706;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3620364706;
  BigInt chatId;
  BigInt userId;
  bool isAdmin;
  int version;

  UpdateChatParticipantAdmin(
      {required this.chatId,
      required this.userId,
      required this.isAdmin,
      required this.version});

  static UpdateChatParticipantAdmin fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readLong();
    var userId = reader.readLong();
    var isAdmin = reader.tgReadBool();
    var version = reader.readInt();
    return UpdateChatParticipantAdmin(
        chatId: chatId, userId: userId, isAdmin: isAdmin, version: version);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3620364706, 4),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      [this.isAdmin == true ? 0xb5757299 : 0x379779bc],
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChatParticipantAdmin{ID: $ID, chatId: $chatId, userId: $userId, isAdmin: $isAdmin, version: $version}';
  }
}

class UpdateNewStickerSet extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1753886890;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1753886890;
  var stickerset;

  UpdateNewStickerSet({required this.stickerset});

  static UpdateNewStickerSet fromReader(BinaryReader reader) {
    var len;
    var stickerset = reader.tgReadObject();
    return UpdateNewStickerSet(stickerset: stickerset);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1753886890, 4),
      (this.stickerset.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateNewStickerSet{ID: $ID, stickerset: $stickerset}';
  }
}

class UpdateStickerSetsOrder extends BaseConstructor {
  static const CONSTRUCTOR_ID = 196268545;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 196268545;
  bool? masks;
  List<BigInt> order;

  UpdateStickerSetsOrder({required this.masks, required this.order});

  static UpdateStickerSetsOrder fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final masks = (flags & 1) == 1;
    var _vectororder = reader.readInt();
    if (_vectororder != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> order = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      order.add(reader.readLong());
    }
    return UpdateStickerSetsOrder(masks: masks, order: order);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(196268545, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.order!.length, 4, little: true, signed: true),
      this
          .order!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateStickerSetsOrder{ID: $ID, masks: $masks, order: $order}';
  }
}

class UpdateStickerSets extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1135492588;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1135492588;

  UpdateStickerSets();

  static UpdateStickerSets fromReader(BinaryReader reader) {
    var len;
    return UpdateStickerSets();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1135492588, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateStickerSets{ID: $ID, }';
  }
}

class UpdateSavedGifs extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2473931806;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2473931806;

  UpdateSavedGifs();

  static UpdateSavedGifs fromReader(BinaryReader reader) {
    var len;
    return UpdateSavedGifs();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2473931806, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateSavedGifs{ID: $ID, }';
  }
}

class UpdateBotInlineQuery extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1232025500;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1232025500;
  BigInt queryId;
  BigInt userId;
  String query;
  var geo;
  var peerType;
  String offset;

  UpdateBotInlineQuery(
      {required this.queryId,
      required this.userId,
      required this.query,
      required this.geo,
      required this.peerType,
      required this.offset});

  static UpdateBotInlineQuery fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var queryId = reader.readLong();
    var userId = reader.readLong();
    var query = reader.tgReadString();
    var geo;
    if ((flags & 1) == 1) {
      geo = reader.tgReadObject();
    } else {
      geo = null;
    }
    var peerType;
    if ((flags & 2) == 2) {
      peerType = reader.tgReadObject();
    } else {
      peerType = null;
    }
    var offset = reader.tgReadString();
    return UpdateBotInlineQuery(
        queryId: queryId,
        userId: userId,
        query: query,
        geo: geo,
        peerType: peerType,
        offset: offset);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1232025500, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.queryId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.query),
      (this.geo == null || this.geo == false)
          ? List<int>.empty()
          : [(this.geo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.peerType == null || this.peerType == false)
          ? List<int>.empty()
          : [(this.peerType.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.offset),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotInlineQuery{ID: $ID, queryId: $queryId, userId: $userId, query: $query, geo: $geo, peerType: $peerType, offset: $offset}';
  }
}

class UpdateBotInlineSend extends BaseConstructor {
  static const CONSTRUCTOR_ID = 317794823;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 317794823;
  BigInt userId;
  String query;
  var geo;
  String id;
  var msgId;

  UpdateBotInlineSend(
      {required this.userId,
      required this.query,
      required this.geo,
      required this.id,
      required this.msgId});

  static UpdateBotInlineSend fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var userId = reader.readLong();
    var query = reader.tgReadString();
    var geo;
    if ((flags & 1) == 1) {
      geo = reader.tgReadObject();
    } else {
      geo = null;
    }
    var id = reader.tgReadString();
    var msgId;
    if ((flags & 2) == 2) {
      msgId = reader.tgReadObject();
    } else {
      msgId = null;
    }
    return UpdateBotInlineSend(
        userId: userId, query: query, geo: geo, id: id, msgId: msgId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(317794823, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.query),
      (this.geo == null || this.geo == false)
          ? List<int>.empty()
          : [(this.geo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.id),
      (this.msgId == null || this.msgId == false)
          ? List<int>.empty()
          : [(this.msgId.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotInlineSend{ID: $ID, userId: $userId, query: $query, geo: $geo, id: $id, msgId: $msgId}';
  }
}

class UpdateEditChannelMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 457133559;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 457133559;
  var message;
  int pts;
  int ptsCount;

  UpdateEditChannelMessage(
      {required this.message, required this.pts, required this.ptsCount});

  static UpdateEditChannelMessage fromReader(BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateEditChannelMessage(
        message: message, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(457133559, 4),
      (this.message.getBytes() as List<int>),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateEditChannelMessage{ID: $ID, message: $message, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateBotCallbackQuery extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3117401229;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3117401229;
  BigInt queryId;
  BigInt userId;
  var peer;
  int msgId;
  BigInt chatInstance;
  List<int>? data;
  String? gameShortName;

  UpdateBotCallbackQuery(
      {required this.queryId,
      required this.userId,
      required this.peer,
      required this.msgId,
      required this.chatInstance,
      required this.data,
      required this.gameShortName});

  static UpdateBotCallbackQuery fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var queryId = reader.readLong();
    var userId = reader.readLong();
    var peer = reader.tgReadObject();
    var msgId = reader.readInt();
    var chatInstance = reader.readLong();
    var data;
    if ((flags & 1) == 1) {
      data = reader.tgReadBytes();
    } else {
      data = null;
    }
    var gameShortName;
    if ((flags & 2) == 2) {
      gameShortName = reader.tgReadString();
    } else {
      gameShortName = null;
    }
    return UpdateBotCallbackQuery(
        queryId: queryId,
        userId: userId,
        peer: peer,
        msgId: msgId,
        chatInstance: chatInstance,
        data: data,
        gameShortName: gameShortName);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3117401229, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.queryId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.chatInstance, 8, little: true, signed: true),
      (this.data == null || this.data == false)
          ? List<int>.empty()
          : [serializeBytes(this.data)].expand((element) => element).toList(),
      (this.gameShortName == null || this.gameShortName == false)
          ? List<int>.empty()
          : [serializeBytes(this.gameShortName)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotCallbackQuery{ID: $ID, queryId: $queryId, userId: $userId, peer: $peer, msgId: $msgId, chatInstance: $chatInstance, data: $data, gameShortName: $gameShortName}';
  }
}

class UpdateEditMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3825430691;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3825430691;
  var message;
  int pts;
  int ptsCount;

  UpdateEditMessage(
      {required this.message, required this.pts, required this.ptsCount});

  static UpdateEditMessage fromReader(BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateEditMessage(message: message, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3825430691, 4),
      (this.message.getBytes() as List<int>),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateEditMessage{ID: $ID, message: $message, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateInlineBotCallbackQuery extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1763610706;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1763610706;
  BigInt queryId;
  BigInt userId;
  var msgId;
  BigInt chatInstance;
  List<int>? data;
  String? gameShortName;

  UpdateInlineBotCallbackQuery(
      {required this.queryId,
      required this.userId,
      required this.msgId,
      required this.chatInstance,
      required this.data,
      required this.gameShortName});

  static UpdateInlineBotCallbackQuery fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var queryId = reader.readLong();
    var userId = reader.readLong();
    var msgId = reader.tgReadObject();
    var chatInstance = reader.readLong();
    var data;
    if ((flags & 1) == 1) {
      data = reader.tgReadBytes();
    } else {
      data = null;
    }
    var gameShortName;
    if ((flags & 2) == 2) {
      gameShortName = reader.tgReadString();
    } else {
      gameShortName = null;
    }
    return UpdateInlineBotCallbackQuery(
        queryId: queryId,
        userId: userId,
        msgId: msgId,
        chatInstance: chatInstance,
        data: data,
        gameShortName: gameShortName);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1763610706, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.queryId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.msgId.getBytes() as List<int>),
      readBufferFromBigInt(this.chatInstance, 8, little: true, signed: true),
      (this.data == null || this.data == false)
          ? List<int>.empty()
          : [serializeBytes(this.data)].expand((element) => element).toList(),
      (this.gameShortName == null || this.gameShortName == false)
          ? List<int>.empty()
          : [serializeBytes(this.gameShortName)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateInlineBotCallbackQuery{ID: $ID, queryId: $queryId, userId: $userId, msgId: $msgId, chatInstance: $chatInstance, data: $data, gameShortName: $gameShortName}';
  }
}

class UpdateReadChannelOutbox extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3076495785;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3076495785;
  BigInt channelId;
  int maxId;

  UpdateReadChannelOutbox({required this.channelId, required this.maxId});

  static UpdateReadChannelOutbox fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var maxId = reader.readInt();
    return UpdateReadChannelOutbox(channelId: channelId, maxId: maxId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3076495785, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.maxId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateReadChannelOutbox{ID: $ID, channelId: $channelId, maxId: $maxId}';
  }
}

class UpdateDraftMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3995842921;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3995842921;
  var peer;
  var draft;

  UpdateDraftMessage({required this.peer, required this.draft});

  static UpdateDraftMessage fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var draft = reader.tgReadObject();
    return UpdateDraftMessage(peer: peer, draft: draft);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3995842921, 4),
      (this.peer.getBytes() as List<int>),
      (this.draft.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDraftMessage{ID: $ID, peer: $peer, draft: $draft}';
  }
}

class UpdateReadFeaturedStickers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1461528386;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1461528386;

  UpdateReadFeaturedStickers();

  static UpdateReadFeaturedStickers fromReader(BinaryReader reader) {
    var len;
    return UpdateReadFeaturedStickers();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1461528386, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateReadFeaturedStickers{ID: $ID, }';
  }
}

class UpdateRecentStickers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2588027936;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2588027936;

  UpdateRecentStickers();

  static UpdateRecentStickers fromReader(BinaryReader reader) {
    var len;
    return UpdateRecentStickers();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2588027936, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateRecentStickers{ID: $ID, }';
  }
}

class UpdateConfig extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2720652550;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2720652550;

  UpdateConfig();

  static UpdateConfig fromReader(BinaryReader reader) {
    var len;
    return UpdateConfig();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2720652550, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateConfig{ID: $ID, }';
  }
}

class UpdatePtsChanged extends BaseConstructor {
  static const CONSTRUCTOR_ID = 861169551;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 861169551;

  UpdatePtsChanged();

  static UpdatePtsChanged fromReader(BinaryReader reader) {
    var len;
    return UpdatePtsChanged();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(861169551, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePtsChanged{ID: $ID, }';
  }
}

class UpdateChannelWebPage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 791390623;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 791390623;
  BigInt channelId;
  var webpage;
  int pts;
  int ptsCount;

  UpdateChannelWebPage(
      {required this.channelId,
      required this.webpage,
      required this.pts,
      required this.ptsCount});

  static UpdateChannelWebPage fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var webpage = reader.tgReadObject();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateChannelWebPage(
        channelId: channelId, webpage: webpage, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(791390623, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      (this.webpage.getBytes() as List<int>),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChannelWebPage{ID: $ID, channelId: $channelId, webpage: $webpage, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateDialogPinned extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1852826908;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1852826908;
  bool? pinned;
  int? folderId;
  var peer;

  UpdateDialogPinned(
      {required this.pinned, required this.folderId, required this.peer});

  static UpdateDialogPinned fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final pinned = (flags & 1) == 1;
    var folderId;
    if ((flags & 2) == 2) {
      folderId = reader.readInt();
    } else {
      folderId = null;
    }
    var peer = reader.tgReadObject();
    return UpdateDialogPinned(pinned: pinned, folderId: folderId, peer: peer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1852826908, 4),
      [0, 0, 0, 0],
      (this.folderId == null || this.folderId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.folderId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.peer.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDialogPinned{ID: $ID, pinned: $pinned, folderId: $folderId, peer: $peer}';
  }
}

class UpdatePinnedDialogs extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4195302562;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 4195302562;
  int? folderId;
  List<dynamic>? order;

  UpdatePinnedDialogs({required this.folderId, required this.order});

  static UpdatePinnedDialogs fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var folderId;
    if ((flags & 2) == 2) {
      folderId = reader.readInt();
    } else {
      folderId = null;
    }
    var order;
    if ((flags & 1) == 1) {
      var _vectororder = reader.readInt();
      if (_vectororder != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> order = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        order.add(reader.tgReadObject());
      }
    } else {
      order = null;
    }
    return UpdatePinnedDialogs(folderId: folderId, order: order);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4195302562, 4),
      [0, 0, 0, 0],
      (this.folderId == null || this.folderId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.folderId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.order == null || this.order == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.order!.length, 4,
                  little: true, signed: true),
              this
                  .order!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePinnedDialogs{ID: $ID, folderId: $folderId, order: $order}';
  }
}

class UpdateBotWebhookJSON extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2199371971;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2199371971;
  var data;

  UpdateBotWebhookJSON({required this.data});

  static UpdateBotWebhookJSON fromReader(BinaryReader reader) {
    var len;
    var data = reader.tgReadObject();
    return UpdateBotWebhookJSON(data: data);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2199371971, 4),
      (this.data.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotWebhookJSON{ID: $ID, data: $data}';
  }
}

class UpdateBotWebhookJSONQuery extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2610053286;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2610053286;
  BigInt queryId;
  var data;
  int timeout;

  UpdateBotWebhookJSONQuery(
      {required this.queryId, required this.data, required this.timeout});

  static UpdateBotWebhookJSONQuery fromReader(BinaryReader reader) {
    var len;
    var queryId = reader.readLong();
    var data = reader.tgReadObject();
    var timeout = reader.readInt();
    return UpdateBotWebhookJSONQuery(
        queryId: queryId, data: data, timeout: timeout);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2610053286, 4),
      readBufferFromBigInt(this.queryId, 8, little: true, signed: true),
      (this.data.getBytes() as List<int>),
      readBufferFromBigInt(this.timeout, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotWebhookJSONQuery{ID: $ID, queryId: $queryId, data: $data, timeout: $timeout}';
  }
}

class UpdateBotShippingQuery extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3048144253;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3048144253;
  BigInt queryId;
  BigInt userId;
  List<int> payload;
  var shippingAddress;

  UpdateBotShippingQuery(
      {required this.queryId,
      required this.userId,
      required this.payload,
      required this.shippingAddress});

  static UpdateBotShippingQuery fromReader(BinaryReader reader) {
    var len;
    var queryId = reader.readLong();
    var userId = reader.readLong();
    var payload = reader.tgReadBytes();
    var shippingAddress = reader.tgReadObject();
    return UpdateBotShippingQuery(
        queryId: queryId,
        userId: userId,
        payload: payload,
        shippingAddress: shippingAddress);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3048144253, 4),
      readBufferFromBigInt(this.queryId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.payload),
      (this.shippingAddress.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotShippingQuery{ID: $ID, queryId: $queryId, userId: $userId, payload: $payload, shippingAddress: $shippingAddress}';
  }
}

class UpdateBotPrecheckoutQuery extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2359990934;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2359990934;
  BigInt queryId;
  BigInt userId;
  List<int> payload;
  var info;
  String? shippingOptionId;
  String currency;
  BigInt totalAmount;

  UpdateBotPrecheckoutQuery(
      {required this.queryId,
      required this.userId,
      required this.payload,
      required this.info,
      required this.shippingOptionId,
      required this.currency,
      required this.totalAmount});

  static UpdateBotPrecheckoutQuery fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var queryId = reader.readLong();
    var userId = reader.readLong();
    var payload = reader.tgReadBytes();
    var info;
    if ((flags & 1) == 1) {
      info = reader.tgReadObject();
    } else {
      info = null;
    }
    var shippingOptionId;
    if ((flags & 2) == 2) {
      shippingOptionId = reader.tgReadString();
    } else {
      shippingOptionId = null;
    }
    var currency = reader.tgReadString();
    var totalAmount = reader.readLong();
    return UpdateBotPrecheckoutQuery(
        queryId: queryId,
        userId: userId,
        payload: payload,
        info: info,
        shippingOptionId: shippingOptionId,
        currency: currency,
        totalAmount: totalAmount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2359990934, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.queryId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.payload),
      (this.info == null || this.info == false)
          ? List<int>.empty()
          : [(this.info.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.shippingOptionId == null || this.shippingOptionId == false)
          ? List<int>.empty()
          : [serializeBytes(this.shippingOptionId)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.currency),
      readBufferFromBigInt(this.totalAmount, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotPrecheckoutQuery{ID: $ID, queryId: $queryId, userId: $userId, payload: $payload, info: $info, shippingOptionId: $shippingOptionId, currency: $currency, totalAmount: $totalAmount}';
  }
}

class UpdatePhoneCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2869914398;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2869914398;
  var phoneCall;

  UpdatePhoneCall({required this.phoneCall});

  static UpdatePhoneCall fromReader(BinaryReader reader) {
    var len;
    var phoneCall = reader.tgReadObject();
    return UpdatePhoneCall(phoneCall: phoneCall);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2869914398, 4),
      (this.phoneCall.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePhoneCall{ID: $ID, phoneCall: $phoneCall}';
  }
}

class UpdateLangPackTooLong extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1180041828;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1180041828;
  String langCode;

  UpdateLangPackTooLong({required this.langCode});

  static UpdateLangPackTooLong fromReader(BinaryReader reader) {
    var len;
    var langCode = reader.tgReadString();
    return UpdateLangPackTooLong(langCode: langCode);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1180041828, 4),
      serializeBytes(this.langCode),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateLangPackTooLong{ID: $ID, langCode: $langCode}';
  }
}

class UpdateLangPack extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1442983757;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1442983757;
  var difference;

  UpdateLangPack({required this.difference});

  static UpdateLangPack fromReader(BinaryReader reader) {
    var len;
    var difference = reader.tgReadObject();
    return UpdateLangPack(difference: difference);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1442983757, 4),
      (this.difference.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateLangPack{ID: $ID, difference: $difference}';
  }
}

class UpdateFavedStickers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3843135853;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3843135853;

  UpdateFavedStickers();

  static UpdateFavedStickers fromReader(BinaryReader reader) {
    var len;
    return UpdateFavedStickers();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3843135853, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateFavedStickers{ID: $ID, }';
  }
}

class UpdateChannelReadMessagesContents extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1153291573;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1153291573;
  BigInt channelId;
  List<int> messages;

  UpdateChannelReadMessagesContents(
      {required this.channelId, required this.messages});

  static UpdateChannelReadMessagesContents fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var _vectormessages = reader.readInt();
    if (_vectormessages != 481674261) throw Exception('Wrong vectorId');
    List<int> messages = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      messages.add(reader.readInt());
    }
    return UpdateChannelReadMessagesContents(
        channelId: channelId, messages: messages);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1153291573, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.messages!.length, 4,
          little: true, signed: true),
      this
          .messages!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChannelReadMessagesContents{ID: $ID, channelId: $channelId, messages: $messages}';
  }
}

class UpdateContactsReset extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1887741886;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1887741886;

  UpdateContactsReset();

  static UpdateContactsReset fromReader(BinaryReader reader) {
    var len;
    return UpdateContactsReset();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1887741886, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateContactsReset{ID: $ID, }';
  }
}

class UpdateChannelAvailableMessages extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2990524056;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2990524056;
  BigInt channelId;
  int availableMinId;

  UpdateChannelAvailableMessages(
      {required this.channelId, required this.availableMinId});

  static UpdateChannelAvailableMessages fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var availableMinId = reader.readInt();
    return UpdateChannelAvailableMessages(
        channelId: channelId, availableMinId: availableMinId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2990524056, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.availableMinId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChannelAvailableMessages{ID: $ID, channelId: $channelId, availableMinId: $availableMinId}';
  }
}

class UpdateDialogUnreadMark extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3781450179;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3781450179;
  bool? unread;
  var peer;

  UpdateDialogUnreadMark({required this.unread, required this.peer});

  static UpdateDialogUnreadMark fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final unread = (flags & 1) == 1;
    var peer = reader.tgReadObject();
    return UpdateDialogUnreadMark(unread: unread, peer: peer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3781450179, 4),
      [0, 0, 0, 0],
      (this.peer.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDialogUnreadMark{ID: $ID, unread: $unread, peer: $peer}';
  }
}

class UpdateMessagePoll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2896258427;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2896258427;
  BigInt pollId;
  var poll;
  var results;

  UpdateMessagePoll(
      {required this.pollId, required this.poll, required this.results});

  static UpdateMessagePoll fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var pollId = reader.readLong();
    var poll;
    if ((flags & 1) == 1) {
      poll = reader.tgReadObject();
    } else {
      poll = null;
    }
    var results = reader.tgReadObject();
    return UpdateMessagePoll(pollId: pollId, poll: poll, results: results);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2896258427, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.pollId, 8, little: true, signed: true),
      (this.poll == null || this.poll == false)
          ? List<int>.empty()
          : [(this.poll.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.results.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateMessagePoll{ID: $ID, pollId: $pollId, poll: $poll, results: $results}';
  }
}

class UpdateChatDefaultBannedRights extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1421875280;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1421875280;
  var peer;
  var defaultBannedRights;
  int version;

  UpdateChatDefaultBannedRights(
      {required this.peer,
      required this.defaultBannedRights,
      required this.version});

  static UpdateChatDefaultBannedRights fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var defaultBannedRights = reader.tgReadObject();
    var version = reader.readInt();
    return UpdateChatDefaultBannedRights(
        peer: peer, defaultBannedRights: defaultBannedRights, version: version);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1421875280, 4),
      (this.peer.getBytes() as List<int>),
      (this.defaultBannedRights.getBytes() as List<int>),
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChatDefaultBannedRights{ID: $ID, peer: $peer, defaultBannedRights: $defaultBannedRights, version: $version}';
  }
}

class UpdateFolderPeers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 422972864;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 422972864;
  List<dynamic> folderPeers;
  int pts;
  int ptsCount;

  UpdateFolderPeers(
      {required this.folderPeers, required this.pts, required this.ptsCount});

  static UpdateFolderPeers fromReader(BinaryReader reader) {
    var len;
    var _vectorfolderPeers = reader.readInt();
    if (_vectorfolderPeers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> folderPeers = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      folderPeers.add(reader.tgReadObject());
    }
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdateFolderPeers(
        folderPeers: folderPeers, pts: pts, ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(422972864, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.folderPeers!.length, 4,
          little: true, signed: true),
      this
          .folderPeers!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateFolderPeers{ID: $ID, folderPeers: $folderPeers, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdatePeerSettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1786671974;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1786671974;
  var peer;
  var settings;

  UpdatePeerSettings({required this.peer, required this.settings});

  static UpdatePeerSettings fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var settings = reader.tgReadObject();
    return UpdatePeerSettings(peer: peer, settings: settings);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1786671974, 4),
      (this.peer.getBytes() as List<int>),
      (this.settings.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePeerSettings{ID: $ID, peer: $peer, settings: $settings}';
  }
}

class UpdatePeerLocated extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3031420848;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3031420848;
  List<dynamic> peers;

  UpdatePeerLocated({required this.peers});

  static UpdatePeerLocated fromReader(BinaryReader reader) {
    var len;
    var _vectorpeers = reader.readInt();
    if (_vectorpeers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> peers = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      peers.add(reader.tgReadObject());
    }
    return UpdatePeerLocated(peers: peers);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3031420848, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.peers!.length, 4, little: true, signed: true),
      this
          .peers!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePeerLocated{ID: $ID, peers: $peers}';
  }
}

class UpdateNewScheduledMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 967122427;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 967122427;
  var message;

  UpdateNewScheduledMessage({required this.message});

  static UpdateNewScheduledMessage fromReader(BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    return UpdateNewScheduledMessage(message: message);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(967122427, 4),
      (this.message.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateNewScheduledMessage{ID: $ID, message: $message}';
  }
}

class UpdateDeleteScheduledMessages extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2424728814;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2424728814;
  var peer;
  List<int> messages;

  UpdateDeleteScheduledMessages({required this.peer, required this.messages});

  static UpdateDeleteScheduledMessages fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var _vectormessages = reader.readInt();
    if (_vectormessages != 481674261) throw Exception('Wrong vectorId');
    List<int> messages = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      messages.add(reader.readInt());
    }
    return UpdateDeleteScheduledMessages(peer: peer, messages: messages);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2424728814, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.messages!.length, 4,
          little: true, signed: true),
      this
          .messages!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDeleteScheduledMessages{ID: $ID, peer: $peer, messages: $messages}';
  }
}

class UpdateTheme extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2182544291;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2182544291;
  var theme;

  UpdateTheme({required this.theme});

  static UpdateTheme fromReader(BinaryReader reader) {
    var len;
    var theme = reader.tgReadObject();
    return UpdateTheme(theme: theme);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2182544291, 4),
      (this.theme.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateTheme{ID: $ID, theme: $theme}';
  }
}

class UpdateGeoLiveViewed extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2267003193;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2267003193;
  var peer;
  int msgId;

  UpdateGeoLiveViewed({required this.peer, required this.msgId});

  static UpdateGeoLiveViewed fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var msgId = reader.readInt();
    return UpdateGeoLiveViewed(peer: peer, msgId: msgId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2267003193, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateGeoLiveViewed{ID: $ID, peer: $peer, msgId: $msgId}';
  }
}

class UpdateLoginToken extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1448076945;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1448076945;

  UpdateLoginToken();

  static UpdateLoginToken fromReader(BinaryReader reader) {
    var len;
    return UpdateLoginToken();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1448076945, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateLoginToken{ID: $ID, }';
  }
}

class UpdateMessagePollVote extends BaseConstructor {
  static const CONSTRUCTOR_ID = 274961865;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 274961865;
  BigInt pollId;
  BigInt userId;
  List<List<int>> options;
  int qts;

  UpdateMessagePollVote(
      {required this.pollId,
      required this.userId,
      required this.options,
      required this.qts});

  static UpdateMessagePollVote fromReader(BinaryReader reader) {
    var len;
    var pollId = reader.readLong();
    var userId = reader.readLong();
    var _vectoroptions = reader.readInt();
    if (_vectoroptions != 481674261) throw Exception('Wrong vectorId');
    List<List<int>> options = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      options.add(reader.tgReadBytes());
    }
    var qts = reader.readInt();
    return UpdateMessagePollVote(
        pollId: pollId, userId: userId, options: options, qts: qts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(274961865, 4),
      readBufferFromBigInt(this.pollId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.options!.length, 4, little: true, signed: true),
      this.options!.map((x) => serializeBytes(x)).expand((element) => element),
      readBufferFromBigInt(this.qts, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateMessagePollVote{ID: $ID, pollId: $pollId, userId: $userId, options: $options, qts: $qts}';
  }
}

class UpdateDialogFilter extends BaseConstructor {
  static const CONSTRUCTOR_ID = 654302845;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 654302845;
  int id;
  var filter;

  UpdateDialogFilter({required this.id, required this.filter});

  static UpdateDialogFilter fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.readInt();
    var filter;
    if ((flags & 1) == 1) {
      filter = reader.tgReadObject();
    } else {
      filter = null;
    }
    return UpdateDialogFilter(id: id, filter: filter);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(654302845, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      (this.filter == null || this.filter == false)
          ? List<int>.empty()
          : [(this.filter.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDialogFilter{ID: $ID, id: $id, filter: $filter}';
  }
}

class UpdateDialogFilterOrder extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2782339333;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2782339333;
  List<int> order;

  UpdateDialogFilterOrder({required this.order});

  static UpdateDialogFilterOrder fromReader(BinaryReader reader) {
    var len;
    var _vectororder = reader.readInt();
    if (_vectororder != 481674261) throw Exception('Wrong vectorId');
    List<int> order = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      order.add(reader.readInt());
    }
    return UpdateDialogFilterOrder(order: order);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2782339333, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.order!.length, 4, little: true, signed: true),
      this
          .order!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDialogFilterOrder{ID: $ID, order: $order}';
  }
}

class UpdateDialogFilters extends BaseConstructor {
  static const CONSTRUCTOR_ID = 889491791;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 889491791;

  UpdateDialogFilters();

  static UpdateDialogFilters fromReader(BinaryReader reader) {
    var len;
    return UpdateDialogFilters();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(889491791, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateDialogFilters{ID: $ID, }';
  }
}

class UpdatePhoneCallSignalingData extends BaseConstructor {
  static const CONSTRUCTOR_ID = 643940105;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 643940105;
  BigInt phoneCallId;
  List<int> data;

  UpdatePhoneCallSignalingData({required this.phoneCallId, required this.data});

  static UpdatePhoneCallSignalingData fromReader(BinaryReader reader) {
    var len;
    var phoneCallId = reader.readLong();
    var data = reader.tgReadBytes();
    return UpdatePhoneCallSignalingData(phoneCallId: phoneCallId, data: data);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(643940105, 4),
      readBufferFromBigInt(this.phoneCallId, 8, little: true, signed: true),
      serializeBytes(this.data),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePhoneCallSignalingData{ID: $ID, phoneCallId: $phoneCallId, data: $data}';
  }
}

class UpdateChannelMessageForwards extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3533318132;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3533318132;
  BigInt channelId;
  int id;
  int forwards;

  UpdateChannelMessageForwards(
      {required this.channelId, required this.id, required this.forwards});

  static UpdateChannelMessageForwards fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var id = reader.readInt();
    var forwards = reader.readInt();
    return UpdateChannelMessageForwards(
        channelId: channelId, id: id, forwards: forwards);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3533318132, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.forwards, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChannelMessageForwards{ID: $ID, channelId: $channelId, id: $id, forwards: $forwards}';
  }
}

class UpdateReadChannelDiscussionInbox extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3601962310;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3601962310;
  BigInt channelId;
  int topMsgId;
  int readMaxId;
  BigInt? broadcastId;
  int? broadcastPost;

  UpdateReadChannelDiscussionInbox(
      {required this.channelId,
      required this.topMsgId,
      required this.readMaxId,
      required this.broadcastId,
      required this.broadcastPost});

  static UpdateReadChannelDiscussionInbox fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var channelId = reader.readLong();
    var topMsgId = reader.readInt();
    var readMaxId = reader.readInt();
    var broadcastId;
    if ((flags & 1) == 1) {
      broadcastId = reader.readLong();
    } else {
      broadcastId = null;
    }
    var broadcastPost;
    if ((flags & 1) == 1) {
      broadcastPost = reader.readInt();
    } else {
      broadcastPost = null;
    }
    return UpdateReadChannelDiscussionInbox(
        channelId: channelId,
        topMsgId: topMsgId,
        readMaxId: readMaxId,
        broadcastId: broadcastId,
        broadcastPost: broadcastPost);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3601962310, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.topMsgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.readMaxId, 4, little: true, signed: true),
      (this.broadcastId == null || this.broadcastId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.broadcastId, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.broadcastPost == null || this.broadcastPost == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.broadcastPost, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateReadChannelDiscussionInbox{ID: $ID, channelId: $channelId, topMsgId: $topMsgId, readMaxId: $readMaxId, broadcastId: $broadcastId, broadcastPost: $broadcastPost}';
  }
}

class UpdateReadChannelDiscussionOutbox extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1767677564;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1767677564;
  BigInt channelId;
  int topMsgId;
  int readMaxId;

  UpdateReadChannelDiscussionOutbox(
      {required this.channelId,
      required this.topMsgId,
      required this.readMaxId});

  static UpdateReadChannelDiscussionOutbox fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var topMsgId = reader.readInt();
    var readMaxId = reader.readInt();
    return UpdateReadChannelDiscussionOutbox(
        channelId: channelId, topMsgId: topMsgId, readMaxId: readMaxId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1767677564, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.topMsgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.readMaxId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateReadChannelDiscussionOutbox{ID: $ID, channelId: $channelId, topMsgId: $topMsgId, readMaxId: $readMaxId}';
  }
}

class UpdatePeerBlocked extends BaseConstructor {
  static const CONSTRUCTOR_ID = 610945826;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 610945826;
  var peerId;
  bool blocked;

  UpdatePeerBlocked({required this.peerId, required this.blocked});

  static UpdatePeerBlocked fromReader(BinaryReader reader) {
    var len;
    var peerId = reader.tgReadObject();
    var blocked = reader.tgReadBool();
    return UpdatePeerBlocked(peerId: peerId, blocked: blocked);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(610945826, 4),
      (this.peerId.getBytes() as List<int>),
      [this.blocked == true ? 0xb5757299 : 0x379779bc],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePeerBlocked{ID: $ID, peerId: $peerId, blocked: $blocked}';
  }
}

class UpdateChannelUserTyping extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2357774627;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2357774627;
  BigInt channelId;
  int? topMsgId;
  var fromId;
  var action;

  UpdateChannelUserTyping(
      {required this.channelId,
      required this.topMsgId,
      required this.fromId,
      required this.action});

  static UpdateChannelUserTyping fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var channelId = reader.readLong();
    var topMsgId;
    if ((flags & 1) == 1) {
      topMsgId = reader.readInt();
    } else {
      topMsgId = null;
    }
    var fromId = reader.tgReadObject();
    var action = reader.tgReadObject();
    return UpdateChannelUserTyping(
        channelId: channelId,
        topMsgId: topMsgId,
        fromId: fromId,
        action: action);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2357774627, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      (this.topMsgId == null || this.topMsgId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.topMsgId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.fromId.getBytes() as List<int>),
      (this.action.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChannelUserTyping{ID: $ID, channelId: $channelId, topMsgId: $topMsgId, fromId: $fromId, action: $action}';
  }
}

class UpdatePinnedMessages extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3984976565;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3984976565;
  bool? pinned;
  var peer;
  List<int> messages;
  int pts;
  int ptsCount;

  UpdatePinnedMessages(
      {required this.pinned,
      required this.peer,
      required this.messages,
      required this.pts,
      required this.ptsCount});

  static UpdatePinnedMessages fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final pinned = (flags & 1) == 1;
    var peer = reader.tgReadObject();
    var _vectormessages = reader.readInt();
    if (_vectormessages != 481674261) throw Exception('Wrong vectorId');
    List<int> messages = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      messages.add(reader.readInt());
    }
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdatePinnedMessages(
        pinned: pinned,
        peer: peer,
        messages: messages,
        pts: pts,
        ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3984976565, 4),
      [0, 0, 0, 0],
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.messages!.length, 4,
          little: true, signed: true),
      this
          .messages!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePinnedMessages{ID: $ID, pinned: $pinned, peer: $peer, messages: $messages, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdatePinnedChannelMessages extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1538885128;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1538885128;
  bool? pinned;
  BigInt channelId;
  List<int> messages;
  int pts;
  int ptsCount;

  UpdatePinnedChannelMessages(
      {required this.pinned,
      required this.channelId,
      required this.messages,
      required this.pts,
      required this.ptsCount});

  static UpdatePinnedChannelMessages fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final pinned = (flags & 1) == 1;
    var channelId = reader.readLong();
    var _vectormessages = reader.readInt();
    if (_vectormessages != 481674261) throw Exception('Wrong vectorId');
    List<int> messages = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      messages.add(reader.readInt());
    }
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    return UpdatePinnedChannelMessages(
        pinned: pinned,
        channelId: channelId,
        messages: messages,
        pts: pts,
        ptsCount: ptsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1538885128, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.messages!.length, 4,
          little: true, signed: true),
      this
          .messages!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePinnedChannelMessages{ID: $ID, pinned: $pinned, channelId: $channelId, messages: $messages, pts: $pts, ptsCount: $ptsCount}';
  }
}

class UpdateChat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4170869326;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 4170869326;
  BigInt chatId;

  UpdateChat({required this.chatId});

  static UpdateChat fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readLong();
    return UpdateChat(chatId: chatId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4170869326, 4),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChat{ID: $ID, chatId: $chatId}';
  }
}

class UpdateGroupCallParticipants extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4075543374;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 4075543374;
  var call;
  List<dynamic> participants;
  int version;

  UpdateGroupCallParticipants(
      {required this.call, required this.participants, required this.version});

  static UpdateGroupCallParticipants fromReader(BinaryReader reader) {
    var len;
    var call = reader.tgReadObject();
    var _vectorparticipants = reader.readInt();
    if (_vectorparticipants != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> participants = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      participants.add(reader.tgReadObject());
    }
    var version = reader.readInt();
    return UpdateGroupCallParticipants(
        call: call, participants: participants, version: version);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4075543374, 4),
      (this.call.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.participants!.length, 4,
          little: true, signed: true),
      this
          .participants!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateGroupCallParticipants{ID: $ID, call: $call, participants: $participants, version: $version}';
  }
}

class UpdateGroupCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 347227392;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 347227392;
  BigInt chatId;
  var call;

  UpdateGroupCall({required this.chatId, required this.call});

  static UpdateGroupCall fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readLong();
    var call = reader.tgReadObject();
    return UpdateGroupCall(chatId: chatId, call: call);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(347227392, 4),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
      (this.call.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateGroupCall{ID: $ID, chatId: $chatId, call: $call}';
  }
}

class UpdatePeerHistoryTTL extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3147544997;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3147544997;
  var peer;
  int? ttlPeriod;

  UpdatePeerHistoryTTL({required this.peer, required this.ttlPeriod});

  static UpdatePeerHistoryTTL fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var peer = reader.tgReadObject();
    var ttlPeriod;
    if ((flags & 1) == 1) {
      ttlPeriod = reader.readInt();
    } else {
      ttlPeriod = null;
    }
    return UpdatePeerHistoryTTL(peer: peer, ttlPeriod: ttlPeriod);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3147544997, 4),
      [0, 0, 0, 0],
      (this.peer.getBytes() as List<int>),
      (this.ttlPeriod == null || this.ttlPeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlPeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePeerHistoryTTL{ID: $ID, peer: $peer, ttlPeriod: $ttlPeriod}';
  }
}

class UpdateChatParticipant extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3498534458;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3498534458;
  BigInt chatId;
  int date;
  BigInt actorId;
  BigInt userId;
  var prevParticipant;
  var newParticipant;
  var invite;
  int qts;

  UpdateChatParticipant(
      {required this.chatId,
      required this.date,
      required this.actorId,
      required this.userId,
      required this.prevParticipant,
      required this.newParticipant,
      required this.invite,
      required this.qts});

  static UpdateChatParticipant fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var chatId = reader.readLong();
    var date = reader.readInt();
    var actorId = reader.readLong();
    var userId = reader.readLong();
    var prevParticipant;
    if ((flags & 1) == 1) {
      prevParticipant = reader.tgReadObject();
    } else {
      prevParticipant = null;
    }
    var newParticipant;
    if ((flags & 2) == 2) {
      newParticipant = reader.tgReadObject();
    } else {
      newParticipant = null;
    }
    var invite;
    if ((flags & 4) == 4) {
      invite = reader.tgReadObject();
    } else {
      invite = null;
    }
    var qts = reader.readInt();
    return UpdateChatParticipant(
        chatId: chatId,
        date: date,
        actorId: actorId,
        userId: userId,
        prevParticipant: prevParticipant,
        newParticipant: newParticipant,
        invite: invite,
        qts: qts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3498534458, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.actorId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.prevParticipant == null || this.prevParticipant == false)
          ? List<int>.empty()
          : [(this.prevParticipant.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.newParticipant == null || this.newParticipant == false)
          ? List<int>.empty()
          : [(this.newParticipant.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.invite == null || this.invite == false)
          ? List<int>.empty()
          : [(this.invite.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.qts, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChatParticipant{ID: $ID, chatId: $chatId, date: $date, actorId: $actorId, userId: $userId, prevParticipant: $prevParticipant, newParticipant: $newParticipant, invite: $invite, qts: $qts}';
  }
}

class UpdateChannelParticipant extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2556246715;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 2556246715;
  BigInt channelId;
  int date;
  BigInt actorId;
  BigInt userId;
  var prevParticipant;
  var newParticipant;
  var invite;
  int qts;

  UpdateChannelParticipant(
      {required this.channelId,
      required this.date,
      required this.actorId,
      required this.userId,
      required this.prevParticipant,
      required this.newParticipant,
      required this.invite,
      required this.qts});

  static UpdateChannelParticipant fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var channelId = reader.readLong();
    var date = reader.readInt();
    var actorId = reader.readLong();
    var userId = reader.readLong();
    var prevParticipant;
    if ((flags & 1) == 1) {
      prevParticipant = reader.tgReadObject();
    } else {
      prevParticipant = null;
    }
    var newParticipant;
    if ((flags & 2) == 2) {
      newParticipant = reader.tgReadObject();
    } else {
      newParticipant = null;
    }
    var invite;
    if ((flags & 4) == 4) {
      invite = reader.tgReadObject();
    } else {
      invite = null;
    }
    var qts = reader.readInt();
    return UpdateChannelParticipant(
        channelId: channelId,
        date: date,
        actorId: actorId,
        userId: userId,
        prevParticipant: prevParticipant,
        newParticipant: newParticipant,
        invite: invite,
        qts: qts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2556246715, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.actorId, 8, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.prevParticipant == null || this.prevParticipant == false)
          ? List<int>.empty()
          : [(this.prevParticipant.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.newParticipant == null || this.newParticipant == false)
          ? List<int>.empty()
          : [(this.newParticipant.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.invite == null || this.invite == false)
          ? List<int>.empty()
          : [(this.invite.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.qts, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateChannelParticipant{ID: $ID, channelId: $channelId, date: $date, actorId: $actorId, userId: $userId, prevParticipant: $prevParticipant, newParticipant: $newParticipant, invite: $invite, qts: $qts}';
  }
}

class UpdateBotStopped extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3297184329;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 3297184329;
  BigInt userId;
  int date;
  bool stopped;
  int qts;

  UpdateBotStopped(
      {required this.userId,
      required this.date,
      required this.stopped,
      required this.qts});

  static UpdateBotStopped fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var date = reader.readInt();
    var stopped = reader.tgReadBool();
    var qts = reader.readInt();
    return UpdateBotStopped(
        userId: userId, date: date, stopped: stopped, qts: qts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3297184329, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      [this.stopped == true ? 0xb5757299 : 0x379779bc],
      readBufferFromBigInt(this.qts, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotStopped{ID: $ID, userId: $userId, date: $date, stopped: $stopped, qts: $qts}';
  }
}

class UpdateGroupCallConnection extends BaseConstructor {
  static const CONSTRUCTOR_ID = 192428418;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 192428418;
  bool? presentation;
  var params;

  UpdateGroupCallConnection({required this.presentation, required this.params});

  static UpdateGroupCallConnection fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final presentation = (flags & 1) == 1;
    var params = reader.tgReadObject();
    return UpdateGroupCallConnection(
        presentation: presentation, params: params);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(192428418, 4),
      [0, 0, 0, 0],
      (this.params.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateGroupCallConnection{ID: $ID, presentation: $presentation, params: $params}';
  }
}

class UpdateBotCommands extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1299263278;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1299263278;
  var peer;
  BigInt botId;
  List<dynamic> commands;

  UpdateBotCommands(
      {required this.peer, required this.botId, required this.commands});

  static UpdateBotCommands fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var botId = reader.readLong();
    var _vectorcommands = reader.readInt();
    if (_vectorcommands != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> commands = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      commands.add(reader.tgReadObject());
    }
    return UpdateBotCommands(peer: peer, botId: botId, commands: commands);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1299263278, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.botId, 8, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.commands!.length, 4,
          little: true, signed: true),
      this
          .commands!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotCommands{ID: $ID, peer: $peer, botId: $botId, commands: $commands}';
  }
}

class UpdatePendingJoinRequests extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1885586395;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 1885586395;
  var peer;
  int requestsPending;
  List<BigInt> recentRequesters;

  UpdatePendingJoinRequests(
      {required this.peer,
      required this.requestsPending,
      required this.recentRequesters});

  static UpdatePendingJoinRequests fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var requestsPending = reader.readInt();
    var _vectorrecentRequesters = reader.readInt();
    if (_vectorrecentRequesters != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> recentRequesters = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      recentRequesters.add(reader.readLong());
    }
    return UpdatePendingJoinRequests(
        peer: peer,
        requestsPending: requestsPending,
        recentRequesters: recentRequesters);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1885586395, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.requestsPending, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.recentRequesters!.length, 4,
          little: true, signed: true),
      this
          .recentRequesters!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatePendingJoinRequests{ID: $ID, peer: $peer, requestsPending: $requestsPending, recentRequesters: $recentRequesters}';
  }
}

class UpdateBotChatInviteRequester extends BaseConstructor {
  static const CONSTRUCTOR_ID = 299870598;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 299870598;
  var peer;
  int date;
  BigInt userId;
  String about;
  var invite;
  int qts;

  UpdateBotChatInviteRequester(
      {required this.peer,
      required this.date,
      required this.userId,
      required this.about,
      required this.invite,
      required this.qts});

  static UpdateBotChatInviteRequester fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var date = reader.readInt();
    var userId = reader.readLong();
    var about = reader.tgReadString();
    var invite = reader.tgReadObject();
    var qts = reader.readInt();
    return UpdateBotChatInviteRequester(
        peer: peer,
        date: date,
        userId: userId,
        about: about,
        invite: invite,
        qts: qts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(299870598, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.about),
      (this.invite.getBytes() as List<int>),
      readBufferFromBigInt(this.qts, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateBotChatInviteRequester{ID: $ID, peer: $peer, date: $date, userId: $userId, about: $about, invite: $invite, qts: $qts}';
  }
}

class UpdateMessageReactions extends BaseConstructor {
  static const CONSTRUCTOR_ID = 357013699;
  static const SUBCLASS_OF_ID = 2676568142;
  final classType = "constructor";
  final ID = 357013699;
  var peer;
  int msgId;
  var reactions;

  UpdateMessageReactions(
      {required this.peer, required this.msgId, required this.reactions});

  static UpdateMessageReactions fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var msgId = reader.readInt();
    var reactions = reader.tgReadObject();
    return UpdateMessageReactions(
        peer: peer, msgId: msgId, reactions: reactions);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(357013699, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
      (this.reactions.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateMessageReactions{ID: $ID, peer: $peer, msgId: $msgId, reactions: $reactions}';
  }
}

class UpdatesTooLong extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3809980286;
  static const SUBCLASS_OF_ID = 2331323052;
  final classType = "constructor";
  final ID = 3809980286;

  UpdatesTooLong();

  static UpdatesTooLong fromReader(BinaryReader reader) {
    var len;
    return UpdatesTooLong();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3809980286, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatesTooLong{ID: $ID, }';
  }
}

class UpdateShortMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 826001400;
  static const SUBCLASS_OF_ID = 2331323052;
  final classType = "constructor";
  final ID = 826001400;
  bool? out;
  bool? mentioned;
  bool? mediaUnread;
  bool? silent;
  int id;
  BigInt userId;
  String message;
  int pts;
  int ptsCount;
  int date;
  var fwdFrom;
  BigInt? viaBotId;
  var replyTo;
  List<dynamic>? entities;
  int? ttlPeriod;

  UpdateShortMessage(
      {required this.out,
      required this.mentioned,
      required this.mediaUnread,
      required this.silent,
      required this.id,
      required this.userId,
      required this.message,
      required this.pts,
      required this.ptsCount,
      required this.date,
      required this.fwdFrom,
      required this.viaBotId,
      required this.replyTo,
      required this.entities,
      required this.ttlPeriod});

  static UpdateShortMessage fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final out = (flags & 2) == 2;
    final mentioned = (flags & 16) == 16;
    final mediaUnread = (flags & 32) == 32;
    final silent = (flags & 8192) == 8192;
    var id = reader.readInt();
    var userId = reader.readLong();
    var message = reader.tgReadString();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    var date = reader.readInt();
    var fwdFrom;
    if ((flags & 4) == 4) {
      fwdFrom = reader.tgReadObject();
    } else {
      fwdFrom = null;
    }
    var viaBotId;
    if ((flags & 2048) == 2048) {
      viaBotId = reader.readLong();
    } else {
      viaBotId = null;
    }
    var replyTo;
    if ((flags & 8) == 8) {
      replyTo = reader.tgReadObject();
    } else {
      replyTo = null;
    }
    var entities;
    if ((flags & 128) == 128) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    var ttlPeriod;
    if ((flags & 33554432) == 33554432) {
      ttlPeriod = reader.readInt();
    } else {
      ttlPeriod = null;
    }
    return UpdateShortMessage(
        out: out,
        mentioned: mentioned,
        mediaUnread: mediaUnread,
        silent: silent,
        id: id,
        userId: userId,
        message: message,
        pts: pts,
        ptsCount: ptsCount,
        date: date,
        fwdFrom: fwdFrom,
        viaBotId: viaBotId,
        replyTo: replyTo,
        entities: entities,
        ttlPeriod: ttlPeriod);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(826001400, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.message),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.fwdFrom == null || this.fwdFrom == false)
          ? List<int>.empty()
          : [(this.fwdFrom.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.viaBotId == null || this.viaBotId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.viaBotId, 8, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.replyTo == null || this.replyTo == false)
          ? List<int>.empty()
          : [(this.replyTo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.ttlPeriod == null || this.ttlPeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlPeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateShortMessage{ID: $ID, out: $out, mentioned: $mentioned, mediaUnread: $mediaUnread, silent: $silent, id: $id, userId: $userId, message: $message, pts: $pts, ptsCount: $ptsCount, date: $date, fwdFrom: $fwdFrom, viaBotId: $viaBotId, replyTo: $replyTo, entities: $entities, ttlPeriod: $ttlPeriod}';
  }
}

class UpdateShortChatMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1299050149;
  static const SUBCLASS_OF_ID = 2331323052;
  final classType = "constructor";
  final ID = 1299050149;
  bool? out;
  bool? mentioned;
  bool? mediaUnread;
  bool? silent;
  int id;
  BigInt fromId;
  BigInt chatId;
  String message;
  int pts;
  int ptsCount;
  int date;
  var fwdFrom;
  BigInt? viaBotId;
  var replyTo;
  List<dynamic>? entities;
  int? ttlPeriod;

  UpdateShortChatMessage(
      {required this.out,
      required this.mentioned,
      required this.mediaUnread,
      required this.silent,
      required this.id,
      required this.fromId,
      required this.chatId,
      required this.message,
      required this.pts,
      required this.ptsCount,
      required this.date,
      required this.fwdFrom,
      required this.viaBotId,
      required this.replyTo,
      required this.entities,
      required this.ttlPeriod});

  static UpdateShortChatMessage fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final out = (flags & 2) == 2;
    final mentioned = (flags & 16) == 16;
    final mediaUnread = (flags & 32) == 32;
    final silent = (flags & 8192) == 8192;
    var id = reader.readInt();
    var fromId = reader.readLong();
    var chatId = reader.readLong();
    var message = reader.tgReadString();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    var date = reader.readInt();
    var fwdFrom;
    if ((flags & 4) == 4) {
      fwdFrom = reader.tgReadObject();
    } else {
      fwdFrom = null;
    }
    var viaBotId;
    if ((flags & 2048) == 2048) {
      viaBotId = reader.readLong();
    } else {
      viaBotId = null;
    }
    var replyTo;
    if ((flags & 8) == 8) {
      replyTo = reader.tgReadObject();
    } else {
      replyTo = null;
    }
    var entities;
    if ((flags & 128) == 128) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    var ttlPeriod;
    if ((flags & 33554432) == 33554432) {
      ttlPeriod = reader.readInt();
    } else {
      ttlPeriod = null;
    }
    return UpdateShortChatMessage(
        out: out,
        mentioned: mentioned,
        mediaUnread: mediaUnread,
        silent: silent,
        id: id,
        fromId: fromId,
        chatId: chatId,
        message: message,
        pts: pts,
        ptsCount: ptsCount,
        date: date,
        fwdFrom: fwdFrom,
        viaBotId: viaBotId,
        replyTo: replyTo,
        entities: entities,
        ttlPeriod: ttlPeriod);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1299050149, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.fromId, 8, little: true, signed: true),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
      serializeBytes(this.message),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.fwdFrom == null || this.fwdFrom == false)
          ? List<int>.empty()
          : [(this.fwdFrom.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.viaBotId == null || this.viaBotId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.viaBotId, 8, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.replyTo == null || this.replyTo == false)
          ? List<int>.empty()
          : [(this.replyTo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.ttlPeriod == null || this.ttlPeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlPeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateShortChatMessage{ID: $ID, out: $out, mentioned: $mentioned, mediaUnread: $mediaUnread, silent: $silent, id: $id, fromId: $fromId, chatId: $chatId, message: $message, pts: $pts, ptsCount: $ptsCount, date: $date, fwdFrom: $fwdFrom, viaBotId: $viaBotId, replyTo: $replyTo, entities: $entities, ttlPeriod: $ttlPeriod}';
  }
}

class UpdateShort extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2027216577;
  static const SUBCLASS_OF_ID = 2331323052;
  final classType = "constructor";
  final ID = 2027216577;
  var update;
  int date;

  UpdateShort({required this.update, required this.date});

  static UpdateShort fromReader(BinaryReader reader) {
    var len;
    var update = reader.tgReadObject();
    var date = reader.readInt();
    return UpdateShort(update: update, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2027216577, 4),
      (this.update.getBytes() as List<int>),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateShort{ID: $ID, update: $update, date: $date}';
  }
}

class UpdatesCombined extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1918567619;
  static const SUBCLASS_OF_ID = 2331323052;
  final classType = "constructor";
  final ID = 1918567619;
  List<dynamic> updates;
  List<dynamic> users;
  List<dynamic> chats;
  int date;
  int seqStart;
  int seq;

  UpdatesCombined(
      {required this.updates,
      required this.users,
      required this.chats,
      required this.date,
      required this.seqStart,
      required this.seq});

  static UpdatesCombined fromReader(BinaryReader reader) {
    var len;
    var _vectorupdates = reader.readInt();
    if (_vectorupdates != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> updates = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      updates.add(reader.tgReadObject());
    }
    var _vectorusers = reader.readInt();
    if (_vectorusers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> users = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      users.add(reader.tgReadObject());
    }
    var _vectorchats = reader.readInt();
    if (_vectorchats != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> chats = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      chats.add(reader.tgReadObject());
    }
    var date = reader.readInt();
    var seqStart = reader.readInt();
    var seq = reader.readInt();
    return UpdatesCombined(
        updates: updates,
        users: users,
        chats: chats,
        date: date,
        seqStart: seqStart,
        seq: seq);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1918567619, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.updates!.length, 4, little: true, signed: true),
      this
          .updates!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.users!.length, 4, little: true, signed: true),
      this
          .users!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.chats!.length, 4, little: true, signed: true),
      this
          .chats!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.seqStart, 4, little: true, signed: true),
      readBufferFromBigInt(this.seq, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdatesCombined{ID: $ID, updates: $updates, users: $users, chats: $chats, date: $date, seqStart: $seqStart, seq: $seq}';
  }
}

class Updates extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1957577280;
  static const SUBCLASS_OF_ID = 2331323052;
  final classType = "constructor";
  final ID = 1957577280;
  List<dynamic> updates;
  List<dynamic> users;
  List<dynamic> chats;
  int date;
  int seq;

  Updates(
      {required this.updates,
      required this.users,
      required this.chats,
      required this.date,
      required this.seq});

  static Updates fromReader(BinaryReader reader) {
    var len;
    var _vectorupdates = reader.readInt();
    if (_vectorupdates != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> updates = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      updates.add(reader.tgReadObject());
    }
    var _vectorusers = reader.readInt();
    if (_vectorusers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> users = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      users.add(reader.tgReadObject());
    }
    var _vectorchats = reader.readInt();
    if (_vectorchats != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> chats = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      chats.add(reader.tgReadObject());
    }
    var date = reader.readInt();
    var seq = reader.readInt();
    return Updates(
        updates: updates, users: users, chats: chats, date: date, seq: seq);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1957577280, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.updates!.length, 4, little: true, signed: true),
      this
          .updates!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.users!.length, 4, little: true, signed: true),
      this
          .users!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.chats!.length, 4, little: true, signed: true),
      this
          .chats!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.seq, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Updates{ID: $ID, updates: $updates, users: $users, chats: $chats, date: $date, seq: $seq}';
  }
}

class UpdateShortSentMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2417352961;
  static const SUBCLASS_OF_ID = 2331323052;
  final classType = "constructor";
  final ID = 2417352961;
  bool? out;
  int id;
  int pts;
  int ptsCount;
  int date;
  var media;
  List<dynamic>? entities;
  int? ttlPeriod;

  UpdateShortSentMessage(
      {required this.out,
      required this.id,
      required this.pts,
      required this.ptsCount,
      required this.date,
      required this.media,
      required this.entities,
      required this.ttlPeriod});

  static UpdateShortSentMessage fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final out = (flags & 2) == 2;
    var id = reader.readInt();
    var pts = reader.readInt();
    var ptsCount = reader.readInt();
    var date = reader.readInt();
    var media;
    if ((flags & 512) == 512) {
      media = reader.tgReadObject();
    } else {
      media = null;
    }
    var entities;
    if ((flags & 128) == 128) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    var ttlPeriod;
    if ((flags & 33554432) == 33554432) {
      ttlPeriod = reader.readInt();
    } else {
      ttlPeriod = null;
    }
    return UpdateShortSentMessage(
        out: out,
        id: id,
        pts: pts,
        ptsCount: ptsCount,
        date: date,
        media: media,
        entities: entities,
        ttlPeriod: ttlPeriod);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2417352961, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.pts, 4, little: true, signed: true),
      readBufferFromBigInt(this.ptsCount, 4, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.media == null || this.media == false)
          ? List<int>.empty()
          : [(this.media.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.ttlPeriod == null || this.ttlPeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.ttlPeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UpdateShortSentMessage{ID: $ID, out: $out, id: $id, pts: $pts, ptsCount: $ptsCount, date: $date, media: $media, entities: $entities, ttlPeriod: $ttlPeriod}';
  }
}

class DcOption extends BaseConstructor {
  static const CONSTRUCTOR_ID = 414687501;
  static const SUBCLASS_OF_ID = 2655248675;
  final classType = "constructor";
  final ID = 414687501;
  bool? ipv6;
  bool? mediaOnly;
  bool? tcpoOnly;
  bool? cdn;
  bool? static;
  int id;
  String ipAddress;
  int port;
  List<int>? secret;

  DcOption(
      {required this.ipv6,
      required this.mediaOnly,
      required this.tcpoOnly,
      required this.cdn,
      required this.static,
      required this.id,
      required this.ipAddress,
      required this.port,
      required this.secret});

  static DcOption fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final ipv6 = (flags & 1) == 1;
    final mediaOnly = (flags & 2) == 2;
    final tcpoOnly = (flags & 4) == 4;
    final cdn = (flags & 8) == 8;
    final static = (flags & 16) == 16;
    var id = reader.readInt();
    var ipAddress = reader.tgReadString();
    var port = reader.readInt();
    var secret;
    if ((flags & 1024) == 1024) {
      secret = reader.tgReadBytes();
    } else {
      secret = null;
    }
    return DcOption(
        ipv6: ipv6,
        mediaOnly: mediaOnly,
        tcpoOnly: tcpoOnly,
        cdn: cdn,
        static: static,
        id: id,
        ipAddress: ipAddress,
        port: port,
        secret: secret);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(414687501, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      serializeBytes(this.ipAddress),
      readBufferFromBigInt(this.port, 4, little: true, signed: true),
      (this.secret == null || this.secret == false)
          ? List<int>.empty()
          : [serializeBytes(this.secret)].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DcOption{ID: $ID, ipv6: $ipv6, mediaOnly: $mediaOnly, tcpoOnly: $tcpoOnly, cdn: $cdn, static: $static, id: $id, ipAddress: $ipAddress, port: $port, secret: $secret}';
  }
}

class Config extends BaseConstructor {
  static const CONSTRUCTOR_ID = 856375399;
  static const SUBCLASS_OF_ID = 3542493770;
  final classType = "constructor";
  final ID = 856375399;
  bool? phonecallsEnabled;
  bool? defaultP2pContacts;
  bool? preloadFeaturedStickers;
  bool? ignorePhoneEntities;
  bool? revokePmInbox;
  bool? blockedMode;
  bool? pfsEnabled;
  int date;
  int expires;
  bool testMode;
  int thisDc;
  List<dynamic> dcOptions;
  String dcTxtDomainName;
  int chatSizeMax;
  int megagroupSizeMax;
  int forwardedCountMax;
  int onlineUpdatePeriodMs;
  int offlineBlurTimeoutMs;
  int offlineIdleTimeoutMs;
  int onlineCloudTimeoutMs;
  int notifyCloudDelayMs;
  int notifyDefaultDelayMs;
  int pushChatPeriodMs;
  int pushChatLimit;
  int savedGifsLimit;
  int editTimeLimit;
  int revokeTimeLimit;
  int revokePmTimeLimit;
  int ratingEDecay;
  int stickersRecentLimit;
  int stickersFavedLimit;
  int channelsReadMediaPeriod;
  int? tmpSessions;
  int pinnedDialogsCountMax;
  int pinnedInfolderCountMax;
  int callReceiveTimeoutMs;
  int callRingTimeoutMs;
  int callConnectTimeoutMs;
  int callPacketTimeoutMs;
  String meUrlPrefix;
  String? autoupdateUrlPrefix;
  String? gifSearchUsername;
  String? venueSearchUsername;
  String? imgSearchUsername;
  String? staticMapsProvider;
  int captionLengthMax;
  int messageLengthMax;
  int webfileDcId;
  String? suggestedLangCode;
  int? langPackVersion;
  int? baseLangPackVersion;

  Config(
      {required this.phonecallsEnabled,
      required this.defaultP2pContacts,
      required this.preloadFeaturedStickers,
      required this.ignorePhoneEntities,
      required this.revokePmInbox,
      required this.blockedMode,
      required this.pfsEnabled,
      required this.date,
      required this.expires,
      required this.testMode,
      required this.thisDc,
      required this.dcOptions,
      required this.dcTxtDomainName,
      required this.chatSizeMax,
      required this.megagroupSizeMax,
      required this.forwardedCountMax,
      required this.onlineUpdatePeriodMs,
      required this.offlineBlurTimeoutMs,
      required this.offlineIdleTimeoutMs,
      required this.onlineCloudTimeoutMs,
      required this.notifyCloudDelayMs,
      required this.notifyDefaultDelayMs,
      required this.pushChatPeriodMs,
      required this.pushChatLimit,
      required this.savedGifsLimit,
      required this.editTimeLimit,
      required this.revokeTimeLimit,
      required this.revokePmTimeLimit,
      required this.ratingEDecay,
      required this.stickersRecentLimit,
      required this.stickersFavedLimit,
      required this.channelsReadMediaPeriod,
      required this.tmpSessions,
      required this.pinnedDialogsCountMax,
      required this.pinnedInfolderCountMax,
      required this.callReceiveTimeoutMs,
      required this.callRingTimeoutMs,
      required this.callConnectTimeoutMs,
      required this.callPacketTimeoutMs,
      required this.meUrlPrefix,
      required this.autoupdateUrlPrefix,
      required this.gifSearchUsername,
      required this.venueSearchUsername,
      required this.imgSearchUsername,
      required this.staticMapsProvider,
      required this.captionLengthMax,
      required this.messageLengthMax,
      required this.webfileDcId,
      required this.suggestedLangCode,
      required this.langPackVersion,
      required this.baseLangPackVersion});

  static Config fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final phonecallsEnabled = (flags & 2) == 2;
    final defaultP2pContacts = (flags & 8) == 8;
    final preloadFeaturedStickers = (flags & 16) == 16;
    final ignorePhoneEntities = (flags & 32) == 32;
    final revokePmInbox = (flags & 64) == 64;
    final blockedMode = (flags & 256) == 256;
    final pfsEnabled = (flags & 8192) == 8192;
    var date = reader.readInt();
    var expires = reader.readInt();
    var testMode = reader.tgReadBool();
    var thisDc = reader.readInt();
    var _vectordcOptions = reader.readInt();
    if (_vectordcOptions != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> dcOptions = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      dcOptions.add(reader.tgReadObject());
    }
    var dcTxtDomainName = reader.tgReadString();
    var chatSizeMax = reader.readInt();
    var megagroupSizeMax = reader.readInt();
    var forwardedCountMax = reader.readInt();
    var onlineUpdatePeriodMs = reader.readInt();
    var offlineBlurTimeoutMs = reader.readInt();
    var offlineIdleTimeoutMs = reader.readInt();
    var onlineCloudTimeoutMs = reader.readInt();
    var notifyCloudDelayMs = reader.readInt();
    var notifyDefaultDelayMs = reader.readInt();
    var pushChatPeriodMs = reader.readInt();
    var pushChatLimit = reader.readInt();
    var savedGifsLimit = reader.readInt();
    var editTimeLimit = reader.readInt();
    var revokeTimeLimit = reader.readInt();
    var revokePmTimeLimit = reader.readInt();
    var ratingEDecay = reader.readInt();
    var stickersRecentLimit = reader.readInt();
    var stickersFavedLimit = reader.readInt();
    var channelsReadMediaPeriod = reader.readInt();
    var tmpSessions;
    if ((flags & 1) == 1) {
      tmpSessions = reader.readInt();
    } else {
      tmpSessions = null;
    }
    var pinnedDialogsCountMax = reader.readInt();
    var pinnedInfolderCountMax = reader.readInt();
    var callReceiveTimeoutMs = reader.readInt();
    var callRingTimeoutMs = reader.readInt();
    var callConnectTimeoutMs = reader.readInt();
    var callPacketTimeoutMs = reader.readInt();
    var meUrlPrefix = reader.tgReadString();
    var autoupdateUrlPrefix;
    if ((flags & 128) == 128) {
      autoupdateUrlPrefix = reader.tgReadString();
    } else {
      autoupdateUrlPrefix = null;
    }
    var gifSearchUsername;
    if ((flags & 512) == 512) {
      gifSearchUsername = reader.tgReadString();
    } else {
      gifSearchUsername = null;
    }
    var venueSearchUsername;
    if ((flags & 1024) == 1024) {
      venueSearchUsername = reader.tgReadString();
    } else {
      venueSearchUsername = null;
    }
    var imgSearchUsername;
    if ((flags & 2048) == 2048) {
      imgSearchUsername = reader.tgReadString();
    } else {
      imgSearchUsername = null;
    }
    var staticMapsProvider;
    if ((flags & 4096) == 4096) {
      staticMapsProvider = reader.tgReadString();
    } else {
      staticMapsProvider = null;
    }
    var captionLengthMax = reader.readInt();
    var messageLengthMax = reader.readInt();
    var webfileDcId = reader.readInt();
    var suggestedLangCode;
    if ((flags & 4) == 4) {
      suggestedLangCode = reader.tgReadString();
    } else {
      suggestedLangCode = null;
    }
    var langPackVersion;
    if ((flags & 4) == 4) {
      langPackVersion = reader.readInt();
    } else {
      langPackVersion = null;
    }
    var baseLangPackVersion;
    if ((flags & 4) == 4) {
      baseLangPackVersion = reader.readInt();
    } else {
      baseLangPackVersion = null;
    }
    return Config(
        phonecallsEnabled: phonecallsEnabled,
        defaultP2pContacts: defaultP2pContacts,
        preloadFeaturedStickers: preloadFeaturedStickers,
        ignorePhoneEntities: ignorePhoneEntities,
        revokePmInbox: revokePmInbox,
        blockedMode: blockedMode,
        pfsEnabled: pfsEnabled,
        date: date,
        expires: expires,
        testMode: testMode,
        thisDc: thisDc,
        dcOptions: dcOptions,
        dcTxtDomainName: dcTxtDomainName,
        chatSizeMax: chatSizeMax,
        megagroupSizeMax: megagroupSizeMax,
        forwardedCountMax: forwardedCountMax,
        onlineUpdatePeriodMs: onlineUpdatePeriodMs,
        offlineBlurTimeoutMs: offlineBlurTimeoutMs,
        offlineIdleTimeoutMs: offlineIdleTimeoutMs,
        onlineCloudTimeoutMs: onlineCloudTimeoutMs,
        notifyCloudDelayMs: notifyCloudDelayMs,
        notifyDefaultDelayMs: notifyDefaultDelayMs,
        pushChatPeriodMs: pushChatPeriodMs,
        pushChatLimit: pushChatLimit,
        savedGifsLimit: savedGifsLimit,
        editTimeLimit: editTimeLimit,
        revokeTimeLimit: revokeTimeLimit,
        revokePmTimeLimit: revokePmTimeLimit,
        ratingEDecay: ratingEDecay,
        stickersRecentLimit: stickersRecentLimit,
        stickersFavedLimit: stickersFavedLimit,
        channelsReadMediaPeriod: channelsReadMediaPeriod,
        tmpSessions: tmpSessions,
        pinnedDialogsCountMax: pinnedDialogsCountMax,
        pinnedInfolderCountMax: pinnedInfolderCountMax,
        callReceiveTimeoutMs: callReceiveTimeoutMs,
        callRingTimeoutMs: callRingTimeoutMs,
        callConnectTimeoutMs: callConnectTimeoutMs,
        callPacketTimeoutMs: callPacketTimeoutMs,
        meUrlPrefix: meUrlPrefix,
        autoupdateUrlPrefix: autoupdateUrlPrefix,
        gifSearchUsername: gifSearchUsername,
        venueSearchUsername: venueSearchUsername,
        imgSearchUsername: imgSearchUsername,
        staticMapsProvider: staticMapsProvider,
        captionLengthMax: captionLengthMax,
        messageLengthMax: messageLengthMax,
        webfileDcId: webfileDcId,
        suggestedLangCode: suggestedLangCode,
        langPackVersion: langPackVersion,
        baseLangPackVersion: baseLangPackVersion);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(856375399, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.expires, 4, little: true, signed: true),
      [this.testMode == true ? 0xb5757299 : 0x379779bc],
      readBufferFromBigInt(this.thisDc, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.dcOptions!.length, 4,
          little: true, signed: true),
      this
          .dcOptions!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      serializeBytes(this.dcTxtDomainName),
      readBufferFromBigInt(this.chatSizeMax, 4, little: true, signed: true),
      readBufferFromBigInt(this.megagroupSizeMax, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.forwardedCountMax, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.onlineUpdatePeriodMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.offlineBlurTimeoutMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.offlineIdleTimeoutMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.onlineCloudTimeoutMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.notifyCloudDelayMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.notifyDefaultDelayMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.pushChatPeriodMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.pushChatLimit, 4, little: true, signed: true),
      readBufferFromBigInt(this.savedGifsLimit, 4, little: true, signed: true),
      readBufferFromBigInt(this.editTimeLimit, 4, little: true, signed: true),
      readBufferFromBigInt(this.revokeTimeLimit, 4, little: true, signed: true),
      readBufferFromBigInt(this.revokePmTimeLimit, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.ratingEDecay, 4, little: true, signed: true),
      readBufferFromBigInt(this.stickersRecentLimit, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.stickersFavedLimit, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.channelsReadMediaPeriod, 4,
          little: true, signed: true),
      (this.tmpSessions == null || this.tmpSessions == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.tmpSessions, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.pinnedDialogsCountMax, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.pinnedInfolderCountMax, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.callReceiveTimeoutMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.callRingTimeoutMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.callConnectTimeoutMs, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.callPacketTimeoutMs, 4,
          little: true, signed: true),
      serializeBytes(this.meUrlPrefix),
      (this.autoupdateUrlPrefix == null || this.autoupdateUrlPrefix == false)
          ? List<int>.empty()
          : [serializeBytes(this.autoupdateUrlPrefix)]
              .expand((element) => element)
              .toList(),
      (this.gifSearchUsername == null || this.gifSearchUsername == false)
          ? List<int>.empty()
          : [serializeBytes(this.gifSearchUsername)]
              .expand((element) => element)
              .toList(),
      (this.venueSearchUsername == null || this.venueSearchUsername == false)
          ? List<int>.empty()
          : [serializeBytes(this.venueSearchUsername)]
              .expand((element) => element)
              .toList(),
      (this.imgSearchUsername == null || this.imgSearchUsername == false)
          ? List<int>.empty()
          : [serializeBytes(this.imgSearchUsername)]
              .expand((element) => element)
              .toList(),
      (this.staticMapsProvider == null || this.staticMapsProvider == false)
          ? List<int>.empty()
          : [serializeBytes(this.staticMapsProvider)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.captionLengthMax, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.messageLengthMax, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.webfileDcId, 4, little: true, signed: true),
      (this.suggestedLangCode == null || this.suggestedLangCode == false)
          ? List<int>.empty()
          : [serializeBytes(this.suggestedLangCode)]
              .expand((element) => element)
              .toList(),
      (this.langPackVersion == null || this.langPackVersion == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.langPackVersion, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.baseLangPackVersion == null || this.baseLangPackVersion == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.baseLangPackVersion, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Config{ID: $ID, phonecallsEnabled: $phonecallsEnabled, defaultP2pContacts: $defaultP2pContacts, preloadFeaturedStickers: $preloadFeaturedStickers, ignorePhoneEntities: $ignorePhoneEntities, revokePmInbox: $revokePmInbox, blockedMode: $blockedMode, pfsEnabled: $pfsEnabled, date: $date, expires: $expires, testMode: $testMode, thisDc: $thisDc, dcOptions: $dcOptions, dcTxtDomainName: $dcTxtDomainName, chatSizeMax: $chatSizeMax, megagroupSizeMax: $megagroupSizeMax, forwardedCountMax: $forwardedCountMax, onlineUpdatePeriodMs: $onlineUpdatePeriodMs, offlineBlurTimeoutMs: $offlineBlurTimeoutMs, offlineIdleTimeoutMs: $offlineIdleTimeoutMs, onlineCloudTimeoutMs: $onlineCloudTimeoutMs, notifyCloudDelayMs: $notifyCloudDelayMs, notifyDefaultDelayMs: $notifyDefaultDelayMs, pushChatPeriodMs: $pushChatPeriodMs, pushChatLimit: $pushChatLimit, savedGifsLimit: $savedGifsLimit, editTimeLimit: $editTimeLimit, revokeTimeLimit: $revokeTimeLimit, revokePmTimeLimit: $revokePmTimeLimit, ratingEDecay: $ratingEDecay, stickersRecentLimit: $stickersRecentLimit, stickersFavedLimit: $stickersFavedLimit, channelsReadMediaPeriod: $channelsReadMediaPeriod, tmpSessions: $tmpSessions, pinnedDialogsCountMax: $pinnedDialogsCountMax, pinnedInfolderCountMax: $pinnedInfolderCountMax, callReceiveTimeoutMs: $callReceiveTimeoutMs, callRingTimeoutMs: $callRingTimeoutMs, callConnectTimeoutMs: $callConnectTimeoutMs, callPacketTimeoutMs: $callPacketTimeoutMs, meUrlPrefix: $meUrlPrefix, autoupdateUrlPrefix: $autoupdateUrlPrefix, gifSearchUsername: $gifSearchUsername, venueSearchUsername: $venueSearchUsername, imgSearchUsername: $imgSearchUsername, staticMapsProvider: $staticMapsProvider, captionLengthMax: $captionLengthMax, messageLengthMax: $messageLengthMax, webfileDcId: $webfileDcId, suggestedLangCode: $suggestedLangCode, langPackVersion: $langPackVersion, baseLangPackVersion: $baseLangPackVersion}';
  }
}

class NearestDc extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2384074613;
  static const SUBCLASS_OF_ID = 947323999;
  final classType = "constructor";
  final ID = 2384074613;
  String country;
  int thisDc;
  int nearestDc;

  NearestDc(
      {required this.country, required this.thisDc, required this.nearestDc});

  static NearestDc fromReader(BinaryReader reader) {
    var len;
    var country = reader.tgReadString();
    var thisDc = reader.readInt();
    var nearestDc = reader.readInt();
    return NearestDc(country: country, thisDc: thisDc, nearestDc: nearestDc);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2384074613, 4),
      serializeBytes(this.country),
      readBufferFromBigInt(this.thisDc, 4, little: true, signed: true),
      readBufferFromBigInt(this.nearestDc, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'NearestDc{ID: $ID, country: $country, thisDc: $thisDc, nearestDc: $nearestDc}';
  }
}

class EncryptedChatEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2877210784;
  static const SUBCLASS_OF_ID = 1831379834;
  final classType = "constructor";
  final ID = 2877210784;
  int id;

  EncryptedChatEmpty({required this.id});

  static EncryptedChatEmpty fromReader(BinaryReader reader) {
    var len;
    var id = reader.readInt();
    return EncryptedChatEmpty(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2877210784, 4),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EncryptedChatEmpty{ID: $ID, id: $id}';
  }
}

class EncryptedChatWaiting extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1722964307;
  static const SUBCLASS_OF_ID = 1831379834;
  final classType = "constructor";
  final ID = 1722964307;
  int id;
  BigInt accessHash;
  int date;
  BigInt adminId;
  BigInt participantId;

  EncryptedChatWaiting(
      {required this.id,
      required this.accessHash,
      required this.date,
      required this.adminId,
      required this.participantId});

  static EncryptedChatWaiting fromReader(BinaryReader reader) {
    var len;
    var id = reader.readInt();
    var accessHash = reader.readLong();
    var date = reader.readInt();
    var adminId = reader.readLong();
    var participantId = reader.readLong();
    return EncryptedChatWaiting(
        id: id,
        accessHash: accessHash,
        date: date,
        adminId: adminId,
        participantId: participantId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1722964307, 4),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.adminId, 8, little: true, signed: true),
      readBufferFromBigInt(this.participantId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EncryptedChatWaiting{ID: $ID, id: $id, accessHash: $accessHash, date: $date, adminId: $adminId, participantId: $participantId}';
  }
}

class EncryptedChatRequested extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1223809356;
  static const SUBCLASS_OF_ID = 1831379834;
  final classType = "constructor";
  final ID = 1223809356;
  int? folderId;
  int id;
  BigInt accessHash;
  int date;
  BigInt adminId;
  BigInt participantId;
  List<int> gA;

  EncryptedChatRequested(
      {required this.folderId,
      required this.id,
      required this.accessHash,
      required this.date,
      required this.adminId,
      required this.participantId,
      required this.gA});

  static EncryptedChatRequested fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var folderId;
    if ((flags & 1) == 1) {
      folderId = reader.readInt();
    } else {
      folderId = null;
    }
    var id = reader.readInt();
    var accessHash = reader.readLong();
    var date = reader.readInt();
    var adminId = reader.readLong();
    var participantId = reader.readLong();
    var gA = reader.tgReadBytes();
    return EncryptedChatRequested(
        folderId: folderId,
        id: id,
        accessHash: accessHash,
        date: date,
        adminId: adminId,
        participantId: participantId,
        gA: gA);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1223809356, 4),
      [0, 0, 0, 0],
      (this.folderId == null || this.folderId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.folderId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.adminId, 8, little: true, signed: true),
      readBufferFromBigInt(this.participantId, 8, little: true, signed: true),
      serializeBytes(this.gA),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EncryptedChatRequested{ID: $ID, folderId: $folderId, id: $id, accessHash: $accessHash, date: $date, adminId: $adminId, participantId: $participantId, gA: $gA}';
  }
}

class EncryptedChat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1643173063;
  static const SUBCLASS_OF_ID = 1831379834;
  final classType = "constructor";
  final ID = 1643173063;
  int id;
  BigInt accessHash;
  int date;
  BigInt adminId;
  BigInt participantId;
  List<int> gAOrB;
  BigInt keyFingerprint;

  EncryptedChat(
      {required this.id,
      required this.accessHash,
      required this.date,
      required this.adminId,
      required this.participantId,
      required this.gAOrB,
      required this.keyFingerprint});

  static EncryptedChat fromReader(BinaryReader reader) {
    var len;
    var id = reader.readInt();
    var accessHash = reader.readLong();
    var date = reader.readInt();
    var adminId = reader.readLong();
    var participantId = reader.readLong();
    var gAOrB = reader.tgReadBytes();
    var keyFingerprint = reader.readLong();
    return EncryptedChat(
        id: id,
        accessHash: accessHash,
        date: date,
        adminId: adminId,
        participantId: participantId,
        gAOrB: gAOrB,
        keyFingerprint: keyFingerprint);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1643173063, 4),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.adminId, 8, little: true, signed: true),
      readBufferFromBigInt(this.participantId, 8, little: true, signed: true),
      serializeBytes(this.gAOrB),
      readBufferFromBigInt(this.keyFingerprint, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EncryptedChat{ID: $ID, id: $id, accessHash: $accessHash, date: $date, adminId: $adminId, participantId: $participantId, gAOrB: $gAOrB, keyFingerprint: $keyFingerprint}';
  }
}

class EncryptedChatDiscarded extends BaseConstructor {
  static const CONSTRUCTOR_ID = 505183301;
  static const SUBCLASS_OF_ID = 1831379834;
  final classType = "constructor";
  final ID = 505183301;
  bool? historyDeleted;
  int id;

  EncryptedChatDiscarded({required this.historyDeleted, required this.id});

  static EncryptedChatDiscarded fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final historyDeleted = (flags & 1) == 1;
    var id = reader.readInt();
    return EncryptedChatDiscarded(historyDeleted: historyDeleted, id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(505183301, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EncryptedChatDiscarded{ID: $ID, historyDeleted: $historyDeleted, id: $id}';
  }
}

class InputEncryptedChat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4047615457;
  static const SUBCLASS_OF_ID = 1819674304;
  final classType = "constructor";
  final ID = 4047615457;
  int chatId;
  BigInt accessHash;

  InputEncryptedChat({required this.chatId, required this.accessHash});

  static InputEncryptedChat fromReader(BinaryReader reader) {
    var len;
    var chatId = reader.readInt();
    var accessHash = reader.readLong();
    return InputEncryptedChat(chatId: chatId, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4047615457, 4),
      readBufferFromBigInt(this.chatId, 4, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputEncryptedChat{ID: $ID, chatId: $chatId, accessHash: $accessHash}';
  }
}

class EncryptedFileEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3256830334;
  static const SUBCLASS_OF_ID = 2217371584;
  final classType = "constructor";
  final ID = 3256830334;

  EncryptedFileEmpty();

  static EncryptedFileEmpty fromReader(BinaryReader reader) {
    var len;
    return EncryptedFileEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3256830334, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EncryptedFileEmpty{ID: $ID, }';
  }
}

class EncryptedFile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1248893260;
  static const SUBCLASS_OF_ID = 2217371584;
  final classType = "constructor";
  final ID = 1248893260;
  BigInt id;
  BigInt accessHash;
  int size;
  int dcId;
  int keyFingerprint;

  EncryptedFile(
      {required this.id,
      required this.accessHash,
      required this.size,
      required this.dcId,
      required this.keyFingerprint});

  static EncryptedFile fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var size = reader.readInt();
    var dcId = reader.readInt();
    var keyFingerprint = reader.readInt();
    return EncryptedFile(
        id: id,
        accessHash: accessHash,
        size: size,
        dcId: dcId,
        keyFingerprint: keyFingerprint);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1248893260, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.size, 4, little: true, signed: true),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
      readBufferFromBigInt(this.keyFingerprint, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EncryptedFile{ID: $ID, id: $id, accessHash: $accessHash, size: $size, dcId: $dcId, keyFingerprint: $keyFingerprint}';
  }
}

class InputEncryptedFileEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 406307684;
  static const SUBCLASS_OF_ID = 2239021690;
  final classType = "constructor";
  final ID = 406307684;

  InputEncryptedFileEmpty();

  static InputEncryptedFileEmpty fromReader(BinaryReader reader) {
    var len;
    return InputEncryptedFileEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(406307684, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputEncryptedFileEmpty{ID: $ID, }';
  }
}

class InputEncryptedFileUploaded extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1690108678;
  static const SUBCLASS_OF_ID = 2239021690;
  final classType = "constructor";
  final ID = 1690108678;
  BigInt id;
  int parts;
  String md5Checksum;
  int keyFingerprint;

  InputEncryptedFileUploaded(
      {required this.id,
      required this.parts,
      required this.md5Checksum,
      required this.keyFingerprint});

  static InputEncryptedFileUploaded fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var parts = reader.readInt();
    var md5Checksum = reader.tgReadString();
    var keyFingerprint = reader.readInt();
    return InputEncryptedFileUploaded(
        id: id,
        parts: parts,
        md5Checksum: md5Checksum,
        keyFingerprint: keyFingerprint);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1690108678, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.parts, 4, little: true, signed: true),
      serializeBytes(this.md5Checksum),
      readBufferFromBigInt(this.keyFingerprint, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputEncryptedFileUploaded{ID: $ID, id: $id, parts: $parts, md5Checksum: $md5Checksum, keyFingerprint: $keyFingerprint}';
  }
}

class InputEncryptedFile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1511503333;
  static const SUBCLASS_OF_ID = 2239021690;
  final classType = "constructor";
  final ID = 1511503333;
  BigInt id;
  BigInt accessHash;

  InputEncryptedFile({required this.id, required this.accessHash});

  static InputEncryptedFile fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputEncryptedFile(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1511503333, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputEncryptedFile{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class InputEncryptedFileBigUploaded extends BaseConstructor {
  static const CONSTRUCTOR_ID = 767652808;
  static const SUBCLASS_OF_ID = 2239021690;
  final classType = "constructor";
  final ID = 767652808;
  BigInt id;
  int parts;
  int keyFingerprint;

  InputEncryptedFileBigUploaded(
      {required this.id, required this.parts, required this.keyFingerprint});

  static InputEncryptedFileBigUploaded fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var parts = reader.readInt();
    var keyFingerprint = reader.readInt();
    return InputEncryptedFileBigUploaded(
        id: id, parts: parts, keyFingerprint: keyFingerprint);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(767652808, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.parts, 4, little: true, signed: true),
      readBufferFromBigInt(this.keyFingerprint, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputEncryptedFileBigUploaded{ID: $ID, id: $id, parts: $parts, keyFingerprint: $keyFingerprint}';
  }
}

class EncryptedMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3977822488;
  static const SUBCLASS_OF_ID = 597634641;
  final classType = "constructor";
  final ID = 3977822488;
  BigInt randomId;
  int chatId;
  int date;
  List<int> bytes;
  var file;

  EncryptedMessage(
      {required this.randomId,
      required this.chatId,
      required this.date,
      required this.bytes,
      required this.file});

  static EncryptedMessage fromReader(BinaryReader reader) {
    var len;
    var randomId = reader.readLong();
    var chatId = reader.readInt();
    var date = reader.readInt();
    var bytes = reader.tgReadBytes();
    var file = reader.tgReadObject();
    return EncryptedMessage(
        randomId: randomId,
        chatId: chatId,
        date: date,
        bytes: bytes,
        file: file);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3977822488, 4),
      readBufferFromBigInt(this.randomId, 8, little: true, signed: true),
      readBufferFromBigInt(this.chatId, 4, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      serializeBytes(this.bytes),
      (this.file.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EncryptedMessage{ID: $ID, randomId: $randomId, chatId: $chatId, date: $date, bytes: $bytes, file: $file}';
  }
}

class EncryptedMessageService extends BaseConstructor {
  static const CONSTRUCTOR_ID = 594758406;
  static const SUBCLASS_OF_ID = 597634641;
  final classType = "constructor";
  final ID = 594758406;
  BigInt randomId;
  int chatId;
  int date;
  List<int> bytes;

  EncryptedMessageService(
      {required this.randomId,
      required this.chatId,
      required this.date,
      required this.bytes});

  static EncryptedMessageService fromReader(BinaryReader reader) {
    var len;
    var randomId = reader.readLong();
    var chatId = reader.readInt();
    var date = reader.readInt();
    var bytes = reader.tgReadBytes();
    return EncryptedMessageService(
        randomId: randomId, chatId: chatId, date: date, bytes: bytes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(594758406, 4),
      readBufferFromBigInt(this.randomId, 8, little: true, signed: true),
      readBufferFromBigInt(this.chatId, 4, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      serializeBytes(this.bytes),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EncryptedMessageService{ID: $ID, randomId: $randomId, chatId: $chatId, date: $date, bytes: $bytes}';
  }
}

class InputDocumentEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1928391342;
  static const SUBCLASS_OF_ID = 4081048424;
  final classType = "constructor";
  final ID = 1928391342;

  InputDocumentEmpty();

  static InputDocumentEmpty fromReader(BinaryReader reader) {
    var len;
    return InputDocumentEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1928391342, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputDocumentEmpty{ID: $ID, }';
  }
}

class InputDocument extends BaseConstructor {
  static const CONSTRUCTOR_ID = 448771445;
  static const SUBCLASS_OF_ID = 4081048424;
  final classType = "constructor";
  final ID = 448771445;
  BigInt id;
  BigInt accessHash;
  List<int> fileReference;

  InputDocument(
      {required this.id,
      required this.accessHash,
      required this.fileReference});

  static InputDocument fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var fileReference = reader.tgReadBytes();
    return InputDocument(
        id: id, accessHash: accessHash, fileReference: fileReference);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(448771445, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.fileReference),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputDocument{ID: $ID, id: $id, accessHash: $accessHash, fileReference: $fileReference}';
  }
}

class DocumentEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 922273905;
  static const SUBCLASS_OF_ID = 555739168;
  final classType = "constructor";
  final ID = 922273905;
  BigInt id;

  DocumentEmpty({required this.id});

  static DocumentEmpty fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    return DocumentEmpty(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(922273905, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DocumentEmpty{ID: $ID, id: $id}';
  }
}

class Document extends BaseConstructor {
  static const CONSTRUCTOR_ID = 512177195;
  static const SUBCLASS_OF_ID = 555739168;
  final classType = "constructor";
  final ID = 512177195;
  BigInt id;
  BigInt accessHash;
  List<int> fileReference;
  int date;
  String mimeType;
  int size;
  List<dynamic>? thumbs;
  List<dynamic>? videoThumbs;
  int dcId;
  List<dynamic> attributes;

  Document(
      {required this.id,
      required this.accessHash,
      required this.fileReference,
      required this.date,
      required this.mimeType,
      required this.size,
      required this.thumbs,
      required this.videoThumbs,
      required this.dcId,
      required this.attributes});

  static Document fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var fileReference = reader.tgReadBytes();
    var date = reader.readInt();
    var mimeType = reader.tgReadString();
    var size = reader.readInt();
    var thumbs;
    if ((flags & 1) == 1) {
      var _vectorthumbs = reader.readInt();
      if (_vectorthumbs != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> thumbs = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        thumbs.add(reader.tgReadObject());
      }
    } else {
      thumbs = null;
    }
    var videoThumbs;
    if ((flags & 2) == 2) {
      var _vectorvideoThumbs = reader.readInt();
      if (_vectorvideoThumbs != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> videoThumbs = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        videoThumbs.add(reader.tgReadObject());
      }
    } else {
      videoThumbs = null;
    }
    var dcId = reader.readInt();
    var _vectorattributes = reader.readInt();
    if (_vectorattributes != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> attributes = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      attributes.add(reader.tgReadObject());
    }
    return Document(
        id: id,
        accessHash: accessHash,
        fileReference: fileReference,
        date: date,
        mimeType: mimeType,
        size: size,
        thumbs: thumbs,
        videoThumbs: videoThumbs,
        dcId: dcId,
        attributes: attributes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(512177195, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.fileReference),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      serializeBytes(this.mimeType),
      readBufferFromBigInt(this.size, 4, little: true, signed: true),
      (this.thumbs == null || this.thumbs == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.thumbs!.length, 4,
                  little: true, signed: true),
              this
                  .thumbs!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.videoThumbs == null || this.videoThumbs == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.videoThumbs!.length, 4,
                  little: true, signed: true),
              this
                  .videoThumbs!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.attributes!.length, 4,
          little: true, signed: true),
      this
          .attributes!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Document{ID: $ID, id: $id, accessHash: $accessHash, fileReference: $fileReference, date: $date, mimeType: $mimeType, size: $size, thumbs: $thumbs, videoThumbs: $videoThumbs, dcId: $dcId, attributes: $attributes}';
  }
}

class NotifyPeer extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2681474008;
  static const SUBCLASS_OF_ID = 3756548142;
  final classType = "constructor";
  final ID = 2681474008;
  var peer;

  NotifyPeer({required this.peer});

  static NotifyPeer fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    return NotifyPeer(peer: peer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2681474008, 4),
      (this.peer.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'NotifyPeer{ID: $ID, peer: $peer}';
  }
}

class NotifyUsers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3033021260;
  static const SUBCLASS_OF_ID = 3756548142;
  final classType = "constructor";
  final ID = 3033021260;

  NotifyUsers();

  static NotifyUsers fromReader(BinaryReader reader) {
    var len;
    return NotifyUsers();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3033021260, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'NotifyUsers{ID: $ID, }';
  }
}

class NotifyChats extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3221737155;
  static const SUBCLASS_OF_ID = 3756548142;
  final classType = "constructor";
  final ID = 3221737155;

  NotifyChats();

  static NotifyChats fromReader(BinaryReader reader) {
    var len;
    return NotifyChats();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3221737155, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'NotifyChats{ID: $ID, }';
  }
}

class NotifyBroadcasts extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3591563503;
  static const SUBCLASS_OF_ID = 3756548142;
  final classType = "constructor";
  final ID = 3591563503;

  NotifyBroadcasts();

  static NotifyBroadcasts fromReader(BinaryReader reader) {
    var len;
    return NotifyBroadcasts();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3591563503, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'NotifyBroadcasts{ID: $ID, }';
  }
}

class SendMessageTypingAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 381645902;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 381645902;

  SendMessageTypingAction();

  static SendMessageTypingAction fromReader(BinaryReader reader) {
    var len;
    return SendMessageTypingAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(381645902, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageTypingAction{ID: $ID, }';
  }
}

class SendMessageCancelAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4250847477;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 4250847477;

  SendMessageCancelAction();

  static SendMessageCancelAction fromReader(BinaryReader reader) {
    var len;
    return SendMessageCancelAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4250847477, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageCancelAction{ID: $ID, }';
  }
}

class SendMessageRecordVideoAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2710034031;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 2710034031;

  SendMessageRecordVideoAction();

  static SendMessageRecordVideoAction fromReader(BinaryReader reader) {
    var len;
    return SendMessageRecordVideoAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2710034031, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageRecordVideoAction{ID: $ID, }';
  }
}

class SendMessageUploadVideoAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3916839660;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 3916839660;
  int progress;

  SendMessageUploadVideoAction({required this.progress});

  static SendMessageUploadVideoAction fromReader(BinaryReader reader) {
    var len;
    var progress = reader.readInt();
    return SendMessageUploadVideoAction(progress: progress);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3916839660, 4),
      readBufferFromBigInt(this.progress, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageUploadVideoAction{ID: $ID, progress: $progress}';
  }
}

class SendMessageRecordAudioAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3576656887;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 3576656887;

  SendMessageRecordAudioAction();

  static SendMessageRecordAudioAction fromReader(BinaryReader reader) {
    var len;
    return SendMessageRecordAudioAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3576656887, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageRecordAudioAction{ID: $ID, }';
  }
}

class SendMessageUploadAudioAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4082227115;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 4082227115;
  int progress;

  SendMessageUploadAudioAction({required this.progress});

  static SendMessageUploadAudioAction fromReader(BinaryReader reader) {
    var len;
    var progress = reader.readInt();
    return SendMessageUploadAudioAction(progress: progress);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4082227115, 4),
      readBufferFromBigInt(this.progress, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageUploadAudioAction{ID: $ID, progress: $progress}';
  }
}

class SendMessageUploadPhotoAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3520285222;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 3520285222;
  int progress;

  SendMessageUploadPhotoAction({required this.progress});

  static SendMessageUploadPhotoAction fromReader(BinaryReader reader) {
    var len;
    var progress = reader.readInt();
    return SendMessageUploadPhotoAction(progress: progress);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3520285222, 4),
      readBufferFromBigInt(this.progress, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageUploadPhotoAction{ID: $ID, progress: $progress}';
  }
}

class SendMessageUploadDocumentAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2852968932;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 2852968932;
  int progress;

  SendMessageUploadDocumentAction({required this.progress});

  static SendMessageUploadDocumentAction fromReader(BinaryReader reader) {
    var len;
    var progress = reader.readInt();
    return SendMessageUploadDocumentAction(progress: progress);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2852968932, 4),
      readBufferFromBigInt(this.progress, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageUploadDocumentAction{ID: $ID, progress: $progress}';
  }
}

class SendMessageGeoLocationAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 393186209;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 393186209;

  SendMessageGeoLocationAction();

  static SendMessageGeoLocationAction fromReader(BinaryReader reader) {
    var len;
    return SendMessageGeoLocationAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(393186209, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageGeoLocationAction{ID: $ID, }';
  }
}

class SendMessageChooseContactAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1653390447;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 1653390447;

  SendMessageChooseContactAction();

  static SendMessageChooseContactAction fromReader(BinaryReader reader) {
    var len;
    return SendMessageChooseContactAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1653390447, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageChooseContactAction{ID: $ID, }';
  }
}

class SendMessageGamePlayAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3714748232;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 3714748232;

  SendMessageGamePlayAction();

  static SendMessageGamePlayAction fromReader(BinaryReader reader) {
    var len;
    return SendMessageGamePlayAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3714748232, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageGamePlayAction{ID: $ID, }';
  }
}

class SendMessageRecordRoundAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2297593788;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 2297593788;

  SendMessageRecordRoundAction();

  static SendMessageRecordRoundAction fromReader(BinaryReader reader) {
    var len;
    return SendMessageRecordRoundAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2297593788, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageRecordRoundAction{ID: $ID, }';
  }
}

class SendMessageUploadRoundAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 608050278;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 608050278;
  int progress;

  SendMessageUploadRoundAction({required this.progress});

  static SendMessageUploadRoundAction fromReader(BinaryReader reader) {
    var len;
    var progress = reader.readInt();
    return SendMessageUploadRoundAction(progress: progress);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(608050278, 4),
      readBufferFromBigInt(this.progress, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageUploadRoundAction{ID: $ID, progress: $progress}';
  }
}

class SpeakingInGroupCallAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3643548293;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 3643548293;

  SpeakingInGroupCallAction();

  static SpeakingInGroupCallAction fromReader(BinaryReader reader) {
    var len;
    return SpeakingInGroupCallAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3643548293, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SpeakingInGroupCallAction{ID: $ID, }';
  }
}

class SendMessageHistoryImportAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3688534598;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 3688534598;
  int progress;

  SendMessageHistoryImportAction({required this.progress});

  static SendMessageHistoryImportAction fromReader(BinaryReader reader) {
    var len;
    var progress = reader.readInt();
    return SendMessageHistoryImportAction(progress: progress);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3688534598, 4),
      readBufferFromBigInt(this.progress, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageHistoryImportAction{ID: $ID, progress: $progress}';
  }
}

class SendMessageChooseStickerAction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2958739121;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 2958739121;

  SendMessageChooseStickerAction();

  static SendMessageChooseStickerAction fromReader(BinaryReader reader) {
    var len;
    return SendMessageChooseStickerAction();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2958739121, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageChooseStickerAction{ID: $ID, }';
  }
}

class SendMessageEmojiInteraction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 630664139;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 630664139;
  String emoticon;
  int msgId;
  var interaction;

  SendMessageEmojiInteraction(
      {required this.emoticon, required this.msgId, required this.interaction});

  static SendMessageEmojiInteraction fromReader(BinaryReader reader) {
    var len;
    var emoticon = reader.tgReadString();
    var msgId = reader.readInt();
    var interaction = reader.tgReadObject();
    return SendMessageEmojiInteraction(
        emoticon: emoticon, msgId: msgId, interaction: interaction);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(630664139, 4),
      serializeBytes(this.emoticon),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
      (this.interaction.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageEmojiInteraction{ID: $ID, emoticon: $emoticon, msgId: $msgId, interaction: $interaction}';
  }
}

class SendMessageEmojiInteractionSeen extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3060109358;
  static const SUBCLASS_OF_ID = 548588577;
  final classType = "constructor";
  final ID = 3060109358;
  String emoticon;

  SendMessageEmojiInteractionSeen({required this.emoticon});

  static SendMessageEmojiInteractionSeen fromReader(BinaryReader reader) {
    var len;
    var emoticon = reader.tgReadString();
    return SendMessageEmojiInteractionSeen(emoticon: emoticon);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3060109358, 4),
      serializeBytes(this.emoticon),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SendMessageEmojiInteractionSeen{ID: $ID, emoticon: $emoticon}';
  }
}

class InputPrivacyKeyStatusTimestamp extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1335282456;
  static const SUBCLASS_OF_ID = 87435256;
  final classType = "constructor";
  final ID = 1335282456;

  InputPrivacyKeyStatusTimestamp();

  static InputPrivacyKeyStatusTimestamp fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyKeyStatusTimestamp();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1335282456, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyKeyStatusTimestamp{ID: $ID, }';
  }
}

class InputPrivacyKeyChatInvite extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3187344422;
  static const SUBCLASS_OF_ID = 87435256;
  final classType = "constructor";
  final ID = 3187344422;

  InputPrivacyKeyChatInvite();

  static InputPrivacyKeyChatInvite fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyKeyChatInvite();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3187344422, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyKeyChatInvite{ID: $ID, }';
  }
}

class InputPrivacyKeyPhoneCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4206550111;
  static const SUBCLASS_OF_ID = 87435256;
  final classType = "constructor";
  final ID = 4206550111;

  InputPrivacyKeyPhoneCall();

  static InputPrivacyKeyPhoneCall fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyKeyPhoneCall();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4206550111, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyKeyPhoneCall{ID: $ID, }';
  }
}

class InputPrivacyKeyPhoneP2P extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3684593874;
  static const SUBCLASS_OF_ID = 87435256;
  final classType = "constructor";
  final ID = 3684593874;

  InputPrivacyKeyPhoneP2P();

  static InputPrivacyKeyPhoneP2P fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyKeyPhoneP2P();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3684593874, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyKeyPhoneP2P{ID: $ID, }';
  }
}

class InputPrivacyKeyForwards extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2765966344;
  static const SUBCLASS_OF_ID = 87435256;
  final classType = "constructor";
  final ID = 2765966344;

  InputPrivacyKeyForwards();

  static InputPrivacyKeyForwards fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyKeyForwards();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2765966344, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyKeyForwards{ID: $ID, }';
  }
}

class InputPrivacyKeyProfilePhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1461304012;
  static const SUBCLASS_OF_ID = 87435256;
  final classType = "constructor";
  final ID = 1461304012;

  InputPrivacyKeyProfilePhoto();

  static InputPrivacyKeyProfilePhoto fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyKeyProfilePhoto();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1461304012, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyKeyProfilePhoto{ID: $ID, }';
  }
}

class InputPrivacyKeyPhoneNumber extends BaseConstructor {
  static const CONSTRUCTOR_ID = 55761658;
  static const SUBCLASS_OF_ID = 87435256;
  final classType = "constructor";
  final ID = 55761658;

  InputPrivacyKeyPhoneNumber();

  static InputPrivacyKeyPhoneNumber fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyKeyPhoneNumber();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(55761658, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyKeyPhoneNumber{ID: $ID, }';
  }
}

class InputPrivacyKeyAddedByPhone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3508640733;
  static const SUBCLASS_OF_ID = 87435256;
  final classType = "constructor";
  final ID = 3508640733;

  InputPrivacyKeyAddedByPhone();

  static InputPrivacyKeyAddedByPhone fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyKeyAddedByPhone();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3508640733, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyKeyAddedByPhone{ID: $ID, }';
  }
}

class PrivacyKeyStatusTimestamp extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3157175088;
  static const SUBCLASS_OF_ID = 2185646531;
  final classType = "constructor";
  final ID = 3157175088;

  PrivacyKeyStatusTimestamp();

  static PrivacyKeyStatusTimestamp fromReader(BinaryReader reader) {
    var len;
    return PrivacyKeyStatusTimestamp();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3157175088, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyKeyStatusTimestamp{ID: $ID, }';
  }
}

class PrivacyKeyChatInvite extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1343122938;
  static const SUBCLASS_OF_ID = 2185646531;
  final classType = "constructor";
  final ID = 1343122938;

  PrivacyKeyChatInvite();

  static PrivacyKeyChatInvite fromReader(BinaryReader reader) {
    var len;
    return PrivacyKeyChatInvite();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1343122938, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyKeyChatInvite{ID: $ID, }';
  }
}

class PrivacyKeyPhoneCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1030105979;
  static const SUBCLASS_OF_ID = 2185646531;
  final classType = "constructor";
  final ID = 1030105979;

  PrivacyKeyPhoneCall();

  static PrivacyKeyPhoneCall fromReader(BinaryReader reader) {
    var len;
    return PrivacyKeyPhoneCall();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1030105979, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyKeyPhoneCall{ID: $ID, }';
  }
}

class PrivacyKeyPhoneP2P extends BaseConstructor {
  static const CONSTRUCTOR_ID = 961092808;
  static const SUBCLASS_OF_ID = 2185646531;
  final classType = "constructor";
  final ID = 961092808;

  PrivacyKeyPhoneP2P();

  static PrivacyKeyPhoneP2P fromReader(BinaryReader reader) {
    var len;
    return PrivacyKeyPhoneP2P();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(961092808, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyKeyPhoneP2P{ID: $ID, }';
  }
}

class PrivacyKeyForwards extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1777096355;
  static const SUBCLASS_OF_ID = 2185646531;
  final classType = "constructor";
  final ID = 1777096355;

  PrivacyKeyForwards();

  static PrivacyKeyForwards fromReader(BinaryReader reader) {
    var len;
    return PrivacyKeyForwards();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1777096355, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyKeyForwards{ID: $ID, }';
  }
}

class PrivacyKeyProfilePhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2517966829;
  static const SUBCLASS_OF_ID = 2185646531;
  final classType = "constructor";
  final ID = 2517966829;

  PrivacyKeyProfilePhoto();

  static PrivacyKeyProfilePhoto fromReader(BinaryReader reader) {
    var len;
    return PrivacyKeyProfilePhoto();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2517966829, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyKeyProfilePhoto{ID: $ID, }';
  }
}

class PrivacyKeyPhoneNumber extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3516589165;
  static const SUBCLASS_OF_ID = 2185646531;
  final classType = "constructor";
  final ID = 3516589165;

  PrivacyKeyPhoneNumber();

  static PrivacyKeyPhoneNumber fromReader(BinaryReader reader) {
    var len;
    return PrivacyKeyPhoneNumber();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3516589165, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyKeyPhoneNumber{ID: $ID, }';
  }
}

class PrivacyKeyAddedByPhone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1124062251;
  static const SUBCLASS_OF_ID = 2185646531;
  final classType = "constructor";
  final ID = 1124062251;

  PrivacyKeyAddedByPhone();

  static PrivacyKeyAddedByPhone fromReader(BinaryReader reader) {
    var len;
    return PrivacyKeyAddedByPhone();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1124062251, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyKeyAddedByPhone{ID: $ID, }';
  }
}

class InputPrivacyValueAllowContacts extends BaseConstructor {
  static const CONSTRUCTOR_ID = 218751099;
  static const SUBCLASS_OF_ID = 1513843490;
  final classType = "constructor";
  final ID = 218751099;

  InputPrivacyValueAllowContacts();

  static InputPrivacyValueAllowContacts fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyValueAllowContacts();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(218751099, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyValueAllowContacts{ID: $ID, }';
  }
}

class InputPrivacyValueAllowAll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 407582158;
  static const SUBCLASS_OF_ID = 1513843490;
  final classType = "constructor";
  final ID = 407582158;

  InputPrivacyValueAllowAll();

  static InputPrivacyValueAllowAll fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyValueAllowAll();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(407582158, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyValueAllowAll{ID: $ID, }';
  }
}

class InputPrivacyValueAllowUsers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 320652927;
  static const SUBCLASS_OF_ID = 1513843490;
  final classType = "constructor";
  final ID = 320652927;
  List<dynamic> users;

  InputPrivacyValueAllowUsers({required this.users});

  static InputPrivacyValueAllowUsers fromReader(BinaryReader reader) {
    var len;
    var _vectorusers = reader.readInt();
    if (_vectorusers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> users = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      users.add(reader.tgReadObject());
    }
    return InputPrivacyValueAllowUsers(users: users);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(320652927, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.users!.length, 4, little: true, signed: true),
      this
          .users!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyValueAllowUsers{ID: $ID, users: $users}';
  }
}

class InputPrivacyValueDisallowContacts extends BaseConstructor {
  static const CONSTRUCTOR_ID = 195371015;
  static const SUBCLASS_OF_ID = 1513843490;
  final classType = "constructor";
  final ID = 195371015;

  InputPrivacyValueDisallowContacts();

  static InputPrivacyValueDisallowContacts fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyValueDisallowContacts();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(195371015, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyValueDisallowContacts{ID: $ID, }';
  }
}

class InputPrivacyValueDisallowAll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3597362889;
  static const SUBCLASS_OF_ID = 1513843490;
  final classType = "constructor";
  final ID = 3597362889;

  InputPrivacyValueDisallowAll();

  static InputPrivacyValueDisallowAll fromReader(BinaryReader reader) {
    var len;
    return InputPrivacyValueDisallowAll();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3597362889, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyValueDisallowAll{ID: $ID, }';
  }
}

class InputPrivacyValueDisallowUsers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2417034343;
  static const SUBCLASS_OF_ID = 1513843490;
  final classType = "constructor";
  final ID = 2417034343;
  List<dynamic> users;

  InputPrivacyValueDisallowUsers({required this.users});

  static InputPrivacyValueDisallowUsers fromReader(BinaryReader reader) {
    var len;
    var _vectorusers = reader.readInt();
    if (_vectorusers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> users = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      users.add(reader.tgReadObject());
    }
    return InputPrivacyValueDisallowUsers(users: users);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2417034343, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.users!.length, 4, little: true, signed: true),
      this
          .users!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyValueDisallowUsers{ID: $ID, users: $users}';
  }
}

class InputPrivacyValueAllowChatParticipants extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2215004623;
  static const SUBCLASS_OF_ID = 1513843490;
  final classType = "constructor";
  final ID = 2215004623;
  List<BigInt> chats;

  InputPrivacyValueAllowChatParticipants({required this.chats});

  static InputPrivacyValueAllowChatParticipants fromReader(
      BinaryReader reader) {
    var len;
    var _vectorchats = reader.readInt();
    if (_vectorchats != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> chats = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      chats.add(reader.readLong());
    }
    return InputPrivacyValueAllowChatParticipants(chats: chats);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2215004623, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.chats!.length, 4, little: true, signed: true),
      this
          .chats!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyValueAllowChatParticipants{ID: $ID, chats: $chats}';
  }
}

class InputPrivacyValueDisallowChatParticipants extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3914272646;
  static const SUBCLASS_OF_ID = 1513843490;
  final classType = "constructor";
  final ID = 3914272646;
  List<BigInt> chats;

  InputPrivacyValueDisallowChatParticipants({required this.chats});

  static InputPrivacyValueDisallowChatParticipants fromReader(
      BinaryReader reader) {
    var len;
    var _vectorchats = reader.readInt();
    if (_vectorchats != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> chats = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      chats.add(reader.readLong());
    }
    return InputPrivacyValueDisallowChatParticipants(chats: chats);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3914272646, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.chats!.length, 4, little: true, signed: true),
      this
          .chats!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPrivacyValueDisallowChatParticipants{ID: $ID, chats: $chats}';
  }
}

class PrivacyValueAllowContacts extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4294843308;
  static const SUBCLASS_OF_ID = 3954700912;
  final classType = "constructor";
  final ID = 4294843308;

  PrivacyValueAllowContacts();

  static PrivacyValueAllowContacts fromReader(BinaryReader reader) {
    var len;
    return PrivacyValueAllowContacts();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4294843308, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyValueAllowContacts{ID: $ID, }';
  }
}

class PrivacyValueAllowAll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1698855810;
  static const SUBCLASS_OF_ID = 3954700912;
  final classType = "constructor";
  final ID = 1698855810;

  PrivacyValueAllowAll();

  static PrivacyValueAllowAll fromReader(BinaryReader reader) {
    var len;
    return PrivacyValueAllowAll();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1698855810, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyValueAllowAll{ID: $ID, }';
  }
}

class PrivacyValueAllowUsers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3096469426;
  static const SUBCLASS_OF_ID = 3954700912;
  final classType = "constructor";
  final ID = 3096469426;
  List<BigInt> users;

  PrivacyValueAllowUsers({required this.users});

  static PrivacyValueAllowUsers fromReader(BinaryReader reader) {
    var len;
    var _vectorusers = reader.readInt();
    if (_vectorusers != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> users = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      users.add(reader.readLong());
    }
    return PrivacyValueAllowUsers(users: users);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3096469426, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.users!.length, 4, little: true, signed: true),
      this
          .users!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyValueAllowUsers{ID: $ID, users: $users}';
  }
}

class PrivacyValueDisallowContacts extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4169726490;
  static const SUBCLASS_OF_ID = 3954700912;
  final classType = "constructor";
  final ID = 4169726490;

  PrivacyValueDisallowContacts();

  static PrivacyValueDisallowContacts fromReader(BinaryReader reader) {
    var len;
    return PrivacyValueDisallowContacts();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4169726490, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyValueDisallowContacts{ID: $ID, }';
  }
}

class PrivacyValueDisallowAll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2339628899;
  static const SUBCLASS_OF_ID = 3954700912;
  final classType = "constructor";
  final ID = 2339628899;

  PrivacyValueDisallowAll();

  static PrivacyValueDisallowAll fromReader(BinaryReader reader) {
    var len;
    return PrivacyValueDisallowAll();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2339628899, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyValueDisallowAll{ID: $ID, }';
  }
}

class PrivacyValueDisallowUsers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3831632193;
  static const SUBCLASS_OF_ID = 3954700912;
  final classType = "constructor";
  final ID = 3831632193;
  List<BigInt> users;

  PrivacyValueDisallowUsers({required this.users});

  static PrivacyValueDisallowUsers fromReader(BinaryReader reader) {
    var len;
    var _vectorusers = reader.readInt();
    if (_vectorusers != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> users = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      users.add(reader.readLong());
    }
    return PrivacyValueDisallowUsers(users: users);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3831632193, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.users!.length, 4, little: true, signed: true),
      this
          .users!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyValueDisallowUsers{ID: $ID, users: $users}';
  }
}

class PrivacyValueAllowChatParticipants extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1796427406;
  static const SUBCLASS_OF_ID = 3954700912;
  final classType = "constructor";
  final ID = 1796427406;
  List<BigInt> chats;

  PrivacyValueAllowChatParticipants({required this.chats});

  static PrivacyValueAllowChatParticipants fromReader(BinaryReader reader) {
    var len;
    var _vectorchats = reader.readInt();
    if (_vectorchats != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> chats = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      chats.add(reader.readLong());
    }
    return PrivacyValueAllowChatParticipants(chats: chats);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1796427406, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.chats!.length, 4, little: true, signed: true),
      this
          .chats!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyValueAllowChatParticipants{ID: $ID, chats: $chats}';
  }
}

class PrivacyValueDisallowChatParticipants extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1103656293;
  static const SUBCLASS_OF_ID = 3954700912;
  final classType = "constructor";
  final ID = 1103656293;
  List<BigInt> chats;

  PrivacyValueDisallowChatParticipants({required this.chats});

  static PrivacyValueDisallowChatParticipants fromReader(BinaryReader reader) {
    var len;
    var _vectorchats = reader.readInt();
    if (_vectorchats != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> chats = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      chats.add(reader.readLong());
    }
    return PrivacyValueDisallowChatParticipants(chats: chats);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1103656293, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.chats!.length, 4, little: true, signed: true),
      this
          .chats!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PrivacyValueDisallowChatParticipants{ID: $ID, chats: $chats}';
  }
}

class AccountDaysTTL extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3100684255;
  static const SUBCLASS_OF_ID = 3131284872;
  final classType = "constructor";
  final ID = 3100684255;
  int days;

  AccountDaysTTL({required this.days});

  static AccountDaysTTL fromReader(BinaryReader reader) {
    var len;
    var days = reader.readInt();
    return AccountDaysTTL(days: days);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3100684255, 4),
      readBufferFromBigInt(this.days, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'AccountDaysTTL{ID: $ID, days: $days}';
  }
}

class DocumentAttributeImageSize extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1815593308;
  static const SUBCLASS_OF_ID = 4146719643;
  final classType = "constructor";
  final ID = 1815593308;
  int w;
  int h;

  DocumentAttributeImageSize({required this.w, required this.h});

  static DocumentAttributeImageSize fromReader(BinaryReader reader) {
    var len;
    var w = reader.readInt();
    var h = reader.readInt();
    return DocumentAttributeImageSize(w: w, h: h);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1815593308, 4),
      readBufferFromBigInt(this.w, 4, little: true, signed: true),
      readBufferFromBigInt(this.h, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DocumentAttributeImageSize{ID: $ID, w: $w, h: $h}';
  }
}

class DocumentAttributeAnimated extends BaseConstructor {
  static const CONSTRUCTOR_ID = 297109817;
  static const SUBCLASS_OF_ID = 4146719643;
  final classType = "constructor";
  final ID = 297109817;

  DocumentAttributeAnimated();

  static DocumentAttributeAnimated fromReader(BinaryReader reader) {
    var len;
    return DocumentAttributeAnimated();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(297109817, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DocumentAttributeAnimated{ID: $ID, }';
  }
}

class DocumentAttributeSticker extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1662637586;
  static const SUBCLASS_OF_ID = 4146719643;
  final classType = "constructor";
  final ID = 1662637586;
  bool? mask;
  String alt;
  var stickerset;
  var maskCoords;

  DocumentAttributeSticker(
      {required this.mask,
      required this.alt,
      required this.stickerset,
      required this.maskCoords});

  static DocumentAttributeSticker fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final mask = (flags & 2) == 2;
    var alt = reader.tgReadString();
    var stickerset = reader.tgReadObject();
    var maskCoords;
    if ((flags & 1) == 1) {
      maskCoords = reader.tgReadObject();
    } else {
      maskCoords = null;
    }
    return DocumentAttributeSticker(
        mask: mask, alt: alt, stickerset: stickerset, maskCoords: maskCoords);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1662637586, 4),
      [0, 0, 0, 0],
      serializeBytes(this.alt),
      (this.stickerset.getBytes() as List<int>),
      (this.maskCoords == null || this.maskCoords == false)
          ? List<int>.empty()
          : [(this.maskCoords.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DocumentAttributeSticker{ID: $ID, mask: $mask, alt: $alt, stickerset: $stickerset, maskCoords: $maskCoords}';
  }
}

class DocumentAttributeVideo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 250621158;
  static const SUBCLASS_OF_ID = 4146719643;
  final classType = "constructor";
  final ID = 250621158;
  bool? roundMessage;
  bool? supportsStreaming;
  int duration;
  int w;
  int h;

  DocumentAttributeVideo(
      {required this.roundMessage,
      required this.supportsStreaming,
      required this.duration,
      required this.w,
      required this.h});

  static DocumentAttributeVideo fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final roundMessage = (flags & 1) == 1;
    final supportsStreaming = (flags & 2) == 2;
    var duration = reader.readInt();
    var w = reader.readInt();
    var h = reader.readInt();
    return DocumentAttributeVideo(
        roundMessage: roundMessage,
        supportsStreaming: supportsStreaming,
        duration: duration,
        w: w,
        h: h);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(250621158, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.duration, 4, little: true, signed: true),
      readBufferFromBigInt(this.w, 4, little: true, signed: true),
      readBufferFromBigInt(this.h, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DocumentAttributeVideo{ID: $ID, roundMessage: $roundMessage, supportsStreaming: $supportsStreaming, duration: $duration, w: $w, h: $h}';
  }
}

class DocumentAttributeAudio extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2555574726;
  static const SUBCLASS_OF_ID = 4146719643;
  final classType = "constructor";
  final ID = 2555574726;
  bool? voice;
  int duration;
  String? title;
  String? performer;
  List<int>? waveform;

  DocumentAttributeAudio(
      {required this.voice,
      required this.duration,
      required this.title,
      required this.performer,
      required this.waveform});

  static DocumentAttributeAudio fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final voice = (flags & 1024) == 1024;
    var duration = reader.readInt();
    var title;
    if ((flags & 1) == 1) {
      title = reader.tgReadString();
    } else {
      title = null;
    }
    var performer;
    if ((flags & 2) == 2) {
      performer = reader.tgReadString();
    } else {
      performer = null;
    }
    var waveform;
    if ((flags & 4) == 4) {
      waveform = reader.tgReadBytes();
    } else {
      waveform = null;
    }
    return DocumentAttributeAudio(
        voice: voice,
        duration: duration,
        title: title,
        performer: performer,
        waveform: waveform);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2555574726, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.duration, 4, little: true, signed: true),
      (this.title == null || this.title == false)
          ? List<int>.empty()
          : [serializeBytes(this.title)].expand((element) => element).toList(),
      (this.performer == null || this.performer == false)
          ? List<int>.empty()
          : [serializeBytes(this.performer)]
              .expand((element) => element)
              .toList(),
      (this.waveform == null || this.waveform == false)
          ? List<int>.empty()
          : [serializeBytes(this.waveform)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DocumentAttributeAudio{ID: $ID, voice: $voice, duration: $duration, title: $title, performer: $performer, waveform: $waveform}';
  }
}

class DocumentAttributeFilename extends BaseConstructor {
  static const CONSTRUCTOR_ID = 358154344;
  static const SUBCLASS_OF_ID = 4146719643;
  final classType = "constructor";
  final ID = 358154344;
  String fileName;

  DocumentAttributeFilename({required this.fileName});

  static DocumentAttributeFilename fromReader(BinaryReader reader) {
    var len;
    var fileName = reader.tgReadString();
    return DocumentAttributeFilename(fileName: fileName);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(358154344, 4),
      serializeBytes(this.fileName),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DocumentAttributeFilename{ID: $ID, fileName: $fileName}';
  }
}

class DocumentAttributeHasStickers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2550256375;
  static const SUBCLASS_OF_ID = 4146719643;
  final classType = "constructor";
  final ID = 2550256375;

  DocumentAttributeHasStickers();

  static DocumentAttributeHasStickers fromReader(BinaryReader reader) {
    var len;
    return DocumentAttributeHasStickers();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2550256375, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DocumentAttributeHasStickers{ID: $ID, }';
  }
}

class StickerPack extends BaseConstructor {
  static const CONSTRUCTOR_ID = 313694676;
  static const SUBCLASS_OF_ID = 2683282644;
  final classType = "constructor";
  final ID = 313694676;
  String emoticon;
  List<BigInt> documents;

  StickerPack({required this.emoticon, required this.documents});

  static StickerPack fromReader(BinaryReader reader) {
    var len;
    var emoticon = reader.tgReadString();
    var _vectordocuments = reader.readInt();
    if (_vectordocuments != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> documents = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      documents.add(reader.readLong());
    }
    return StickerPack(emoticon: emoticon, documents: documents);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(313694676, 4),
      serializeBytes(this.emoticon),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.documents!.length, 4,
          little: true, signed: true),
      this
          .documents!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StickerPack{ID: $ID, emoticon: $emoticon, documents: $documents}';
  }
}

class WebPageEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3943987176;
  static const SUBCLASS_OF_ID = 1437168769;
  final classType = "constructor";
  final ID = 3943987176;
  BigInt id;

  WebPageEmpty({required this.id});

  static WebPageEmpty fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    return WebPageEmpty(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3943987176, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WebPageEmpty{ID: $ID, id: $id}';
  }
}

class WebPagePending extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3313949212;
  static const SUBCLASS_OF_ID = 1437168769;
  final classType = "constructor";
  final ID = 3313949212;
  BigInt id;
  int date;

  WebPagePending({required this.id, required this.date});

  static WebPagePending fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var date = reader.readInt();
    return WebPagePending(id: id, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3313949212, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WebPagePending{ID: $ID, id: $id, date: $date}';
  }
}

class WebPage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3902555570;
  static const SUBCLASS_OF_ID = 1437168769;
  final classType = "constructor";
  final ID = 3902555570;
  BigInt id;
  String url;
  String displayUrl;
  int hash;
  String? type;
  String? siteName;
  String? title;
  String? description;
  var photo;
  String? embedUrl;
  String? embedType;
  int? embedWidth;
  int? embedHeight;
  int? duration;
  String? author;
  var document;
  var cachedPage;
  List<dynamic>? attributes;

  WebPage(
      {required this.id,
      required this.url,
      required this.displayUrl,
      required this.hash,
      required this.type,
      required this.siteName,
      required this.title,
      required this.description,
      required this.photo,
      required this.embedUrl,
      required this.embedType,
      required this.embedWidth,
      required this.embedHeight,
      required this.duration,
      required this.author,
      required this.document,
      required this.cachedPage,
      required this.attributes});

  static WebPage fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.readLong();
    var url = reader.tgReadString();
    var displayUrl = reader.tgReadString();
    var hash = reader.readInt();
    var type;
    if ((flags & 1) == 1) {
      type = reader.tgReadString();
    } else {
      type = null;
    }
    var siteName;
    if ((flags & 2) == 2) {
      siteName = reader.tgReadString();
    } else {
      siteName = null;
    }
    var title;
    if ((flags & 4) == 4) {
      title = reader.tgReadString();
    } else {
      title = null;
    }
    var description;
    if ((flags & 8) == 8) {
      description = reader.tgReadString();
    } else {
      description = null;
    }
    var photo;
    if ((flags & 16) == 16) {
      photo = reader.tgReadObject();
    } else {
      photo = null;
    }
    var embedUrl;
    if ((flags & 32) == 32) {
      embedUrl = reader.tgReadString();
    } else {
      embedUrl = null;
    }
    var embedType;
    if ((flags & 32) == 32) {
      embedType = reader.tgReadString();
    } else {
      embedType = null;
    }
    var embedWidth;
    if ((flags & 64) == 64) {
      embedWidth = reader.readInt();
    } else {
      embedWidth = null;
    }
    var embedHeight;
    if ((flags & 64) == 64) {
      embedHeight = reader.readInt();
    } else {
      embedHeight = null;
    }
    var duration;
    if ((flags & 128) == 128) {
      duration = reader.readInt();
    } else {
      duration = null;
    }
    var author;
    if ((flags & 256) == 256) {
      author = reader.tgReadString();
    } else {
      author = null;
    }
    var document;
    if ((flags & 512) == 512) {
      document = reader.tgReadObject();
    } else {
      document = null;
    }
    var cachedPage;
    if ((flags & 1024) == 1024) {
      cachedPage = reader.tgReadObject();
    } else {
      cachedPage = null;
    }
    var attributes;
    if ((flags & 4096) == 4096) {
      var _vectorattributes = reader.readInt();
      if (_vectorattributes != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> attributes = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        attributes.add(reader.tgReadObject());
      }
    } else {
      attributes = null;
    }
    return WebPage(
        id: id,
        url: url,
        displayUrl: displayUrl,
        hash: hash,
        type: type,
        siteName: siteName,
        title: title,
        description: description,
        photo: photo,
        embedUrl: embedUrl,
        embedType: embedType,
        embedWidth: embedWidth,
        embedHeight: embedHeight,
        duration: duration,
        author: author,
        document: document,
        cachedPage: cachedPage,
        attributes: attributes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3902555570, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      serializeBytes(this.url),
      serializeBytes(this.displayUrl),
      readBufferFromBigInt(this.hash, 4, little: true, signed: true),
      (this.type == null || this.type == false)
          ? List<int>.empty()
          : [serializeBytes(this.type)].expand((element) => element).toList(),
      (this.siteName == null || this.siteName == false)
          ? List<int>.empty()
          : [serializeBytes(this.siteName)]
              .expand((element) => element)
              .toList(),
      (this.title == null || this.title == false)
          ? List<int>.empty()
          : [serializeBytes(this.title)].expand((element) => element).toList(),
      (this.description == null || this.description == false)
          ? List<int>.empty()
          : [serializeBytes(this.description)]
              .expand((element) => element)
              .toList(),
      (this.photo == null || this.photo == false)
          ? List<int>.empty()
          : [(this.photo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.embedUrl == null || this.embedUrl == false)
          ? List<int>.empty()
          : [serializeBytes(this.embedUrl)]
              .expand((element) => element)
              .toList(),
      (this.embedType == null || this.embedType == false)
          ? List<int>.empty()
          : [serializeBytes(this.embedType)]
              .expand((element) => element)
              .toList(),
      (this.embedWidth == null || this.embedWidth == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.embedWidth, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.embedHeight == null || this.embedHeight == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.embedHeight, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.duration == null || this.duration == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.duration, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.author == null || this.author == false)
          ? List<int>.empty()
          : [serializeBytes(this.author)].expand((element) => element).toList(),
      (this.document == null || this.document == false)
          ? List<int>.empty()
          : [(this.document.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.cachedPage == null || this.cachedPage == false)
          ? List<int>.empty()
          : [(this.cachedPage.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.attributes == null || this.attributes == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.attributes!.length, 4,
                  little: true, signed: true),
              this
                  .attributes!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WebPage{ID: $ID, id: $id, url: $url, displayUrl: $displayUrl, hash: $hash, type: $type, siteName: $siteName, title: $title, description: $description, photo: $photo, embedUrl: $embedUrl, embedType: $embedType, embedWidth: $embedWidth, embedHeight: $embedHeight, duration: $duration, author: $author, document: $document, cachedPage: $cachedPage, attributes: $attributes}';
  }
}

class WebPageNotModified extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1930545681;
  static const SUBCLASS_OF_ID = 1437168769;
  final classType = "constructor";
  final ID = 1930545681;
  int? cachedPageViews;

  WebPageNotModified({required this.cachedPageViews});

  static WebPageNotModified fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var cachedPageViews;
    if ((flags & 1) == 1) {
      cachedPageViews = reader.readInt();
    } else {
      cachedPageViews = null;
    }
    return WebPageNotModified(cachedPageViews: cachedPageViews);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1930545681, 4),
      [0, 0, 0, 0],
      (this.cachedPageViews == null || this.cachedPageViews == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.cachedPageViews, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WebPageNotModified{ID: $ID, cachedPageViews: $cachedPageViews}';
  }
}

class Authorization extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2902578717;
  static const SUBCLASS_OF_ID = 3373514778;
  final classType = "constructor";
  final ID = 2902578717;
  bool? current;
  bool? officialApp;
  bool? passwordPending;
  bool? encryptedRequestsDisabled;
  bool? callRequestsDisabled;
  BigInt hash;
  String deviceModel;
  String platform;
  String systemVersion;
  int apiId;
  String appName;
  String appVersion;
  int dateCreated;
  int dateActive;
  String ip;
  String country;
  String region;

  Authorization(
      {required this.current,
      required this.officialApp,
      required this.passwordPending,
      required this.encryptedRequestsDisabled,
      required this.callRequestsDisabled,
      required this.hash,
      required this.deviceModel,
      required this.platform,
      required this.systemVersion,
      required this.apiId,
      required this.appName,
      required this.appVersion,
      required this.dateCreated,
      required this.dateActive,
      required this.ip,
      required this.country,
      required this.region});

  static Authorization fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final current = (flags & 1) == 1;
    final officialApp = (flags & 2) == 2;
    final passwordPending = (flags & 4) == 4;
    final encryptedRequestsDisabled = (flags & 8) == 8;
    final callRequestsDisabled = (flags & 16) == 16;
    var hash = reader.readLong();
    var deviceModel = reader.tgReadString();
    var platform = reader.tgReadString();
    var systemVersion = reader.tgReadString();
    var apiId = reader.readInt();
    var appName = reader.tgReadString();
    var appVersion = reader.tgReadString();
    var dateCreated = reader.readInt();
    var dateActive = reader.readInt();
    var ip = reader.tgReadString();
    var country = reader.tgReadString();
    var region = reader.tgReadString();
    return Authorization(
        current: current,
        officialApp: officialApp,
        passwordPending: passwordPending,
        encryptedRequestsDisabled: encryptedRequestsDisabled,
        callRequestsDisabled: callRequestsDisabled,
        hash: hash,
        deviceModel: deviceModel,
        platform: platform,
        systemVersion: systemVersion,
        apiId: apiId,
        appName: appName,
        appVersion: appVersion,
        dateCreated: dateCreated,
        dateActive: dateActive,
        ip: ip,
        country: country,
        region: region);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2902578717, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.hash, 8, little: true, signed: true),
      serializeBytes(this.deviceModel),
      serializeBytes(this.platform),
      serializeBytes(this.systemVersion),
      readBufferFromBigInt(this.apiId, 4, little: true, signed: true),
      serializeBytes(this.appName),
      serializeBytes(this.appVersion),
      readBufferFromBigInt(this.dateCreated, 4, little: true, signed: true),
      readBufferFromBigInt(this.dateActive, 4, little: true, signed: true),
      serializeBytes(this.ip),
      serializeBytes(this.country),
      serializeBytes(this.region),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Authorization{ID: $ID, current: $current, officialApp: $officialApp, passwordPending: $passwordPending, encryptedRequestsDisabled: $encryptedRequestsDisabled, callRequestsDisabled: $callRequestsDisabled, hash: $hash, deviceModel: $deviceModel, platform: $platform, systemVersion: $systemVersion, apiId: $apiId, appName: $appName, appVersion: $appVersion, dateCreated: $dateCreated, dateActive: $dateActive, ip: $ip, country: $country, region: $region}';
  }
}

class ReceivedNotifyMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2743383929;
  static const SUBCLASS_OF_ID = 2841786398;
  final classType = "constructor";
  final ID = 2743383929;
  int id;
  int flags;

  ReceivedNotifyMessage({required this.id, required this.flags});

  static ReceivedNotifyMessage fromReader(BinaryReader reader) {
    var len;
    var id = reader.readInt();
    var flags = reader.readInt();
    return ReceivedNotifyMessage(id: id, flags: flags);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2743383929, 4),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.flags, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ReceivedNotifyMessage{ID: $ID, id: $id, flags: $flags}';
  }
}

class ChatInviteExported extends BaseConstructor {
  static const CONSTRUCTOR_ID = 179611673;
  static const SUBCLASS_OF_ID = 3027536472;
  final classType = "constructor";
  final ID = 179611673;
  bool? revoked;
  bool? permanent;
  bool? requestNeeded;
  String link;
  BigInt adminId;
  int date;
  int? startDate;
  int? expireDate;
  int? usageLimit;
  int? usage;
  int? requested;
  String? title;

  ChatInviteExported(
      {required this.revoked,
      required this.permanent,
      required this.requestNeeded,
      required this.link,
      required this.adminId,
      required this.date,
      required this.startDate,
      required this.expireDate,
      required this.usageLimit,
      required this.usage,
      required this.requested,
      required this.title});

  static ChatInviteExported fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final revoked = (flags & 1) == 1;
    final permanent = (flags & 32) == 32;
    final requestNeeded = (flags & 64) == 64;
    var link = reader.tgReadString();
    var adminId = reader.readLong();
    var date = reader.readInt();
    var startDate;
    if ((flags & 16) == 16) {
      startDate = reader.readInt();
    } else {
      startDate = null;
    }
    var expireDate;
    if ((flags & 2) == 2) {
      expireDate = reader.readInt();
    } else {
      expireDate = null;
    }
    var usageLimit;
    if ((flags & 4) == 4) {
      usageLimit = reader.readInt();
    } else {
      usageLimit = null;
    }
    var usage;
    if ((flags & 8) == 8) {
      usage = reader.readInt();
    } else {
      usage = null;
    }
    var requested;
    if ((flags & 128) == 128) {
      requested = reader.readInt();
    } else {
      requested = null;
    }
    var title;
    if ((flags & 256) == 256) {
      title = reader.tgReadString();
    } else {
      title = null;
    }
    return ChatInviteExported(
        revoked: revoked,
        permanent: permanent,
        requestNeeded: requestNeeded,
        link: link,
        adminId: adminId,
        date: date,
        startDate: startDate,
        expireDate: expireDate,
        usageLimit: usageLimit,
        usage: usage,
        requested: requested,
        title: title);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(179611673, 4),
      [0, 0, 0, 0],
      serializeBytes(this.link),
      readBufferFromBigInt(this.adminId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.startDate == null || this.startDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.startDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.expireDate == null || this.expireDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.expireDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.usageLimit == null || this.usageLimit == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.usageLimit, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.usage == null || this.usage == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.usage, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.requested == null || this.requested == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.requested, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.title == null || this.title == false)
          ? List<int>.empty()
          : [serializeBytes(this.title)].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatInviteExported{ID: $ID, revoked: $revoked, permanent: $permanent, requestNeeded: $requestNeeded, link: $link, adminId: $adminId, date: $date, startDate: $startDate, expireDate: $expireDate, usageLimit: $usageLimit, usage: $usage, requested: $requested, title: $title}';
  }
}

class ChatInviteAlready extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1516793212;
  static const SUBCLASS_OF_ID = 72750902;
  final classType = "constructor";
  final ID = 1516793212;
  var chat;

  ChatInviteAlready({required this.chat});

  static ChatInviteAlready fromReader(BinaryReader reader) {
    var len;
    var chat = reader.tgReadObject();
    return ChatInviteAlready(chat: chat);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1516793212, 4),
      (this.chat.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatInviteAlready{ID: $ID, chat: $chat}';
  }
}

class ChatInvite extends BaseConstructor {
  static const CONSTRUCTOR_ID = 806110401;
  static const SUBCLASS_OF_ID = 72750902;
  final classType = "constructor";
  final ID = 806110401;
  bool? channel;
  bool? broadcast;
  bool? public;
  bool? megagroup;
  bool? requestNeeded;
  String title;
  String? about;
  var photo;
  int participantsCount;
  List<dynamic>? participants;

  ChatInvite(
      {required this.channel,
      required this.broadcast,
      required this.public,
      required this.megagroup,
      required this.requestNeeded,
      required this.title,
      required this.about,
      required this.photo,
      required this.participantsCount,
      required this.participants});

  static ChatInvite fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final channel = (flags & 1) == 1;
    final broadcast = (flags & 2) == 2;
    final public = (flags & 4) == 4;
    final megagroup = (flags & 8) == 8;
    final requestNeeded = (flags & 64) == 64;
    var title = reader.tgReadString();
    var about;
    if ((flags & 32) == 32) {
      about = reader.tgReadString();
    } else {
      about = null;
    }
    var photo = reader.tgReadObject();
    var participantsCount = reader.readInt();
    var participants;
    if ((flags & 16) == 16) {
      var _vectorparticipants = reader.readInt();
      if (_vectorparticipants != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> participants = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        participants.add(reader.tgReadObject());
      }
    } else {
      participants = null;
    }
    return ChatInvite(
        channel: channel,
        broadcast: broadcast,
        public: public,
        megagroup: megagroup,
        requestNeeded: requestNeeded,
        title: title,
        about: about,
        photo: photo,
        participantsCount: participantsCount,
        participants: participants);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(806110401, 4),
      [0, 0, 0, 0],
      serializeBytes(this.title),
      (this.about == null || this.about == false)
          ? List<int>.empty()
          : [serializeBytes(this.about)].expand((element) => element).toList(),
      (this.photo.getBytes() as List<int>),
      readBufferFromBigInt(this.participantsCount, 4,
          little: true, signed: true),
      (this.participants == null || this.participants == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.participants!.length, 4,
                  little: true, signed: true),
              this
                  .participants!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatInvite{ID: $ID, channel: $channel, broadcast: $broadcast, public: $public, megagroup: $megagroup, requestNeeded: $requestNeeded, title: $title, about: $about, photo: $photo, participantsCount: $participantsCount, participants: $participants}';
  }
}

class ChatInvitePeek extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1634294960;
  static const SUBCLASS_OF_ID = 72750902;
  final classType = "constructor";
  final ID = 1634294960;
  var chat;
  int expires;

  ChatInvitePeek({required this.chat, required this.expires});

  static ChatInvitePeek fromReader(BinaryReader reader) {
    var len;
    var chat = reader.tgReadObject();
    var expires = reader.readInt();
    return ChatInvitePeek(chat: chat, expires: expires);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1634294960, 4),
      (this.chat.getBytes() as List<int>),
      readBufferFromBigInt(this.expires, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatInvitePeek{ID: $ID, chat: $chat, expires: $expires}';
  }
}

class InputStickerSetEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4290128789;
  static const SUBCLASS_OF_ID = 1034127786;
  final classType = "constructor";
  final ID = 4290128789;

  InputStickerSetEmpty();

  static InputStickerSetEmpty fromReader(BinaryReader reader) {
    var len;
    return InputStickerSetEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4290128789, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickerSetEmpty{ID: $ID, }';
  }
}

class InputStickerSetID extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2649203305;
  static const SUBCLASS_OF_ID = 1034127786;
  final classType = "constructor";
  final ID = 2649203305;
  BigInt id;
  BigInt accessHash;

  InputStickerSetID({required this.id, required this.accessHash});

  static InputStickerSetID fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputStickerSetID(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2649203305, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickerSetID{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class InputStickerSetShortName extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2250033312;
  static const SUBCLASS_OF_ID = 1034127786;
  final classType = "constructor";
  final ID = 2250033312;
  String shortName;

  InputStickerSetShortName({required this.shortName});

  static InputStickerSetShortName fromReader(BinaryReader reader) {
    var len;
    var shortName = reader.tgReadString();
    return InputStickerSetShortName(shortName: shortName);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2250033312, 4),
      serializeBytes(this.shortName),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickerSetShortName{ID: $ID, shortName: $shortName}';
  }
}

class InputStickerSetAnimatedEmoji extends BaseConstructor {
  static const CONSTRUCTOR_ID = 42402760;
  static const SUBCLASS_OF_ID = 1034127786;
  final classType = "constructor";
  final ID = 42402760;

  InputStickerSetAnimatedEmoji();

  static InputStickerSetAnimatedEmoji fromReader(BinaryReader reader) {
    var len;
    return InputStickerSetAnimatedEmoji();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(42402760, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickerSetAnimatedEmoji{ID: $ID, }';
  }
}

class InputStickerSetDice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3867103758;
  static const SUBCLASS_OF_ID = 1034127786;
  final classType = "constructor";
  final ID = 3867103758;
  String emoticon;

  InputStickerSetDice({required this.emoticon});

  static InputStickerSetDice fromReader(BinaryReader reader) {
    var len;
    var emoticon = reader.tgReadString();
    return InputStickerSetDice(emoticon: emoticon);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3867103758, 4),
      serializeBytes(this.emoticon),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickerSetDice{ID: $ID, emoticon: $emoticon}';
  }
}

class InputStickerSetAnimatedEmojiAnimations extends BaseConstructor {
  static const CONSTRUCTOR_ID = 215889721;
  static const SUBCLASS_OF_ID = 1034127786;
  final classType = "constructor";
  final ID = 215889721;

  InputStickerSetAnimatedEmojiAnimations();

  static InputStickerSetAnimatedEmojiAnimations fromReader(
      BinaryReader reader) {
    var len;
    return InputStickerSetAnimatedEmojiAnimations();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(215889721, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickerSetAnimatedEmojiAnimations{ID: $ID, }';
  }
}

class StickerSet extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3621724538;
  static const SUBCLASS_OF_ID = 3134455697;
  final classType = "constructor";
  final ID = 3621724538;
  bool? archived;
  bool? official;
  bool? masks;
  bool? animated;
  bool? gifs;
  int? installedDate;
  BigInt id;
  BigInt accessHash;
  String title;
  String shortName;
  List<dynamic>? thumbs;
  int? thumbDcId;
  int? thumbVersion;
  int count;
  int hash;

  StickerSet(
      {required this.archived,
      required this.official,
      required this.masks,
      required this.animated,
      required this.gifs,
      required this.installedDate,
      required this.id,
      required this.accessHash,
      required this.title,
      required this.shortName,
      required this.thumbs,
      required this.thumbDcId,
      required this.thumbVersion,
      required this.count,
      required this.hash});

  static StickerSet fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final archived = (flags & 2) == 2;
    final official = (flags & 4) == 4;
    final masks = (flags & 8) == 8;
    final animated = (flags & 32) == 32;
    final gifs = (flags & 64) == 64;
    var installedDate;
    if ((flags & 1) == 1) {
      installedDate = reader.readInt();
    } else {
      installedDate = null;
    }
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var title = reader.tgReadString();
    var shortName = reader.tgReadString();
    var thumbs;
    if ((flags & 16) == 16) {
      var _vectorthumbs = reader.readInt();
      if (_vectorthumbs != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> thumbs = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        thumbs.add(reader.tgReadObject());
      }
    } else {
      thumbs = null;
    }
    var thumbDcId;
    if ((flags & 16) == 16) {
      thumbDcId = reader.readInt();
    } else {
      thumbDcId = null;
    }
    var thumbVersion;
    if ((flags & 16) == 16) {
      thumbVersion = reader.readInt();
    } else {
      thumbVersion = null;
    }
    var count = reader.readInt();
    var hash = reader.readInt();
    return StickerSet(
        archived: archived,
        official: official,
        masks: masks,
        animated: animated,
        gifs: gifs,
        installedDate: installedDate,
        id: id,
        accessHash: accessHash,
        title: title,
        shortName: shortName,
        thumbs: thumbs,
        thumbDcId: thumbDcId,
        thumbVersion: thumbVersion,
        count: count,
        hash: hash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3621724538, 4),
      [0, 0, 0, 0],
      (this.installedDate == null || this.installedDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.installedDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.title),
      serializeBytes(this.shortName),
      (this.thumbs == null || this.thumbs == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.thumbs!.length, 4,
                  little: true, signed: true),
              this
                  .thumbs!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.thumbDcId == null || this.thumbDcId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.thumbDcId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.thumbVersion == null || this.thumbVersion == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.thumbVersion, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.count, 4, little: true, signed: true),
      readBufferFromBigInt(this.hash, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StickerSet{ID: $ID, archived: $archived, official: $official, masks: $masks, animated: $animated, gifs: $gifs, installedDate: $installedDate, id: $id, accessHash: $accessHash, title: $title, shortName: $shortName, thumbs: $thumbs, thumbDcId: $thumbDcId, thumbVersion: $thumbVersion, count: $count, hash: $hash}';
  }
}

class BotCommand extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3262826695;
  static const SUBCLASS_OF_ID = 236872386;
  final classType = "constructor";
  final ID = 3262826695;
  String command;
  String description;

  BotCommand({required this.command, required this.description});

  static BotCommand fromReader(BinaryReader reader) {
    var len;
    var command = reader.tgReadString();
    var description = reader.tgReadString();
    return BotCommand(command: command, description: description);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3262826695, 4),
      serializeBytes(this.command),
      serializeBytes(this.description),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotCommand{ID: $ID, command: $command, description: $description}';
  }
}

class BotInfo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 460632885;
  static const SUBCLASS_OF_ID = 4059496923;
  final classType = "constructor";
  final ID = 460632885;
  BigInt userId;
  String description;
  List<dynamic> commands;

  BotInfo(
      {required this.userId,
      required this.description,
      required this.commands});

  static BotInfo fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var description = reader.tgReadString();
    var _vectorcommands = reader.readInt();
    if (_vectorcommands != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> commands = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      commands.add(reader.tgReadObject());
    }
    return BotInfo(
        userId: userId, description: description, commands: commands);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(460632885, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.description),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.commands!.length, 4,
          little: true, signed: true),
      this
          .commands!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotInfo{ID: $ID, userId: $userId, description: $description, commands: $commands}';
  }
}

class KeyboardButton extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2734311552;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 2734311552;
  String text;

  KeyboardButton({required this.text});

  static KeyboardButton fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    return KeyboardButton(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2734311552, 4),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButton{ID: $ID, text: $text}';
  }
}

class KeyboardButtonUrl extends BaseConstructor {
  static const CONSTRUCTOR_ID = 629866245;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 629866245;
  String text;
  String url;

  KeyboardButtonUrl({required this.text, required this.url});

  static KeyboardButtonUrl fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    var url = reader.tgReadString();
    return KeyboardButtonUrl(text: text, url: url);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(629866245, 4),
      serializeBytes(this.text),
      serializeBytes(this.url),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonUrl{ID: $ID, text: $text, url: $url}';
  }
}

class KeyboardButtonCallback extends BaseConstructor {
  static const CONSTRUCTOR_ID = 901503851;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 901503851;
  bool? requiresPassword;
  String text;
  List<int> data;

  KeyboardButtonCallback(
      {required this.requiresPassword, required this.text, required this.data});

  static KeyboardButtonCallback fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final requiresPassword = (flags & 1) == 1;
    var text = reader.tgReadString();
    var data = reader.tgReadBytes();
    return KeyboardButtonCallback(
        requiresPassword: requiresPassword, text: text, data: data);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(901503851, 4),
      [0, 0, 0, 0],
      serializeBytes(this.text),
      serializeBytes(this.data),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonCallback{ID: $ID, requiresPassword: $requiresPassword, text: $text, data: $data}';
  }
}

class KeyboardButtonRequestPhone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2976541737;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 2976541737;
  String text;

  KeyboardButtonRequestPhone({required this.text});

  static KeyboardButtonRequestPhone fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    return KeyboardButtonRequestPhone(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2976541737, 4),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonRequestPhone{ID: $ID, text: $text}';
  }
}

class KeyboardButtonRequestGeoLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4235815743;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 4235815743;
  String text;

  KeyboardButtonRequestGeoLocation({required this.text});

  static KeyboardButtonRequestGeoLocation fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    return KeyboardButtonRequestGeoLocation(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4235815743, 4),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonRequestGeoLocation{ID: $ID, text: $text}';
  }
}

class KeyboardButtonSwitchInline extends BaseConstructor {
  static const CONSTRUCTOR_ID = 90744648;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 90744648;
  bool? samePeer;
  String text;
  String query;

  KeyboardButtonSwitchInline(
      {required this.samePeer, required this.text, required this.query});

  static KeyboardButtonSwitchInline fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final samePeer = (flags & 1) == 1;
    var text = reader.tgReadString();
    var query = reader.tgReadString();
    return KeyboardButtonSwitchInline(
        samePeer: samePeer, text: text, query: query);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(90744648, 4),
      [0, 0, 0, 0],
      serializeBytes(this.text),
      serializeBytes(this.query),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonSwitchInline{ID: $ID, samePeer: $samePeer, text: $text, query: $query}';
  }
}

class KeyboardButtonGame extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1358175439;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 1358175439;
  String text;

  KeyboardButtonGame({required this.text});

  static KeyboardButtonGame fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    return KeyboardButtonGame(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1358175439, 4),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonGame{ID: $ID, text: $text}';
  }
}

class KeyboardButtonBuy extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2950250427;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 2950250427;
  String text;

  KeyboardButtonBuy({required this.text});

  static KeyboardButtonBuy fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    return KeyboardButtonBuy(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2950250427, 4),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonBuy{ID: $ID, text: $text}';
  }
}

class KeyboardButtonUrlAuth extends BaseConstructor {
  static const CONSTRUCTOR_ID = 280464681;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 280464681;
  String text;
  String? fwdText;
  String url;
  int buttonId;

  KeyboardButtonUrlAuth(
      {required this.text,
      required this.fwdText,
      required this.url,
      required this.buttonId});

  static KeyboardButtonUrlAuth fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var text = reader.tgReadString();
    var fwdText;
    if ((flags & 1) == 1) {
      fwdText = reader.tgReadString();
    } else {
      fwdText = null;
    }
    var url = reader.tgReadString();
    var buttonId = reader.readInt();
    return KeyboardButtonUrlAuth(
        text: text, fwdText: fwdText, url: url, buttonId: buttonId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(280464681, 4),
      [0, 0, 0, 0],
      serializeBytes(this.text),
      (this.fwdText == null || this.fwdText == false)
          ? List<int>.empty()
          : [serializeBytes(this.fwdText)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.url),
      readBufferFromBigInt(this.buttonId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonUrlAuth{ID: $ID, text: $text, fwdText: $fwdText, url: $url, buttonId: $buttonId}';
  }
}

class InputKeyboardButtonUrlAuth extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3492708308;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 3492708308;
  bool? requestWriteAccess;
  String text;
  String? fwdText;
  String url;
  var bot;

  InputKeyboardButtonUrlAuth(
      {required this.requestWriteAccess,
      required this.text,
      required this.fwdText,
      required this.url,
      required this.bot});

  static InputKeyboardButtonUrlAuth fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final requestWriteAccess = (flags & 1) == 1;
    var text = reader.tgReadString();
    var fwdText;
    if ((flags & 2) == 2) {
      fwdText = reader.tgReadString();
    } else {
      fwdText = null;
    }
    var url = reader.tgReadString();
    var bot = reader.tgReadObject();
    return InputKeyboardButtonUrlAuth(
        requestWriteAccess: requestWriteAccess,
        text: text,
        fwdText: fwdText,
        url: url,
        bot: bot);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3492708308, 4),
      [0, 0, 0, 0],
      serializeBytes(this.text),
      (this.fwdText == null || this.fwdText == false)
          ? List<int>.empty()
          : [serializeBytes(this.fwdText)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.url),
      (this.bot.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputKeyboardButtonUrlAuth{ID: $ID, requestWriteAccess: $requestWriteAccess, text: $text, fwdText: $fwdText, url: $url, bot: $bot}';
  }
}

class KeyboardButtonRequestPoll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3150401885;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 3150401885;
  bool? quiz;
  String text;

  KeyboardButtonRequestPoll({required this.quiz, required this.text});

  static KeyboardButtonRequestPoll fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var quiz;
    if ((flags & 1) == 1) {
      quiz = reader.tgReadBool();
    } else {
      quiz = null;
    }
    var text = reader.tgReadString();
    return KeyboardButtonRequestPoll(quiz: quiz, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3150401885, 4),
      [0, 0, 0, 0],
      (this.quiz == null || this.quiz == false)
          ? List<int>.empty()
          : [
              [this.quiz == true ? 0xb5757299 : 0x379779bc]
            ].expand((element) => element).toList(),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonRequestPoll{ID: $ID, quiz: $quiz, text: $text}';
  }
}

class InputKeyboardButtonUserProfile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3918005115;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 3918005115;
  String text;
  var userId;

  InputKeyboardButtonUserProfile({required this.text, required this.userId});

  static InputKeyboardButtonUserProfile fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    var userId = reader.tgReadObject();
    return InputKeyboardButtonUserProfile(text: text, userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3918005115, 4),
      serializeBytes(this.text),
      (this.userId.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputKeyboardButtonUserProfile{ID: $ID, text: $text, userId: $userId}';
  }
}

class KeyboardButtonUserProfile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 814112961;
  static const SUBCLASS_OF_ID = 195916963;
  final classType = "constructor";
  final ID = 814112961;
  String text;
  BigInt userId;

  KeyboardButtonUserProfile({required this.text, required this.userId});

  static KeyboardButtonUserProfile fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    var userId = reader.readLong();
    return KeyboardButtonUserProfile(text: text, userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(814112961, 4),
      serializeBytes(this.text),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonUserProfile{ID: $ID, text: $text, userId: $userId}';
  }
}

class KeyboardButtonRow extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2002815875;
  static const SUBCLASS_OF_ID = 2222403758;
  final classType = "constructor";
  final ID = 2002815875;
  List<dynamic> buttons;

  KeyboardButtonRow({required this.buttons});

  static KeyboardButtonRow fromReader(BinaryReader reader) {
    var len;
    var _vectorbuttons = reader.readInt();
    if (_vectorbuttons != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> buttons = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      buttons.add(reader.tgReadObject());
    }
    return KeyboardButtonRow(buttons: buttons);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2002815875, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.buttons!.length, 4, little: true, signed: true),
      this
          .buttons!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'KeyboardButtonRow{ID: $ID, buttons: $buttons}';
  }
}

class ReplyKeyboardHide extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2688441221;
  static const SUBCLASS_OF_ID = 3806400242;
  final classType = "constructor";
  final ID = 2688441221;
  bool? selective;

  ReplyKeyboardHide({required this.selective});

  static ReplyKeyboardHide fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final selective = (flags & 4) == 4;
    return ReplyKeyboardHide(selective: selective);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2688441221, 4),
      [0, 0, 0, 0],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ReplyKeyboardHide{ID: $ID, selective: $selective}';
  }
}

class ReplyKeyboardForceReply extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2259946248;
  static const SUBCLASS_OF_ID = 3806400242;
  final classType = "constructor";
  final ID = 2259946248;
  bool? singleUse;
  bool? selective;
  String? placeholder;

  ReplyKeyboardForceReply(
      {required this.singleUse,
      required this.selective,
      required this.placeholder});

  static ReplyKeyboardForceReply fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final singleUse = (flags & 2) == 2;
    final selective = (flags & 4) == 4;
    var placeholder;
    if ((flags & 8) == 8) {
      placeholder = reader.tgReadString();
    } else {
      placeholder = null;
    }
    return ReplyKeyboardForceReply(
        singleUse: singleUse, selective: selective, placeholder: placeholder);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2259946248, 4),
      [0, 0, 0, 0],
      (this.placeholder == null || this.placeholder == false)
          ? List<int>.empty()
          : [serializeBytes(this.placeholder)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ReplyKeyboardForceReply{ID: $ID, singleUse: $singleUse, selective: $selective, placeholder: $placeholder}';
  }
}

class ReplyKeyboardMarkup extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2245892561;
  static const SUBCLASS_OF_ID = 3806400242;
  final classType = "constructor";
  final ID = 2245892561;
  bool? resize;
  bool? singleUse;
  bool? selective;
  List<dynamic> rows;
  String? placeholder;

  ReplyKeyboardMarkup(
      {required this.resize,
      required this.singleUse,
      required this.selective,
      required this.rows,
      required this.placeholder});

  static ReplyKeyboardMarkup fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final resize = (flags & 1) == 1;
    final singleUse = (flags & 2) == 2;
    final selective = (flags & 4) == 4;
    var _vectorrows = reader.readInt();
    if (_vectorrows != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> rows = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      rows.add(reader.tgReadObject());
    }
    var placeholder;
    if ((flags & 8) == 8) {
      placeholder = reader.tgReadString();
    } else {
      placeholder = null;
    }
    return ReplyKeyboardMarkup(
        resize: resize,
        singleUse: singleUse,
        selective: selective,
        rows: rows,
        placeholder: placeholder);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2245892561, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.rows!.length, 4, little: true, signed: true),
      this
          .rows!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.placeholder == null || this.placeholder == false)
          ? List<int>.empty()
          : [serializeBytes(this.placeholder)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ReplyKeyboardMarkup{ID: $ID, resize: $resize, singleUse: $singleUse, selective: $selective, rows: $rows, placeholder: $placeholder}';
  }
}

class ReplyInlineMarkup extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1218642516;
  static const SUBCLASS_OF_ID = 3806400242;
  final classType = "constructor";
  final ID = 1218642516;
  List<dynamic> rows;

  ReplyInlineMarkup({required this.rows});

  static ReplyInlineMarkup fromReader(BinaryReader reader) {
    var len;
    var _vectorrows = reader.readInt();
    if (_vectorrows != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> rows = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      rows.add(reader.tgReadObject());
    }
    return ReplyInlineMarkup(rows: rows);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1218642516, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.rows!.length, 4, little: true, signed: true),
      this
          .rows!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ReplyInlineMarkup{ID: $ID, rows: $rows}';
  }
}

class MessageEntityUnknown extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3146955413;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 3146955413;
  int offset;
  int length;

  MessageEntityUnknown({required this.offset, required this.length});

  static MessageEntityUnknown fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityUnknown(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3146955413, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityUnknown{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityMention extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4194588573;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 4194588573;
  int offset;
  int length;

  MessageEntityMention({required this.offset, required this.length});

  static MessageEntityMention fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityMention(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4194588573, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityMention{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityHashtag extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1868782349;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 1868782349;
  int offset;
  int length;

  MessageEntityHashtag({required this.offset, required this.length});

  static MessageEntityHashtag fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityHashtag(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1868782349, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityHashtag{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityBotCommand extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1827637959;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 1827637959;
  int offset;
  int length;

  MessageEntityBotCommand({required this.offset, required this.length});

  static MessageEntityBotCommand fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityBotCommand(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1827637959, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityBotCommand{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityUrl extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1859134776;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 1859134776;
  int offset;
  int length;

  MessageEntityUrl({required this.offset, required this.length});

  static MessageEntityUrl fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityUrl(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1859134776, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityUrl{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityEmail extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1692693954;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 1692693954;
  int offset;
  int length;

  MessageEntityEmail({required this.offset, required this.length});

  static MessageEntityEmail fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityEmail(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1692693954, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityEmail{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityBold extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3177253833;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 3177253833;
  int offset;
  int length;

  MessageEntityBold({required this.offset, required this.length});

  static MessageEntityBold fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityBold(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3177253833, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityBold{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityItalic extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2188348256;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 2188348256;
  int offset;
  int length;

  MessageEntityItalic({required this.offset, required this.length});

  static MessageEntityItalic fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityItalic(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2188348256, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityItalic{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityCode extends BaseConstructor {
  static const CONSTRUCTOR_ID = 681706865;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 681706865;
  int offset;
  int length;

  MessageEntityCode({required this.offset, required this.length});

  static MessageEntityCode fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityCode(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(681706865, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityCode{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityPre extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1938967520;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 1938967520;
  int offset;
  int length;
  String language;

  MessageEntityPre(
      {required this.offset, required this.length, required this.language});

  static MessageEntityPre fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    var language = reader.tgReadString();
    return MessageEntityPre(offset: offset, length: length, language: language);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1938967520, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
      serializeBytes(this.language),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityPre{ID: $ID, offset: $offset, length: $length, language: $language}';
  }
}

class MessageEntityTextUrl extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1990644519;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 1990644519;
  int offset;
  int length;
  String url;

  MessageEntityTextUrl(
      {required this.offset, required this.length, required this.url});

  static MessageEntityTextUrl fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    var url = reader.tgReadString();
    return MessageEntityTextUrl(offset: offset, length: length, url: url);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1990644519, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
      serializeBytes(this.url),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityTextUrl{ID: $ID, offset: $offset, length: $length, url: $url}';
  }
}

class MessageEntityMentionName extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3699052864;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 3699052864;
  int offset;
  int length;
  BigInt userId;

  MessageEntityMentionName(
      {required this.offset, required this.length, required this.userId});

  static MessageEntityMentionName fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    var userId = reader.readLong();
    return MessageEntityMentionName(
        offset: offset, length: length, userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3699052864, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityMentionName{ID: $ID, offset: $offset, length: $length, userId: $userId}';
  }
}

class InputMessageEntityMentionName extends BaseConstructor {
  static const CONSTRUCTOR_ID = 546203849;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 546203849;
  int offset;
  int length;
  var userId;

  InputMessageEntityMentionName(
      {required this.offset, required this.length, required this.userId});

  static InputMessageEntityMentionName fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    var userId = reader.tgReadObject();
    return InputMessageEntityMentionName(
        offset: offset, length: length, userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(546203849, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
      (this.userId.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessageEntityMentionName{ID: $ID, offset: $offset, length: $length, userId: $userId}';
  }
}

class MessageEntityPhone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2607407947;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 2607407947;
  int offset;
  int length;

  MessageEntityPhone({required this.offset, required this.length});

  static MessageEntityPhone fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityPhone(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2607407947, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityPhone{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityCashtag extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1280209983;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 1280209983;
  int offset;
  int length;

  MessageEntityCashtag({required this.offset, required this.length});

  static MessageEntityCashtag fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityCashtag(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1280209983, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityCashtag{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityUnderline extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2622389899;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 2622389899;
  int offset;
  int length;

  MessageEntityUnderline({required this.offset, required this.length});

  static MessageEntityUnderline fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityUnderline(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2622389899, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityUnderline{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityStrike extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3204879316;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 3204879316;
  int offset;
  int length;

  MessageEntityStrike({required this.offset, required this.length});

  static MessageEntityStrike fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityStrike(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3204879316, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityStrike{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityBlockquote extends BaseConstructor {
  static const CONSTRUCTOR_ID = 34469328;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 34469328;
  int offset;
  int length;

  MessageEntityBlockquote({required this.offset, required this.length});

  static MessageEntityBlockquote fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityBlockquote(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(34469328, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityBlockquote{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntityBankCard extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1981704948;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 1981704948;
  int offset;
  int length;

  MessageEntityBankCard({required this.offset, required this.length});

  static MessageEntityBankCard fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntityBankCard(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1981704948, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntityBankCard{ID: $ID, offset: $offset, length: $length}';
  }
}

class MessageEntitySpoiler extends BaseConstructor {
  static const CONSTRUCTOR_ID = 852137487;
  static const SUBCLASS_OF_ID = 3479443932;
  final classType = "constructor";
  final ID = 852137487;
  int offset;
  int length;

  MessageEntitySpoiler({required this.offset, required this.length});

  static MessageEntitySpoiler fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var length = reader.readInt();
    return MessageEntitySpoiler(offset: offset, length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(852137487, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageEntitySpoiler{ID: $ID, offset: $offset, length: $length}';
  }
}

class InputChannelEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4002160262;
  static const SUBCLASS_OF_ID = 1089602301;
  final classType = "constructor";
  final ID = 4002160262;

  InputChannelEmpty();

  static InputChannelEmpty fromReader(BinaryReader reader) {
    var len;
    return InputChannelEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4002160262, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputChannelEmpty{ID: $ID, }';
  }
}

class InputChannel extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4082822184;
  static const SUBCLASS_OF_ID = 1089602301;
  final classType = "constructor";
  final ID = 4082822184;
  BigInt channelId;
  BigInt accessHash;

  InputChannel({required this.channelId, required this.accessHash});

  static InputChannel fromReader(BinaryReader reader) {
    var len;
    var channelId = reader.readLong();
    var accessHash = reader.readLong();
    return InputChannel(channelId: channelId, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4082822184, 4),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputChannel{ID: $ID, channelId: $channelId, accessHash: $accessHash}';
  }
}

class InputChannelFromMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1536380829;
  static const SUBCLASS_OF_ID = 1089602301;
  final classType = "constructor";
  final ID = 1536380829;
  var peer;
  int msgId;
  BigInt channelId;

  InputChannelFromMessage(
      {required this.peer, required this.msgId, required this.channelId});

  static InputChannelFromMessage fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var msgId = reader.readInt();
    var channelId = reader.readLong();
    return InputChannelFromMessage(
        peer: peer, msgId: msgId, channelId: channelId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1536380829, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.channelId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputChannelFromMessage{ID: $ID, peer: $peer, msgId: $msgId, channelId: $channelId}';
  }
}

class MessageRange extends BaseConstructor {
  static const CONSTRUCTOR_ID = 182649427;
  static const SUBCLASS_OF_ID = 3200730487;
  final classType = "constructor";
  final ID = 182649427;
  int minId;
  int maxId;

  MessageRange({required this.minId, required this.maxId});

  static MessageRange fromReader(BinaryReader reader) {
    var len;
    var minId = reader.readInt();
    var maxId = reader.readInt();
    return MessageRange(minId: minId, maxId: maxId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(182649427, 4),
      readBufferFromBigInt(this.minId, 4, little: true, signed: true),
      readBufferFromBigInt(this.maxId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageRange{ID: $ID, minId: $minId, maxId: $maxId}';
  }
}

class ChannelMessagesFilterEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2496933607;
  static const SUBCLASS_OF_ID = 322136662;
  final classType = "constructor";
  final ID = 2496933607;

  ChannelMessagesFilterEmpty();

  static ChannelMessagesFilterEmpty fromReader(BinaryReader reader) {
    var len;
    return ChannelMessagesFilterEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2496933607, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelMessagesFilterEmpty{ID: $ID, }';
  }
}

class ChannelMessagesFilter extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3447183703;
  static const SUBCLASS_OF_ID = 322136662;
  final classType = "constructor";
  final ID = 3447183703;
  bool? excludeNewMessages;
  List<dynamic> ranges;

  ChannelMessagesFilter(
      {required this.excludeNewMessages, required this.ranges});

  static ChannelMessagesFilter fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final excludeNewMessages = (flags & 2) == 2;
    var _vectorranges = reader.readInt();
    if (_vectorranges != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> ranges = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      ranges.add(reader.tgReadObject());
    }
    return ChannelMessagesFilter(
        excludeNewMessages: excludeNewMessages, ranges: ranges);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3447183703, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.ranges!.length, 4, little: true, signed: true),
      this
          .ranges!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelMessagesFilter{ID: $ID, excludeNewMessages: $excludeNewMessages, ranges: $ranges}';
  }
}

class ChannelParticipant extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3222013888;
  static const SUBCLASS_OF_ID = 3653762072;
  final classType = "constructor";
  final ID = 3222013888;
  BigInt userId;
  int date;

  ChannelParticipant({required this.userId, required this.date});

  static ChannelParticipant fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var date = reader.readInt();
    return ChannelParticipant(userId: userId, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3222013888, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipant{ID: $ID, userId: $userId, date: $date}';
  }
}

class ChannelParticipantSelf extends BaseConstructor {
  static const CONSTRUCTOR_ID = 900251559;
  static const SUBCLASS_OF_ID = 3653762072;
  final classType = "constructor";
  final ID = 900251559;
  bool? viaRequest;
  BigInt userId;
  BigInt inviterId;
  int date;

  ChannelParticipantSelf(
      {required this.viaRequest,
      required this.userId,
      required this.inviterId,
      required this.date});

  static ChannelParticipantSelf fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final viaRequest = (flags & 1) == 1;
    var userId = reader.readLong();
    var inviterId = reader.readLong();
    var date = reader.readInt();
    return ChannelParticipantSelf(
        viaRequest: viaRequest,
        userId: userId,
        inviterId: inviterId,
        date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(900251559, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.inviterId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantSelf{ID: $ID, viaRequest: $viaRequest, userId: $userId, inviterId: $inviterId, date: $date}';
  }
}

class ChannelParticipantCreator extends BaseConstructor {
  static const CONSTRUCTOR_ID = 803602899;
  static const SUBCLASS_OF_ID = 3653762072;
  final classType = "constructor";
  final ID = 803602899;
  BigInt userId;
  var adminRights;
  String? rank;

  ChannelParticipantCreator(
      {required this.userId, required this.adminRights, required this.rank});

  static ChannelParticipantCreator fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var userId = reader.readLong();
    var adminRights = reader.tgReadObject();
    var rank;
    if ((flags & 1) == 1) {
      rank = reader.tgReadString();
    } else {
      rank = null;
    }
    return ChannelParticipantCreator(
        userId: userId, adminRights: adminRights, rank: rank);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(803602899, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.adminRights.getBytes() as List<int>),
      (this.rank == null || this.rank == false)
          ? List<int>.empty()
          : [serializeBytes(this.rank)].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantCreator{ID: $ID, userId: $userId, adminRights: $adminRights, rank: $rank}';
  }
}

class ChannelParticipantAdmin extends BaseConstructor {
  static const CONSTRUCTOR_ID = 885242707;
  static const SUBCLASS_OF_ID = 3653762072;
  final classType = "constructor";
  final ID = 885242707;
  bool? canEdit;
  bool? self;
  BigInt userId;
  BigInt? inviterId;
  BigInt promotedBy;
  int date;
  var adminRights;
  String? rank;

  ChannelParticipantAdmin(
      {required this.canEdit,
      required this.self,
      required this.userId,
      required this.inviterId,
      required this.promotedBy,
      required this.date,
      required this.adminRights,
      required this.rank});

  static ChannelParticipantAdmin fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final canEdit = (flags & 1) == 1;
    final self = (flags & 2) == 2;
    var userId = reader.readLong();
    var inviterId;
    if ((flags & 2) == 2) {
      inviterId = reader.readLong();
    } else {
      inviterId = null;
    }
    var promotedBy = reader.readLong();
    var date = reader.readInt();
    var adminRights = reader.tgReadObject();
    var rank;
    if ((flags & 4) == 4) {
      rank = reader.tgReadString();
    } else {
      rank = null;
    }
    return ChannelParticipantAdmin(
        canEdit: canEdit,
        self: self,
        userId: userId,
        inviterId: inviterId,
        promotedBy: promotedBy,
        date: date,
        adminRights: adminRights,
        rank: rank);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(885242707, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.inviterId == null || this.inviterId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.inviterId, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.promotedBy, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.adminRights.getBytes() as List<int>),
      (this.rank == null || this.rank == false)
          ? List<int>.empty()
          : [serializeBytes(this.rank)].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantAdmin{ID: $ID, canEdit: $canEdit, self: $self, userId: $userId, inviterId: $inviterId, promotedBy: $promotedBy, date: $date, adminRights: $adminRights, rank: $rank}';
  }
}

class ChannelParticipantBanned extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1844969806;
  static const SUBCLASS_OF_ID = 3653762072;
  final classType = "constructor";
  final ID = 1844969806;
  bool? left;
  var peer;
  BigInt kickedBy;
  int date;
  var bannedRights;

  ChannelParticipantBanned(
      {required this.left,
      required this.peer,
      required this.kickedBy,
      required this.date,
      required this.bannedRights});

  static ChannelParticipantBanned fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final left = (flags & 1) == 1;
    var peer = reader.tgReadObject();
    var kickedBy = reader.readLong();
    var date = reader.readInt();
    var bannedRights = reader.tgReadObject();
    return ChannelParticipantBanned(
        left: left,
        peer: peer,
        kickedBy: kickedBy,
        date: date,
        bannedRights: bannedRights);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1844969806, 4),
      [0, 0, 0, 0],
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.kickedBy, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.bannedRights.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantBanned{ID: $ID, left: $left, peer: $peer, kickedBy: $kickedBy, date: $date, bannedRights: $bannedRights}';
  }
}

class ChannelParticipantLeft extends BaseConstructor {
  static const CONSTRUCTOR_ID = 453242886;
  static const SUBCLASS_OF_ID = 3653762072;
  final classType = "constructor";
  final ID = 453242886;
  var peer;

  ChannelParticipantLeft({required this.peer});

  static ChannelParticipantLeft fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    return ChannelParticipantLeft(peer: peer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(453242886, 4),
      (this.peer.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantLeft{ID: $ID, peer: $peer}';
  }
}

class ChannelParticipantsRecent extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3728686201;
  static const SUBCLASS_OF_ID = 3209570131;
  final classType = "constructor";
  final ID = 3728686201;

  ChannelParticipantsRecent();

  static ChannelParticipantsRecent fromReader(BinaryReader reader) {
    var len;
    return ChannelParticipantsRecent();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3728686201, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantsRecent{ID: $ID, }';
  }
}

class ChannelParticipantsAdmins extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3026225513;
  static const SUBCLASS_OF_ID = 3209570131;
  final classType = "constructor";
  final ID = 3026225513;

  ChannelParticipantsAdmins();

  static ChannelParticipantsAdmins fromReader(BinaryReader reader) {
    var len;
    return ChannelParticipantsAdmins();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3026225513, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantsAdmins{ID: $ID, }';
  }
}

class ChannelParticipantsKicked extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2746567045;
  static const SUBCLASS_OF_ID = 3209570131;
  final classType = "constructor";
  final ID = 2746567045;
  String q;

  ChannelParticipantsKicked({required this.q});

  static ChannelParticipantsKicked fromReader(BinaryReader reader) {
    var len;
    var q = reader.tgReadString();
    return ChannelParticipantsKicked(q: q);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2746567045, 4),
      serializeBytes(this.q),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantsKicked{ID: $ID, q: $q}';
  }
}

class ChannelParticipantsBots extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2966521435;
  static const SUBCLASS_OF_ID = 3209570131;
  final classType = "constructor";
  final ID = 2966521435;

  ChannelParticipantsBots();

  static ChannelParticipantsBots fromReader(BinaryReader reader) {
    var len;
    return ChannelParticipantsBots();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2966521435, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantsBots{ID: $ID, }';
  }
}

class ChannelParticipantsBanned extends BaseConstructor {
  static const CONSTRUCTOR_ID = 338142689;
  static const SUBCLASS_OF_ID = 3209570131;
  final classType = "constructor";
  final ID = 338142689;
  String q;

  ChannelParticipantsBanned({required this.q});

  static ChannelParticipantsBanned fromReader(BinaryReader reader) {
    var len;
    var q = reader.tgReadString();
    return ChannelParticipantsBanned(q: q);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(338142689, 4),
      serializeBytes(this.q),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantsBanned{ID: $ID, q: $q}';
  }
}

class ChannelParticipantsSearch extends BaseConstructor {
  static const CONSTRUCTOR_ID = 106343499;
  static const SUBCLASS_OF_ID = 3209570131;
  final classType = "constructor";
  final ID = 106343499;
  String q;

  ChannelParticipantsSearch({required this.q});

  static ChannelParticipantsSearch fromReader(BinaryReader reader) {
    var len;
    var q = reader.tgReadString();
    return ChannelParticipantsSearch(q: q);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(106343499, 4),
      serializeBytes(this.q),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantsSearch{ID: $ID, q: $q}';
  }
}

class ChannelParticipantsContacts extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3144345741;
  static const SUBCLASS_OF_ID = 3209570131;
  final classType = "constructor";
  final ID = 3144345741;
  String q;

  ChannelParticipantsContacts({required this.q});

  static ChannelParticipantsContacts fromReader(BinaryReader reader) {
    var len;
    var q = reader.tgReadString();
    return ChannelParticipantsContacts(q: q);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3144345741, 4),
      serializeBytes(this.q),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantsContacts{ID: $ID, q: $q}';
  }
}

class ChannelParticipantsMentions extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3763035371;
  static const SUBCLASS_OF_ID = 3209570131;
  final classType = "constructor";
  final ID = 3763035371;
  String? q;
  int? topMsgId;

  ChannelParticipantsMentions({required this.q, required this.topMsgId});

  static ChannelParticipantsMentions fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var q;
    if ((flags & 1) == 1) {
      q = reader.tgReadString();
    } else {
      q = null;
    }
    var topMsgId;
    if ((flags & 2) == 2) {
      topMsgId = reader.readInt();
    } else {
      topMsgId = null;
    }
    return ChannelParticipantsMentions(q: q, topMsgId: topMsgId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3763035371, 4),
      [0, 0, 0, 0],
      (this.q == null || this.q == false)
          ? List<int>.empty()
          : [serializeBytes(this.q)].expand((element) => element).toList(),
      (this.topMsgId == null || this.topMsgId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.topMsgId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelParticipantsMentions{ID: $ID, q: $q, topMsgId: $topMsgId}';
  }
}

class InputBotInlineMessageMediaAuto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 864077702;
  static const SUBCLASS_OF_ID = 1408974864;
  final classType = "constructor";
  final ID = 864077702;
  String message;
  List<dynamic>? entities;
  var replyMarkup;

  InputBotInlineMessageMediaAuto(
      {required this.message,
      required this.entities,
      required this.replyMarkup});

  static InputBotInlineMessageMediaAuto fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var message = reader.tgReadString();
    var entities;
    if ((flags & 2) == 2) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return InputBotInlineMessageMediaAuto(
        message: message, entities: entities, replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(864077702, 4),
      [0, 0, 0, 0],
      serializeBytes(this.message),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineMessageMediaAuto{ID: $ID, message: $message, entities: $entities, replyMarkup: $replyMarkup}';
  }
}

class InputBotInlineMessageText extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1036876423;
  static const SUBCLASS_OF_ID = 1408974864;
  final classType = "constructor";
  final ID = 1036876423;
  bool? noWebpage;
  String message;
  List<dynamic>? entities;
  var replyMarkup;

  InputBotInlineMessageText(
      {required this.noWebpage,
      required this.message,
      required this.entities,
      required this.replyMarkup});

  static InputBotInlineMessageText fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final noWebpage = (flags & 1) == 1;
    var message = reader.tgReadString();
    var entities;
    if ((flags & 2) == 2) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return InputBotInlineMessageText(
        noWebpage: noWebpage,
        message: message,
        entities: entities,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1036876423, 4),
      [0, 0, 0, 0],
      serializeBytes(this.message),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineMessageText{ID: $ID, noWebpage: $noWebpage, message: $message, entities: $entities, replyMarkup: $replyMarkup}';
  }
}

class InputBotInlineMessageMediaGeo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2526190213;
  static const SUBCLASS_OF_ID = 1408974864;
  final classType = "constructor";
  final ID = 2526190213;
  var geoPoint;
  int? heading;
  int? period;
  int? proximityNotificationRadius;
  var replyMarkup;

  InputBotInlineMessageMediaGeo(
      {required this.geoPoint,
      required this.heading,
      required this.period,
      required this.proximityNotificationRadius,
      required this.replyMarkup});

  static InputBotInlineMessageMediaGeo fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var geoPoint = reader.tgReadObject();
    var heading;
    if ((flags & 1) == 1) {
      heading = reader.readInt();
    } else {
      heading = null;
    }
    var period;
    if ((flags & 2) == 2) {
      period = reader.readInt();
    } else {
      period = null;
    }
    var proximityNotificationRadius;
    if ((flags & 8) == 8) {
      proximityNotificationRadius = reader.readInt();
    } else {
      proximityNotificationRadius = null;
    }
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return InputBotInlineMessageMediaGeo(
        geoPoint: geoPoint,
        heading: heading,
        period: period,
        proximityNotificationRadius: proximityNotificationRadius,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2526190213, 4),
      [0, 0, 0, 0],
      (this.geoPoint.getBytes() as List<int>),
      (this.heading == null || this.heading == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.heading, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.period == null || this.period == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.period, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.proximityNotificationRadius == null ||
              this.proximityNotificationRadius == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.proximityNotificationRadius, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineMessageMediaGeo{ID: $ID, geoPoint: $geoPoint, heading: $heading, period: $period, proximityNotificationRadius: $proximityNotificationRadius, replyMarkup: $replyMarkup}';
  }
}

class InputBotInlineMessageMediaVenue extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1098628881;
  static const SUBCLASS_OF_ID = 1408974864;
  final classType = "constructor";
  final ID = 1098628881;
  var geoPoint;
  String title;
  String address;
  String provider;
  String venueId;
  String venueType;
  var replyMarkup;

  InputBotInlineMessageMediaVenue(
      {required this.geoPoint,
      required this.title,
      required this.address,
      required this.provider,
      required this.venueId,
      required this.venueType,
      required this.replyMarkup});

  static InputBotInlineMessageMediaVenue fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var geoPoint = reader.tgReadObject();
    var title = reader.tgReadString();
    var address = reader.tgReadString();
    var provider = reader.tgReadString();
    var venueId = reader.tgReadString();
    var venueType = reader.tgReadString();
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return InputBotInlineMessageMediaVenue(
        geoPoint: geoPoint,
        title: title,
        address: address,
        provider: provider,
        venueId: venueId,
        venueType: venueType,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1098628881, 4),
      [0, 0, 0, 0],
      (this.geoPoint.getBytes() as List<int>),
      serializeBytes(this.title),
      serializeBytes(this.address),
      serializeBytes(this.provider),
      serializeBytes(this.venueId),
      serializeBytes(this.venueType),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineMessageMediaVenue{ID: $ID, geoPoint: $geoPoint, title: $title, address: $address, provider: $provider, venueId: $venueId, venueType: $venueType, replyMarkup: $replyMarkup}';
  }
}

class InputBotInlineMessageMediaContact extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2800599037;
  static const SUBCLASS_OF_ID = 1408974864;
  final classType = "constructor";
  final ID = 2800599037;
  String phoneNumber;
  String firstName;
  String lastName;
  String vcard;
  var replyMarkup;

  InputBotInlineMessageMediaContact(
      {required this.phoneNumber,
      required this.firstName,
      required this.lastName,
      required this.vcard,
      required this.replyMarkup});

  static InputBotInlineMessageMediaContact fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var phoneNumber = reader.tgReadString();
    var firstName = reader.tgReadString();
    var lastName = reader.tgReadString();
    var vcard = reader.tgReadString();
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return InputBotInlineMessageMediaContact(
        phoneNumber: phoneNumber,
        firstName: firstName,
        lastName: lastName,
        vcard: vcard,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2800599037, 4),
      [0, 0, 0, 0],
      serializeBytes(this.phoneNumber),
      serializeBytes(this.firstName),
      serializeBytes(this.lastName),
      serializeBytes(this.vcard),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineMessageMediaContact{ID: $ID, phoneNumber: $phoneNumber, firstName: $firstName, lastName: $lastName, vcard: $vcard, replyMarkup: $replyMarkup}';
  }
}

class InputBotInlineMessageGame extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1262639204;
  static const SUBCLASS_OF_ID = 1408974864;
  final classType = "constructor";
  final ID = 1262639204;
  var replyMarkup;

  InputBotInlineMessageGame({required this.replyMarkup});

  static InputBotInlineMessageGame fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return InputBotInlineMessageGame(replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1262639204, 4),
      [0, 0, 0, 0],
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineMessageGame{ID: $ID, replyMarkup: $replyMarkup}';
  }
}

class InputBotInlineMessageMediaInvoice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3622273573;
  static const SUBCLASS_OF_ID = 1408974864;
  final classType = "constructor";
  final ID = 3622273573;
  String title;
  String description;
  var photo;
  var invoice;
  List<int> payload;
  String provider;
  var providerData;
  var replyMarkup;

  InputBotInlineMessageMediaInvoice(
      {required this.title,
      required this.description,
      required this.photo,
      required this.invoice,
      required this.payload,
      required this.provider,
      required this.providerData,
      required this.replyMarkup});

  static InputBotInlineMessageMediaInvoice fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var title = reader.tgReadString();
    var description = reader.tgReadString();
    var photo;
    if ((flags & 1) == 1) {
      photo = reader.tgReadObject();
    } else {
      photo = null;
    }
    var invoice = reader.tgReadObject();
    var payload = reader.tgReadBytes();
    var provider = reader.tgReadString();
    var providerData = reader.tgReadObject();
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return InputBotInlineMessageMediaInvoice(
        title: title,
        description: description,
        photo: photo,
        invoice: invoice,
        payload: payload,
        provider: provider,
        providerData: providerData,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3622273573, 4),
      [0, 0, 0, 0],
      serializeBytes(this.title),
      serializeBytes(this.description),
      (this.photo == null || this.photo == false)
          ? List<int>.empty()
          : [(this.photo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.invoice.getBytes() as List<int>),
      serializeBytes(this.payload),
      serializeBytes(this.provider),
      (this.providerData.getBytes() as List<int>),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineMessageMediaInvoice{ID: $ID, title: $title, description: $description, photo: $photo, invoice: $invoice, payload: $payload, provider: $provider, providerData: $providerData, replyMarkup: $replyMarkup}';
  }
}

class InputBotInlineResult extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2294256409;
  static const SUBCLASS_OF_ID = 2158273502;
  final classType = "constructor";
  final ID = 2294256409;
  String id;
  String type;
  String? title;
  String? description;
  String? url;
  var thumb;
  var content;
  var sendMessage;

  InputBotInlineResult(
      {required this.id,
      required this.type,
      required this.title,
      required this.description,
      required this.url,
      required this.thumb,
      required this.content,
      required this.sendMessage});

  static InputBotInlineResult fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.tgReadString();
    var type = reader.tgReadString();
    var title;
    if ((flags & 2) == 2) {
      title = reader.tgReadString();
    } else {
      title = null;
    }
    var description;
    if ((flags & 4) == 4) {
      description = reader.tgReadString();
    } else {
      description = null;
    }
    var url;
    if ((flags & 8) == 8) {
      url = reader.tgReadString();
    } else {
      url = null;
    }
    var thumb;
    if ((flags & 16) == 16) {
      thumb = reader.tgReadObject();
    } else {
      thumb = null;
    }
    var content;
    if ((flags & 32) == 32) {
      content = reader.tgReadObject();
    } else {
      content = null;
    }
    var sendMessage = reader.tgReadObject();
    return InputBotInlineResult(
        id: id,
        type: type,
        title: title,
        description: description,
        url: url,
        thumb: thumb,
        content: content,
        sendMessage: sendMessage);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2294256409, 4),
      [0, 0, 0, 0],
      serializeBytes(this.id),
      serializeBytes(this.type),
      (this.title == null || this.title == false)
          ? List<int>.empty()
          : [serializeBytes(this.title)].expand((element) => element).toList(),
      (this.description == null || this.description == false)
          ? List<int>.empty()
          : [serializeBytes(this.description)]
              .expand((element) => element)
              .toList(),
      (this.url == null || this.url == false)
          ? List<int>.empty()
          : [serializeBytes(this.url)].expand((element) => element).toList(),
      (this.thumb == null || this.thumb == false)
          ? List<int>.empty()
          : [(this.thumb.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.content == null || this.content == false)
          ? List<int>.empty()
          : [(this.content.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.sendMessage.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineResult{ID: $ID, id: $id, type: $type, title: $title, description: $description, url: $url, thumb: $thumb, content: $content, sendMessage: $sendMessage}';
  }
}

class InputBotInlineResultPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2832753831;
  static const SUBCLASS_OF_ID = 2158273502;
  final classType = "constructor";
  final ID = 2832753831;
  String id;
  String type;
  var photo;
  var sendMessage;

  InputBotInlineResultPhoto(
      {required this.id,
      required this.type,
      required this.photo,
      required this.sendMessage});

  static InputBotInlineResultPhoto fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadString();
    var type = reader.tgReadString();
    var photo = reader.tgReadObject();
    var sendMessage = reader.tgReadObject();
    return InputBotInlineResultPhoto(
        id: id, type: type, photo: photo, sendMessage: sendMessage);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2832753831, 4),
      serializeBytes(this.id),
      serializeBytes(this.type),
      (this.photo.getBytes() as List<int>),
      (this.sendMessage.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineResultPhoto{ID: $ID, id: $id, type: $type, photo: $photo, sendMessage: $sendMessage}';
  }
}

class InputBotInlineResultDocument extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4294507972;
  static const SUBCLASS_OF_ID = 2158273502;
  final classType = "constructor";
  final ID = 4294507972;
  String id;
  String type;
  String? title;
  String? description;
  var document;
  var sendMessage;

  InputBotInlineResultDocument(
      {required this.id,
      required this.type,
      required this.title,
      required this.description,
      required this.document,
      required this.sendMessage});

  static InputBotInlineResultDocument fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.tgReadString();
    var type = reader.tgReadString();
    var title;
    if ((flags & 2) == 2) {
      title = reader.tgReadString();
    } else {
      title = null;
    }
    var description;
    if ((flags & 4) == 4) {
      description = reader.tgReadString();
    } else {
      description = null;
    }
    var document = reader.tgReadObject();
    var sendMessage = reader.tgReadObject();
    return InputBotInlineResultDocument(
        id: id,
        type: type,
        title: title,
        description: description,
        document: document,
        sendMessage: sendMessage);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4294507972, 4),
      [0, 0, 0, 0],
      serializeBytes(this.id),
      serializeBytes(this.type),
      (this.title == null || this.title == false)
          ? List<int>.empty()
          : [serializeBytes(this.title)].expand((element) => element).toList(),
      (this.description == null || this.description == false)
          ? List<int>.empty()
          : [serializeBytes(this.description)]
              .expand((element) => element)
              .toList(),
      (this.document.getBytes() as List<int>),
      (this.sendMessage.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineResultDocument{ID: $ID, id: $id, type: $type, title: $title, description: $description, document: $document, sendMessage: $sendMessage}';
  }
}

class InputBotInlineResultGame extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1336154098;
  static const SUBCLASS_OF_ID = 2158273502;
  final classType = "constructor";
  final ID = 1336154098;
  String id;
  String shortName;
  var sendMessage;

  InputBotInlineResultGame(
      {required this.id, required this.shortName, required this.sendMessage});

  static InputBotInlineResultGame fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadString();
    var shortName = reader.tgReadString();
    var sendMessage = reader.tgReadObject();
    return InputBotInlineResultGame(
        id: id, shortName: shortName, sendMessage: sendMessage);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1336154098, 4),
      serializeBytes(this.id),
      serializeBytes(this.shortName),
      (this.sendMessage.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineResultGame{ID: $ID, id: $id, shortName: $shortName, sendMessage: $sendMessage}';
  }
}

class BotInlineMessageMediaAuto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1984755728;
  static const SUBCLASS_OF_ID = 3297841032;
  final classType = "constructor";
  final ID = 1984755728;
  String message;
  List<dynamic>? entities;
  var replyMarkup;

  BotInlineMessageMediaAuto(
      {required this.message,
      required this.entities,
      required this.replyMarkup});

  static BotInlineMessageMediaAuto fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var message = reader.tgReadString();
    var entities;
    if ((flags & 2) == 2) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return BotInlineMessageMediaAuto(
        message: message, entities: entities, replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1984755728, 4),
      [0, 0, 0, 0],
      serializeBytes(this.message),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotInlineMessageMediaAuto{ID: $ID, message: $message, entities: $entities, replyMarkup: $replyMarkup}';
  }
}

class BotInlineMessageText extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2357159394;
  static const SUBCLASS_OF_ID = 3297841032;
  final classType = "constructor";
  final ID = 2357159394;
  bool? noWebpage;
  String message;
  List<dynamic>? entities;
  var replyMarkup;

  BotInlineMessageText(
      {required this.noWebpage,
      required this.message,
      required this.entities,
      required this.replyMarkup});

  static BotInlineMessageText fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final noWebpage = (flags & 1) == 1;
    var message = reader.tgReadString();
    var entities;
    if ((flags & 2) == 2) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return BotInlineMessageText(
        noWebpage: noWebpage,
        message: message,
        entities: entities,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2357159394, 4),
      [0, 0, 0, 0],
      serializeBytes(this.message),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotInlineMessageText{ID: $ID, noWebpage: $noWebpage, message: $message, entities: $entities, replyMarkup: $replyMarkup}';
  }
}

class BotInlineMessageMediaGeo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 85477117;
  static const SUBCLASS_OF_ID = 3297841032;
  final classType = "constructor";
  final ID = 85477117;
  var geo;
  int? heading;
  int? period;
  int? proximityNotificationRadius;
  var replyMarkup;

  BotInlineMessageMediaGeo(
      {required this.geo,
      required this.heading,
      required this.period,
      required this.proximityNotificationRadius,
      required this.replyMarkup});

  static BotInlineMessageMediaGeo fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var geo = reader.tgReadObject();
    var heading;
    if ((flags & 1) == 1) {
      heading = reader.readInt();
    } else {
      heading = null;
    }
    var period;
    if ((flags & 2) == 2) {
      period = reader.readInt();
    } else {
      period = null;
    }
    var proximityNotificationRadius;
    if ((flags & 8) == 8) {
      proximityNotificationRadius = reader.readInt();
    } else {
      proximityNotificationRadius = null;
    }
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return BotInlineMessageMediaGeo(
        geo: geo,
        heading: heading,
        period: period,
        proximityNotificationRadius: proximityNotificationRadius,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(85477117, 4),
      [0, 0, 0, 0],
      (this.geo.getBytes() as List<int>),
      (this.heading == null || this.heading == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.heading, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.period == null || this.period == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.period, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.proximityNotificationRadius == null ||
              this.proximityNotificationRadius == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.proximityNotificationRadius, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotInlineMessageMediaGeo{ID: $ID, geo: $geo, heading: $heading, period: $period, proximityNotificationRadius: $proximityNotificationRadius, replyMarkup: $replyMarkup}';
  }
}

class BotInlineMessageMediaVenue extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2324063644;
  static const SUBCLASS_OF_ID = 3297841032;
  final classType = "constructor";
  final ID = 2324063644;
  var geo;
  String title;
  String address;
  String provider;
  String venueId;
  String venueType;
  var replyMarkup;

  BotInlineMessageMediaVenue(
      {required this.geo,
      required this.title,
      required this.address,
      required this.provider,
      required this.venueId,
      required this.venueType,
      required this.replyMarkup});

  static BotInlineMessageMediaVenue fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var geo = reader.tgReadObject();
    var title = reader.tgReadString();
    var address = reader.tgReadString();
    var provider = reader.tgReadString();
    var venueId = reader.tgReadString();
    var venueType = reader.tgReadString();
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return BotInlineMessageMediaVenue(
        geo: geo,
        title: title,
        address: address,
        provider: provider,
        venueId: venueId,
        venueType: venueType,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2324063644, 4),
      [0, 0, 0, 0],
      (this.geo.getBytes() as List<int>),
      serializeBytes(this.title),
      serializeBytes(this.address),
      serializeBytes(this.provider),
      serializeBytes(this.venueId),
      serializeBytes(this.venueType),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotInlineMessageMediaVenue{ID: $ID, geo: $geo, title: $title, address: $address, provider: $provider, venueId: $venueId, venueType: $venueType, replyMarkup: $replyMarkup}';
  }
}

class BotInlineMessageMediaContact extends BaseConstructor {
  static const CONSTRUCTOR_ID = 416402882;
  static const SUBCLASS_OF_ID = 3297841032;
  final classType = "constructor";
  final ID = 416402882;
  String phoneNumber;
  String firstName;
  String lastName;
  String vcard;
  var replyMarkup;

  BotInlineMessageMediaContact(
      {required this.phoneNumber,
      required this.firstName,
      required this.lastName,
      required this.vcard,
      required this.replyMarkup});

  static BotInlineMessageMediaContact fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var phoneNumber = reader.tgReadString();
    var firstName = reader.tgReadString();
    var lastName = reader.tgReadString();
    var vcard = reader.tgReadString();
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return BotInlineMessageMediaContact(
        phoneNumber: phoneNumber,
        firstName: firstName,
        lastName: lastName,
        vcard: vcard,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(416402882, 4),
      [0, 0, 0, 0],
      serializeBytes(this.phoneNumber),
      serializeBytes(this.firstName),
      serializeBytes(this.lastName),
      serializeBytes(this.vcard),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotInlineMessageMediaContact{ID: $ID, phoneNumber: $phoneNumber, firstName: $firstName, lastName: $lastName, vcard: $vcard, replyMarkup: $replyMarkup}';
  }
}

class BotInlineMessageMediaInvoice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 894081801;
  static const SUBCLASS_OF_ID = 3297841032;
  final classType = "constructor";
  final ID = 894081801;
  bool? shippingAddressRequested;
  bool? test;
  String title;
  String description;
  var photo;
  String currency;
  BigInt totalAmount;
  var replyMarkup;

  BotInlineMessageMediaInvoice(
      {required this.shippingAddressRequested,
      required this.test,
      required this.title,
      required this.description,
      required this.photo,
      required this.currency,
      required this.totalAmount,
      required this.replyMarkup});

  static BotInlineMessageMediaInvoice fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final shippingAddressRequested = (flags & 2) == 2;
    final test = (flags & 8) == 8;
    var title = reader.tgReadString();
    var description = reader.tgReadString();
    var photo;
    if ((flags & 1) == 1) {
      photo = reader.tgReadObject();
    } else {
      photo = null;
    }
    var currency = reader.tgReadString();
    var totalAmount = reader.readLong();
    var replyMarkup;
    if ((flags & 4) == 4) {
      replyMarkup = reader.tgReadObject();
    } else {
      replyMarkup = null;
    }
    return BotInlineMessageMediaInvoice(
        shippingAddressRequested: shippingAddressRequested,
        test: test,
        title: title,
        description: description,
        photo: photo,
        currency: currency,
        totalAmount: totalAmount,
        replyMarkup: replyMarkup);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(894081801, 4),
      [0, 0, 0, 0],
      serializeBytes(this.title),
      serializeBytes(this.description),
      (this.photo == null || this.photo == false)
          ? List<int>.empty()
          : [(this.photo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.currency),
      readBufferFromBigInt(this.totalAmount, 8, little: true, signed: true),
      (this.replyMarkup == null || this.replyMarkup == false)
          ? List<int>.empty()
          : [(this.replyMarkup.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotInlineMessageMediaInvoice{ID: $ID, shippingAddressRequested: $shippingAddressRequested, test: $test, title: $title, description: $description, photo: $photo, currency: $currency, totalAmount: $totalAmount, replyMarkup: $replyMarkup}';
  }
}

class BotInlineResult extends BaseConstructor {
  static const CONSTRUCTOR_ID = 295067450;
  static const SUBCLASS_OF_ID = 942846933;
  final classType = "constructor";
  final ID = 295067450;
  String id;
  String type;
  String? title;
  String? description;
  String? url;
  var thumb;
  var content;
  var sendMessage;

  BotInlineResult(
      {required this.id,
      required this.type,
      required this.title,
      required this.description,
      required this.url,
      required this.thumb,
      required this.content,
      required this.sendMessage});

  static BotInlineResult fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.tgReadString();
    var type = reader.tgReadString();
    var title;
    if ((flags & 2) == 2) {
      title = reader.tgReadString();
    } else {
      title = null;
    }
    var description;
    if ((flags & 4) == 4) {
      description = reader.tgReadString();
    } else {
      description = null;
    }
    var url;
    if ((flags & 8) == 8) {
      url = reader.tgReadString();
    } else {
      url = null;
    }
    var thumb;
    if ((flags & 16) == 16) {
      thumb = reader.tgReadObject();
    } else {
      thumb = null;
    }
    var content;
    if ((flags & 32) == 32) {
      content = reader.tgReadObject();
    } else {
      content = null;
    }
    var sendMessage = reader.tgReadObject();
    return BotInlineResult(
        id: id,
        type: type,
        title: title,
        description: description,
        url: url,
        thumb: thumb,
        content: content,
        sendMessage: sendMessage);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(295067450, 4),
      [0, 0, 0, 0],
      serializeBytes(this.id),
      serializeBytes(this.type),
      (this.title == null || this.title == false)
          ? List<int>.empty()
          : [serializeBytes(this.title)].expand((element) => element).toList(),
      (this.description == null || this.description == false)
          ? List<int>.empty()
          : [serializeBytes(this.description)]
              .expand((element) => element)
              .toList(),
      (this.url == null || this.url == false)
          ? List<int>.empty()
          : [serializeBytes(this.url)].expand((element) => element).toList(),
      (this.thumb == null || this.thumb == false)
          ? List<int>.empty()
          : [(this.thumb.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.content == null || this.content == false)
          ? List<int>.empty()
          : [(this.content.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.sendMessage.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotInlineResult{ID: $ID, id: $id, type: $type, title: $title, description: $description, url: $url, thumb: $thumb, content: $content, sendMessage: $sendMessage}';
  }
}

class BotInlineMediaResult extends BaseConstructor {
  static const CONSTRUCTOR_ID = 400266251;
  static const SUBCLASS_OF_ID = 942846933;
  final classType = "constructor";
  final ID = 400266251;
  String id;
  String type;
  var photo;
  var document;
  String? title;
  String? description;
  var sendMessage;

  BotInlineMediaResult(
      {required this.id,
      required this.type,
      required this.photo,
      required this.document,
      required this.title,
      required this.description,
      required this.sendMessage});

  static BotInlineMediaResult fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.tgReadString();
    var type = reader.tgReadString();
    var photo;
    if ((flags & 1) == 1) {
      photo = reader.tgReadObject();
    } else {
      photo = null;
    }
    var document;
    if ((flags & 2) == 2) {
      document = reader.tgReadObject();
    } else {
      document = null;
    }
    var title;
    if ((flags & 4) == 4) {
      title = reader.tgReadString();
    } else {
      title = null;
    }
    var description;
    if ((flags & 8) == 8) {
      description = reader.tgReadString();
    } else {
      description = null;
    }
    var sendMessage = reader.tgReadObject();
    return BotInlineMediaResult(
        id: id,
        type: type,
        photo: photo,
        document: document,
        title: title,
        description: description,
        sendMessage: sendMessage);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(400266251, 4),
      [0, 0, 0, 0],
      serializeBytes(this.id),
      serializeBytes(this.type),
      (this.photo == null || this.photo == false)
          ? List<int>.empty()
          : [(this.photo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.document == null || this.document == false)
          ? List<int>.empty()
          : [(this.document.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.title == null || this.title == false)
          ? List<int>.empty()
          : [serializeBytes(this.title)].expand((element) => element).toList(),
      (this.description == null || this.description == false)
          ? List<int>.empty()
          : [serializeBytes(this.description)]
              .expand((element) => element)
              .toList(),
      (this.sendMessage.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotInlineMediaResult{ID: $ID, id: $id, type: $type, photo: $photo, document: $document, title: $title, description: $description, sendMessage: $sendMessage}';
  }
}

class ExportedMessageLink extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1571494644;
  static const SUBCLASS_OF_ID = 3739632844;
  final classType = "constructor";
  final ID = 1571494644;
  String link;
  String html;

  ExportedMessageLink({required this.link, required this.html});

  static ExportedMessageLink fromReader(BinaryReader reader) {
    var len;
    var link = reader.tgReadString();
    var html = reader.tgReadString();
    return ExportedMessageLink(link: link, html: html);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1571494644, 4),
      serializeBytes(this.link),
      serializeBytes(this.html),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ExportedMessageLink{ID: $ID, link: $link, html: $html}';
  }
}

class MessageFwdHeader extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1601666510;
  static const SUBCLASS_OF_ID = 2049468420;
  final classType = "constructor";
  final ID = 1601666510;
  bool? imported;
  var fromId;
  String? fromName;
  int date;
  int? channelPost;
  String? postAuthor;
  var savedFromPeer;
  int? savedFromMsgId;
  String? psaType;

  MessageFwdHeader(
      {required this.imported,
      required this.fromId,
      required this.fromName,
      required this.date,
      required this.channelPost,
      required this.postAuthor,
      required this.savedFromPeer,
      required this.savedFromMsgId,
      required this.psaType});

  static MessageFwdHeader fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final imported = (flags & 128) == 128;
    var fromId;
    if ((flags & 1) == 1) {
      fromId = reader.tgReadObject();
    } else {
      fromId = null;
    }
    var fromName;
    if ((flags & 32) == 32) {
      fromName = reader.tgReadString();
    } else {
      fromName = null;
    }
    var date = reader.readInt();
    var channelPost;
    if ((flags & 4) == 4) {
      channelPost = reader.readInt();
    } else {
      channelPost = null;
    }
    var postAuthor;
    if ((flags & 8) == 8) {
      postAuthor = reader.tgReadString();
    } else {
      postAuthor = null;
    }
    var savedFromPeer;
    if ((flags & 16) == 16) {
      savedFromPeer = reader.tgReadObject();
    } else {
      savedFromPeer = null;
    }
    var savedFromMsgId;
    if ((flags & 16) == 16) {
      savedFromMsgId = reader.readInt();
    } else {
      savedFromMsgId = null;
    }
    var psaType;
    if ((flags & 64) == 64) {
      psaType = reader.tgReadString();
    } else {
      psaType = null;
    }
    return MessageFwdHeader(
        imported: imported,
        fromId: fromId,
        fromName: fromName,
        date: date,
        channelPost: channelPost,
        postAuthor: postAuthor,
        savedFromPeer: savedFromPeer,
        savedFromMsgId: savedFromMsgId,
        psaType: psaType);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1601666510, 4),
      [0, 0, 0, 0],
      (this.fromId == null || this.fromId == false)
          ? List<int>.empty()
          : [(this.fromId.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.fromName == null || this.fromName == false)
          ? List<int>.empty()
          : [serializeBytes(this.fromName)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.channelPost == null || this.channelPost == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.channelPost, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.postAuthor == null || this.postAuthor == false)
          ? List<int>.empty()
          : [serializeBytes(this.postAuthor)]
              .expand((element) => element)
              .toList(),
      (this.savedFromPeer == null || this.savedFromPeer == false)
          ? List<int>.empty()
          : [(this.savedFromPeer.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.savedFromMsgId == null || this.savedFromMsgId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.savedFromMsgId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.psaType == null || this.psaType == false)
          ? List<int>.empty()
          : [serializeBytes(this.psaType)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageFwdHeader{ID: $ID, imported: $imported, fromId: $fromId, fromName: $fromName, date: $date, channelPost: $channelPost, postAuthor: $postAuthor, savedFromPeer: $savedFromPeer, savedFromMsgId: $savedFromMsgId, psaType: $psaType}';
  }
}

class InputBotInlineMessageID extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2299280777;
  static const SUBCLASS_OF_ID = 768434944;
  final classType = "constructor";
  final ID = 2299280777;
  int dcId;
  BigInt id;
  BigInt accessHash;

  InputBotInlineMessageID(
      {required this.dcId, required this.id, required this.accessHash});

  static InputBotInlineMessageID fromReader(BinaryReader reader) {
    var len;
    var dcId = reader.readInt();
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputBotInlineMessageID(dcId: dcId, id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2299280777, 4),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineMessageID{ID: $ID, dcId: $dcId, id: $id, accessHash: $accessHash}';
  }
}

class InputBotInlineMessageID64 extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3067680215;
  static const SUBCLASS_OF_ID = 768434944;
  final classType = "constructor";
  final ID = 3067680215;
  int dcId;
  BigInt ownerId;
  int id;
  BigInt accessHash;

  InputBotInlineMessageID64(
      {required this.dcId,
      required this.ownerId,
      required this.id,
      required this.accessHash});

  static InputBotInlineMessageID64 fromReader(BinaryReader reader) {
    var len;
    var dcId = reader.readInt();
    var ownerId = reader.readLong();
    var id = reader.readInt();
    var accessHash = reader.readLong();
    return InputBotInlineMessageID64(
        dcId: dcId, ownerId: ownerId, id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3067680215, 4),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
      readBufferFromBigInt(this.ownerId, 8, little: true, signed: true),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputBotInlineMessageID64{ID: $ID, dcId: $dcId, ownerId: $ownerId, id: $id, accessHash: $accessHash}';
  }
}

class InlineBotSwitchPM extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1008755359;
  static const SUBCLASS_OF_ID = 2192701243;
  final classType = "constructor";
  final ID = 1008755359;
  String text;
  String startParam;

  InlineBotSwitchPM({required this.text, required this.startParam});

  static InlineBotSwitchPM fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    var startParam = reader.tgReadString();
    return InlineBotSwitchPM(text: text, startParam: startParam);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1008755359, 4),
      serializeBytes(this.text),
      serializeBytes(this.startParam),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InlineBotSwitchPM{ID: $ID, text: $text, startParam: $startParam}';
  }
}

class TopPeer extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3989684315;
  static const SUBCLASS_OF_ID = 1763100161;
  final classType = "constructor";
  final ID = 3989684315;
  var peer;
  double rating;

  TopPeer({required this.peer, required this.rating});

  static TopPeer fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var rating = reader.readDouble();
    return TopPeer(peer: peer, rating: rating);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3989684315, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.rating, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeer{ID: $ID, peer: $peer, rating: $rating}';
  }
}

class TopPeerCategoryBotsPM extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2875595611;
  static const SUBCLASS_OF_ID = 3723502850;
  final classType = "constructor";
  final ID = 2875595611;

  TopPeerCategoryBotsPM();

  static TopPeerCategoryBotsPM fromReader(BinaryReader reader) {
    var len;
    return TopPeerCategoryBotsPM();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2875595611, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeerCategoryBotsPM{ID: $ID, }';
  }
}

class TopPeerCategoryBotsInline extends BaseConstructor {
  static const CONSTRUCTOR_ID = 344356834;
  static const SUBCLASS_OF_ID = 3723502850;
  final classType = "constructor";
  final ID = 344356834;

  TopPeerCategoryBotsInline();

  static TopPeerCategoryBotsInline fromReader(BinaryReader reader) {
    var len;
    return TopPeerCategoryBotsInline();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(344356834, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeerCategoryBotsInline{ID: $ID, }';
  }
}

class TopPeerCategoryCorrespondents extends BaseConstructor {
  static const CONSTRUCTOR_ID = 104314861;
  static const SUBCLASS_OF_ID = 3723502850;
  final classType = "constructor";
  final ID = 104314861;

  TopPeerCategoryCorrespondents();

  static TopPeerCategoryCorrespondents fromReader(BinaryReader reader) {
    var len;
    return TopPeerCategoryCorrespondents();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(104314861, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeerCategoryCorrespondents{ID: $ID, }';
  }
}

class TopPeerCategoryGroups extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3172442442;
  static const SUBCLASS_OF_ID = 3723502850;
  final classType = "constructor";
  final ID = 3172442442;

  TopPeerCategoryGroups();

  static TopPeerCategoryGroups fromReader(BinaryReader reader) {
    var len;
    return TopPeerCategoryGroups();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3172442442, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeerCategoryGroups{ID: $ID, }';
  }
}

class TopPeerCategoryChannels extends BaseConstructor {
  static const CONSTRUCTOR_ID = 371037736;
  static const SUBCLASS_OF_ID = 3723502850;
  final classType = "constructor";
  final ID = 371037736;

  TopPeerCategoryChannels();

  static TopPeerCategoryChannels fromReader(BinaryReader reader) {
    var len;
    return TopPeerCategoryChannels();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(371037736, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeerCategoryChannels{ID: $ID, }';
  }
}

class TopPeerCategoryPhoneCalls extends BaseConstructor {
  static const CONSTRUCTOR_ID = 511092620;
  static const SUBCLASS_OF_ID = 3723502850;
  final classType = "constructor";
  final ID = 511092620;

  TopPeerCategoryPhoneCalls();

  static TopPeerCategoryPhoneCalls fromReader(BinaryReader reader) {
    var len;
    return TopPeerCategoryPhoneCalls();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(511092620, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeerCategoryPhoneCalls{ID: $ID, }';
  }
}

class TopPeerCategoryForwardUsers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2822794409;
  static const SUBCLASS_OF_ID = 3723502850;
  final classType = "constructor";
  final ID = 2822794409;

  TopPeerCategoryForwardUsers();

  static TopPeerCategoryForwardUsers fromReader(BinaryReader reader) {
    var len;
    return TopPeerCategoryForwardUsers();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2822794409, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeerCategoryForwardUsers{ID: $ID, }';
  }
}

class TopPeerCategoryForwardChats extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4226728176;
  static const SUBCLASS_OF_ID = 3723502850;
  final classType = "constructor";
  final ID = 4226728176;

  TopPeerCategoryForwardChats();

  static TopPeerCategoryForwardChats fromReader(BinaryReader reader) {
    var len;
    return TopPeerCategoryForwardChats();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4226728176, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeerCategoryForwardChats{ID: $ID, }';
  }
}

class TopPeerCategoryPeers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4219683473;
  static const SUBCLASS_OF_ID = 78563632;
  final classType = "constructor";
  final ID = 4219683473;
  var category;
  int count;
  List<dynamic> peers;

  TopPeerCategoryPeers(
      {required this.category, required this.count, required this.peers});

  static TopPeerCategoryPeers fromReader(BinaryReader reader) {
    var len;
    var category = reader.tgReadObject();
    var count = reader.readInt();
    var _vectorpeers = reader.readInt();
    if (_vectorpeers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> peers = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      peers.add(reader.tgReadObject());
    }
    return TopPeerCategoryPeers(category: category, count: count, peers: peers);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4219683473, 4),
      (this.category.getBytes() as List<int>),
      readBufferFromBigInt(this.count, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.peers!.length, 4, little: true, signed: true),
      this
          .peers!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TopPeerCategoryPeers{ID: $ID, category: $category, count: $count, peers: $peers}';
  }
}

class DraftMessageEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 453805082;
  static const SUBCLASS_OF_ID = 869564229;
  final classType = "constructor";
  final ID = 453805082;
  int? date;

  DraftMessageEmpty({required this.date});

  static DraftMessageEmpty fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var date;
    if ((flags & 1) == 1) {
      date = reader.readInt();
    } else {
      date = null;
    }
    return DraftMessageEmpty(date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(453805082, 4),
      [0, 0, 0, 0],
      (this.date == null || this.date == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.date, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DraftMessageEmpty{ID: $ID, date: $date}';
  }
}

class DraftMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4253970719;
  static const SUBCLASS_OF_ID = 869564229;
  final classType = "constructor";
  final ID = 4253970719;
  bool? noWebpage;
  int? replyToMsgId;
  String message;
  List<dynamic>? entities;
  int date;

  DraftMessage(
      {required this.noWebpage,
      required this.replyToMsgId,
      required this.message,
      required this.entities,
      required this.date});

  static DraftMessage fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final noWebpage = (flags & 2) == 2;
    var replyToMsgId;
    if ((flags & 1) == 1) {
      replyToMsgId = reader.readInt();
    } else {
      replyToMsgId = null;
    }
    var message = reader.tgReadString();
    var entities;
    if ((flags & 8) == 8) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    var date = reader.readInt();
    return DraftMessage(
        noWebpage: noWebpage,
        replyToMsgId: replyToMsgId,
        message: message,
        entities: entities,
        date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4253970719, 4),
      [0, 0, 0, 0],
      (this.replyToMsgId == null || this.replyToMsgId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.replyToMsgId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      serializeBytes(this.message),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DraftMessage{ID: $ID, noWebpage: $noWebpage, replyToMsgId: $replyToMsgId, message: $message, entities: $entities, date: $date}';
  }
}

class StickerSetCovered extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1678812626;
  static const SUBCLASS_OF_ID = 2139546853;
  final classType = "constructor";
  final ID = 1678812626;
  var set;
  var cover;

  StickerSetCovered({required this.set, required this.cover});

  static StickerSetCovered fromReader(BinaryReader reader) {
    var len;
    var set = reader.tgReadObject();
    var cover = reader.tgReadObject();
    return StickerSetCovered(set: set, cover: cover);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1678812626, 4),
      (this.set.getBytes() as List<int>),
      (this.cover.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StickerSetCovered{ID: $ID, set: $set, cover: $cover}';
  }
}

class StickerSetMultiCovered extends BaseConstructor {
  static const CONSTRUCTOR_ID = 872932635;
  static const SUBCLASS_OF_ID = 2139546853;
  final classType = "constructor";
  final ID = 872932635;
  var set;
  List<dynamic> covers;

  StickerSetMultiCovered({required this.set, required this.covers});

  static StickerSetMultiCovered fromReader(BinaryReader reader) {
    var len;
    var set = reader.tgReadObject();
    var _vectorcovers = reader.readInt();
    if (_vectorcovers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> covers = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      covers.add(reader.tgReadObject());
    }
    return StickerSetMultiCovered(set: set, covers: covers);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(872932635, 4),
      (this.set.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.covers!.length, 4, little: true, signed: true),
      this
          .covers!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StickerSetMultiCovered{ID: $ID, set: $set, covers: $covers}';
  }
}

class MaskCoords extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2933316530;
  static const SUBCLASS_OF_ID = 112964349;
  final classType = "constructor";
  final ID = 2933316530;
  int n;
  double x;
  double y;
  double zoom;

  MaskCoords(
      {required this.n, required this.x, required this.y, required this.zoom});

  static MaskCoords fromReader(BinaryReader reader) {
    var len;
    var n = reader.readInt();
    var x = reader.readDouble();
    var y = reader.readDouble();
    var zoom = reader.readDouble();
    return MaskCoords(n: n, x: x, y: y, zoom: zoom);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2933316530, 4),
      readBufferFromBigInt(this.n, 4, little: true, signed: true),
      readBufferFromBigInt(this.x, 4),
      readBufferFromBigInt(this.y, 4),
      readBufferFromBigInt(this.zoom, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MaskCoords{ID: $ID, n: $n, x: $x, y: $y, zoom: $zoom}';
  }
}

class InputStickeredMediaPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1251549527;
  static const SUBCLASS_OF_ID = 1363597726;
  final classType = "constructor";
  final ID = 1251549527;
  var id;

  InputStickeredMediaPhoto({required this.id});

  static InputStickeredMediaPhoto fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadObject();
    return InputStickeredMediaPhoto(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1251549527, 4),
      (this.id.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickeredMediaPhoto{ID: $ID, id: $id}';
  }
}

class InputStickeredMediaDocument extends BaseConstructor {
  static const CONSTRUCTOR_ID = 70813275;
  static const SUBCLASS_OF_ID = 1363597726;
  final classType = "constructor";
  final ID = 70813275;
  var id;

  InputStickeredMediaDocument({required this.id});

  static InputStickeredMediaDocument fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadObject();
    return InputStickeredMediaDocument(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(70813275, 4),
      (this.id.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickeredMediaDocument{ID: $ID, id: $id}';
  }
}

class Game extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3187238203;
  static const SUBCLASS_OF_ID = 2199494322;
  final classType = "constructor";
  final ID = 3187238203;
  BigInt id;
  BigInt accessHash;
  String shortName;
  String title;
  String description;
  var photo;
  var document;

  Game(
      {required this.id,
      required this.accessHash,
      required this.shortName,
      required this.title,
      required this.description,
      required this.photo,
      required this.document});

  static Game fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var shortName = reader.tgReadString();
    var title = reader.tgReadString();
    var description = reader.tgReadString();
    var photo = reader.tgReadObject();
    var document;
    if ((flags & 1) == 1) {
      document = reader.tgReadObject();
    } else {
      document = null;
    }
    return Game(
        id: id,
        accessHash: accessHash,
        shortName: shortName,
        title: title,
        description: description,
        photo: photo,
        document: document);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3187238203, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.shortName),
      serializeBytes(this.title),
      serializeBytes(this.description),
      (this.photo.getBytes() as List<int>),
      (this.document == null || this.document == false)
          ? List<int>.empty()
          : [(this.document.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Game{ID: $ID, id: $id, accessHash: $accessHash, shortName: $shortName, title: $title, description: $description, photo: $photo, document: $document}';
  }
}

class InputGameID extends BaseConstructor {
  static const CONSTRUCTOR_ID = 53231223;
  static const SUBCLASS_OF_ID = 1221679235;
  final classType = "constructor";
  final ID = 53231223;
  BigInt id;
  BigInt accessHash;

  InputGameID({required this.id, required this.accessHash});

  static InputGameID fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputGameID(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(53231223, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputGameID{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class InputGameShortName extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3274827786;
  static const SUBCLASS_OF_ID = 1221679235;
  final classType = "constructor";
  final ID = 3274827786;
  var botId;
  String shortName;

  InputGameShortName({required this.botId, required this.shortName});

  static InputGameShortName fromReader(BinaryReader reader) {
    var len;
    var botId = reader.tgReadObject();
    var shortName = reader.tgReadString();
    return InputGameShortName(botId: botId, shortName: shortName);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3274827786, 4),
      (this.botId.getBytes() as List<int>),
      serializeBytes(this.shortName),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputGameShortName{ID: $ID, botId: $botId, shortName: $shortName}';
  }
}

class HighScore extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1940093419;
  static const SUBCLASS_OF_ID = 3542818357;
  final classType = "constructor";
  final ID = 1940093419;
  int pos;
  BigInt userId;
  int score;

  HighScore({required this.pos, required this.userId, required this.score});

  static HighScore fromReader(BinaryReader reader) {
    var len;
    var pos = reader.readInt();
    var userId = reader.readLong();
    var score = reader.readInt();
    return HighScore(pos: pos, userId: userId, score: score);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1940093419, 4),
      readBufferFromBigInt(this.pos, 4, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.score, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'HighScore{ID: $ID, pos: $pos, userId: $userId, score: $score}';
  }
}

class TextEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3695018575;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 3695018575;

  TextEmpty();

  static TextEmpty fromReader(BinaryReader reader) {
    var len;
    return TextEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3695018575, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextEmpty{ID: $ID, }';
  }
}

class TextPlain extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1950782688;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 1950782688;
  String text;

  TextPlain({required this.text});

  static TextPlain fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    return TextPlain(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1950782688, 4),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextPlain{ID: $ID, text: $text}';
  }
}

class TextBold extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1730456516;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 1730456516;
  var text;

  TextBold({required this.text});

  static TextBold fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return TextBold(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1730456516, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextBold{ID: $ID, text: $text}';
  }
}

class TextItalic extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3641877916;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 3641877916;
  var text;

  TextItalic({required this.text});

  static TextItalic fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return TextItalic(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3641877916, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextItalic{ID: $ID, text: $text}';
  }
}

class TextUnderline extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3240501956;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 3240501956;
  var text;

  TextUnderline({required this.text});

  static TextUnderline fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return TextUnderline(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3240501956, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextUnderline{ID: $ID, text: $text}';
  }
}

class TextStrike extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2616769429;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 2616769429;
  var text;

  TextStrike({required this.text});

  static TextStrike fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return TextStrike(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2616769429, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextStrike{ID: $ID, text: $text}';
  }
}

class TextFixed extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1816074681;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 1816074681;
  var text;

  TextFixed({required this.text});

  static TextFixed fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return TextFixed(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1816074681, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextFixed{ID: $ID, text: $text}';
  }
}

class TextUrl extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1009288385;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 1009288385;
  var text;
  String url;
  BigInt webpageId;

  TextUrl({required this.text, required this.url, required this.webpageId});

  static TextUrl fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    var url = reader.tgReadString();
    var webpageId = reader.readLong();
    return TextUrl(text: text, url: url, webpageId: webpageId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1009288385, 4),
      (this.text.getBytes() as List<int>),
      serializeBytes(this.url),
      readBufferFromBigInt(this.webpageId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextUrl{ID: $ID, text: $text, url: $url, webpageId: $webpageId}';
  }
}

class TextEmail extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3730443734;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 3730443734;
  var text;
  String email;

  TextEmail({required this.text, required this.email});

  static TextEmail fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    var email = reader.tgReadString();
    return TextEmail(text: text, email: email);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3730443734, 4),
      (this.text.getBytes() as List<int>),
      serializeBytes(this.email),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextEmail{ID: $ID, text: $text, email: $email}';
  }
}

class TextConcat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2120376535;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 2120376535;
  List<dynamic> texts;

  TextConcat({required this.texts});

  static TextConcat fromReader(BinaryReader reader) {
    var len;
    var _vectortexts = reader.readInt();
    if (_vectortexts != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> texts = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      texts.add(reader.tgReadObject());
    }
    return TextConcat(texts: texts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2120376535, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.texts!.length, 4, little: true, signed: true),
      this
          .texts!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextConcat{ID: $ID, texts: $texts}';
  }
}

class TextSubscript extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3983181060;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 3983181060;
  var text;

  TextSubscript({required this.text});

  static TextSubscript fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return TextSubscript(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3983181060, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextSubscript{ID: $ID, text: $text}';
  }
}

class TextSuperscript extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3355139585;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 3355139585;
  var text;

  TextSuperscript({required this.text});

  static TextSuperscript fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return TextSuperscript(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3355139585, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextSuperscript{ID: $ID, text: $text}';
  }
}

class TextMarked extends BaseConstructor {
  static const CONSTRUCTOR_ID = 55281185;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 55281185;
  var text;

  TextMarked({required this.text});

  static TextMarked fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return TextMarked(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(55281185, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextMarked{ID: $ID, text: $text}';
  }
}

class TextPhone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 483104362;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 483104362;
  var text;
  String phone;

  TextPhone({required this.text, required this.phone});

  static TextPhone fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    var phone = reader.tgReadString();
    return TextPhone(text: text, phone: phone);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(483104362, 4),
      (this.text.getBytes() as List<int>),
      serializeBytes(this.phone),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextPhone{ID: $ID, text: $text, phone: $phone}';
  }
}

class TextImage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 136105807;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 136105807;
  BigInt documentId;
  int w;
  int h;

  TextImage({required this.documentId, required this.w, required this.h});

  static TextImage fromReader(BinaryReader reader) {
    var len;
    var documentId = reader.readLong();
    var w = reader.readInt();
    var h = reader.readInt();
    return TextImage(documentId: documentId, w: w, h: h);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(136105807, 4),
      readBufferFromBigInt(this.documentId, 8, little: true, signed: true),
      readBufferFromBigInt(this.w, 4, little: true, signed: true),
      readBufferFromBigInt(this.h, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextImage{ID: $ID, documentId: $documentId, w: $w, h: $h}';
  }
}

class TextAnchor extends BaseConstructor {
  static const CONSTRUCTOR_ID = 894777186;
  static const SUBCLASS_OF_ID = 4056986745;
  final classType = "constructor";
  final ID = 894777186;
  var text;
  String name;

  TextAnchor({required this.text, required this.name});

  static TextAnchor fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    var name = reader.tgReadString();
    return TextAnchor(text: text, name: name);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(894777186, 4),
      (this.text.getBytes() as List<int>),
      serializeBytes(this.name),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TextAnchor{ID: $ID, text: $text, name: $name}';
  }
}

class PageBlockUnsupported extends BaseConstructor {
  static const CONSTRUCTOR_ID = 324435594;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 324435594;

  PageBlockUnsupported();

  static PageBlockUnsupported fromReader(BinaryReader reader) {
    var len;
    return PageBlockUnsupported();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(324435594, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockUnsupported{ID: $ID, }';
  }
}

class PageBlockTitle extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1890305021;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 1890305021;
  var text;

  PageBlockTitle({required this.text});

  static PageBlockTitle fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return PageBlockTitle(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1890305021, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockTitle{ID: $ID, text: $text}';
  }
}

class PageBlockSubtitle extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2415565343;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 2415565343;
  var text;

  PageBlockSubtitle({required this.text});

  static PageBlockSubtitle fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return PageBlockSubtitle(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2415565343, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockSubtitle{ID: $ID, text: $text}';
  }
}

class PageBlockAuthorDate extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3132089824;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 3132089824;
  var author;
  int publishedDate;

  PageBlockAuthorDate({required this.author, required this.publishedDate});

  static PageBlockAuthorDate fromReader(BinaryReader reader) {
    var len;
    var author = reader.tgReadObject();
    var publishedDate = reader.readInt();
    return PageBlockAuthorDate(author: author, publishedDate: publishedDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3132089824, 4),
      (this.author.getBytes() as List<int>),
      readBufferFromBigInt(this.publishedDate, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockAuthorDate{ID: $ID, author: $author, publishedDate: $publishedDate}';
  }
}

class PageBlockHeader extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3218105580;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 3218105580;
  var text;

  PageBlockHeader({required this.text});

  static PageBlockHeader fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return PageBlockHeader(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3218105580, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockHeader{ID: $ID, text: $text}';
  }
}

class PageBlockSubheader extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4046173921;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 4046173921;
  var text;

  PageBlockSubheader({required this.text});

  static PageBlockSubheader fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return PageBlockSubheader(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4046173921, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockSubheader{ID: $ID, text: $text}';
  }
}

class PageBlockParagraph extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1182402406;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 1182402406;
  var text;

  PageBlockParagraph({required this.text});

  static PageBlockParagraph fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return PageBlockParagraph(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1182402406, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockParagraph{ID: $ID, text: $text}';
  }
}

class PageBlockPreformatted extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3228621118;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 3228621118;
  var text;
  String language;

  PageBlockPreformatted({required this.text, required this.language});

  static PageBlockPreformatted fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    var language = reader.tgReadString();
    return PageBlockPreformatted(text: text, language: language);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3228621118, 4),
      (this.text.getBytes() as List<int>),
      serializeBytes(this.language),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockPreformatted{ID: $ID, text: $text, language: $language}';
  }
}

class PageBlockFooter extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1216809369;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 1216809369;
  var text;

  PageBlockFooter({required this.text});

  static PageBlockFooter fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return PageBlockFooter(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1216809369, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockFooter{ID: $ID, text: $text}';
  }
}

class PageBlockDivider extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3676352904;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 3676352904;

  PageBlockDivider();

  static PageBlockDivider fromReader(BinaryReader reader) {
    var len;
    return PageBlockDivider();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3676352904, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockDivider{ID: $ID, }';
  }
}

class PageBlockAnchor extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3456972720;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 3456972720;
  String name;

  PageBlockAnchor({required this.name});

  static PageBlockAnchor fromReader(BinaryReader reader) {
    var len;
    var name = reader.tgReadString();
    return PageBlockAnchor(name: name);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3456972720, 4),
      serializeBytes(this.name),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockAnchor{ID: $ID, name: $name}';
  }
}

class PageBlockList extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3840442385;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 3840442385;
  List<dynamic> items;

  PageBlockList({required this.items});

  static PageBlockList fromReader(BinaryReader reader) {
    var len;
    var _vectoritems = reader.readInt();
    if (_vectoritems != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> items = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      items.add(reader.tgReadObject());
    }
    return PageBlockList(items: items);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3840442385, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.items!.length, 4, little: true, signed: true),
      this
          .items!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockList{ID: $ID, items: $items}';
  }
}

class PageBlockBlockquote extends BaseConstructor {
  static const CONSTRUCTOR_ID = 641563686;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 641563686;
  var text;
  var caption;

  PageBlockBlockquote({required this.text, required this.caption});

  static PageBlockBlockquote fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    var caption = reader.tgReadObject();
    return PageBlockBlockquote(text: text, caption: caption);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(641563686, 4),
      (this.text.getBytes() as List<int>),
      (this.caption.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockBlockquote{ID: $ID, text: $text, caption: $caption}';
  }
}

class PageBlockPullquote extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1329878739;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 1329878739;
  var text;
  var caption;

  PageBlockPullquote({required this.text, required this.caption});

  static PageBlockPullquote fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    var caption = reader.tgReadObject();
    return PageBlockPullquote(text: text, caption: caption);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1329878739, 4),
      (this.text.getBytes() as List<int>),
      (this.caption.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockPullquote{ID: $ID, text: $text, caption: $caption}';
  }
}

class PageBlockPhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 391759200;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 391759200;
  BigInt photoId;
  var caption;
  String? url;
  BigInt? webpageId;

  PageBlockPhoto(
      {required this.photoId,
      required this.caption,
      required this.url,
      required this.webpageId});

  static PageBlockPhoto fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var photoId = reader.readLong();
    var caption = reader.tgReadObject();
    var url;
    if ((flags & 1) == 1) {
      url = reader.tgReadString();
    } else {
      url = null;
    }
    var webpageId;
    if ((flags & 1) == 1) {
      webpageId = reader.readLong();
    } else {
      webpageId = null;
    }
    return PageBlockPhoto(
        photoId: photoId, caption: caption, url: url, webpageId: webpageId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(391759200, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.photoId, 8, little: true, signed: true),
      (this.caption.getBytes() as List<int>),
      (this.url == null || this.url == false)
          ? List<int>.empty()
          : [serializeBytes(this.url)].expand((element) => element).toList(),
      (this.webpageId == null || this.webpageId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.webpageId, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockPhoto{ID: $ID, photoId: $photoId, caption: $caption, url: $url, webpageId: $webpageId}';
  }
}

class PageBlockVideo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2089805750;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 2089805750;
  bool? autoplay;
  bool? loop;
  BigInt videoId;
  var caption;

  PageBlockVideo(
      {required this.autoplay,
      required this.loop,
      required this.videoId,
      required this.caption});

  static PageBlockVideo fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final autoplay = (flags & 1) == 1;
    final loop = (flags & 2) == 2;
    var videoId = reader.readLong();
    var caption = reader.tgReadObject();
    return PageBlockVideo(
        autoplay: autoplay, loop: loop, videoId: videoId, caption: caption);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2089805750, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.videoId, 8, little: true, signed: true),
      (this.caption.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockVideo{ID: $ID, autoplay: $autoplay, loop: $loop, videoId: $videoId, caption: $caption}';
  }
}

class PageBlockCover extends BaseConstructor {
  static const CONSTRUCTOR_ID = 972174080;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 972174080;
  var cover;

  PageBlockCover({required this.cover});

  static PageBlockCover fromReader(BinaryReader reader) {
    var len;
    var cover = reader.tgReadObject();
    return PageBlockCover(cover: cover);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(972174080, 4),
      (this.cover.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockCover{ID: $ID, cover: $cover}';
  }
}

class PageBlockEmbed extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2826014149;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 2826014149;
  bool? fullWidth;
  bool? allowScrolling;
  String? url;
  String? html;
  BigInt? posterPhotoId;
  int? w;
  int? h;
  var caption;

  PageBlockEmbed(
      {required this.fullWidth,
      required this.allowScrolling,
      required this.url,
      required this.html,
      required this.posterPhotoId,
      required this.w,
      required this.h,
      required this.caption});

  static PageBlockEmbed fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final fullWidth = (flags & 1) == 1;
    final allowScrolling = (flags & 8) == 8;
    var url;
    if ((flags & 2) == 2) {
      url = reader.tgReadString();
    } else {
      url = null;
    }
    var html;
    if ((flags & 4) == 4) {
      html = reader.tgReadString();
    } else {
      html = null;
    }
    var posterPhotoId;
    if ((flags & 16) == 16) {
      posterPhotoId = reader.readLong();
    } else {
      posterPhotoId = null;
    }
    var w;
    if ((flags & 32) == 32) {
      w = reader.readInt();
    } else {
      w = null;
    }
    var h;
    if ((flags & 32) == 32) {
      h = reader.readInt();
    } else {
      h = null;
    }
    var caption = reader.tgReadObject();
    return PageBlockEmbed(
        fullWidth: fullWidth,
        allowScrolling: allowScrolling,
        url: url,
        html: html,
        posterPhotoId: posterPhotoId,
        w: w,
        h: h,
        caption: caption);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2826014149, 4),
      [0, 0, 0, 0],
      (this.url == null || this.url == false)
          ? List<int>.empty()
          : [serializeBytes(this.url)].expand((element) => element).toList(),
      (this.html == null || this.html == false)
          ? List<int>.empty()
          : [serializeBytes(this.html)].expand((element) => element).toList(),
      (this.posterPhotoId == null || this.posterPhotoId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.posterPhotoId, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.w == null || this.w == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.w, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.h == null || this.h == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.h, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.caption.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockEmbed{ID: $ID, fullWidth: $fullWidth, allowScrolling: $allowScrolling, url: $url, html: $html, posterPhotoId: $posterPhotoId, w: $w, h: $h, caption: $caption}';
  }
}

class PageBlockEmbedPost extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4065961995;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 4065961995;
  String url;
  BigInt webpageId;
  BigInt authorPhotoId;
  String author;
  int date;
  List<dynamic> blocks;
  var caption;

  PageBlockEmbedPost(
      {required this.url,
      required this.webpageId,
      required this.authorPhotoId,
      required this.author,
      required this.date,
      required this.blocks,
      required this.caption});

  static PageBlockEmbedPost fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var webpageId = reader.readLong();
    var authorPhotoId = reader.readLong();
    var author = reader.tgReadString();
    var date = reader.readInt();
    var _vectorblocks = reader.readInt();
    if (_vectorblocks != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> blocks = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      blocks.add(reader.tgReadObject());
    }
    var caption = reader.tgReadObject();
    return PageBlockEmbedPost(
        url: url,
        webpageId: webpageId,
        authorPhotoId: authorPhotoId,
        author: author,
        date: date,
        blocks: blocks,
        caption: caption);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4065961995, 4),
      serializeBytes(this.url),
      readBufferFromBigInt(this.webpageId, 8, little: true, signed: true),
      readBufferFromBigInt(this.authorPhotoId, 8, little: true, signed: true),
      serializeBytes(this.author),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.blocks!.length, 4, little: true, signed: true),
      this
          .blocks!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.caption.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockEmbedPost{ID: $ID, url: $url, webpageId: $webpageId, authorPhotoId: $authorPhotoId, author: $author, date: $date, blocks: $blocks, caption: $caption}';
  }
}

class PageBlockCollage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1705048653;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 1705048653;
  List<dynamic> items;
  var caption;

  PageBlockCollage({required this.items, required this.caption});

  static PageBlockCollage fromReader(BinaryReader reader) {
    var len;
    var _vectoritems = reader.readInt();
    if (_vectoritems != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> items = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      items.add(reader.tgReadObject());
    }
    var caption = reader.tgReadObject();
    return PageBlockCollage(items: items, caption: caption);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1705048653, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.items!.length, 4, little: true, signed: true),
      this
          .items!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.caption.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockCollage{ID: $ID, items: $items, caption: $caption}';
  }
}

class PageBlockSlideshow extends BaseConstructor {
  static const CONSTRUCTOR_ID = 52401552;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 52401552;
  List<dynamic> items;
  var caption;

  PageBlockSlideshow({required this.items, required this.caption});

  static PageBlockSlideshow fromReader(BinaryReader reader) {
    var len;
    var _vectoritems = reader.readInt();
    if (_vectoritems != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> items = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      items.add(reader.tgReadObject());
    }
    var caption = reader.tgReadObject();
    return PageBlockSlideshow(items: items, caption: caption);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(52401552, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.items!.length, 4, little: true, signed: true),
      this
          .items!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.caption.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockSlideshow{ID: $ID, items: $items, caption: $caption}';
  }
}

class PageBlockChannel extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4011282869;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 4011282869;
  var channel;

  PageBlockChannel({required this.channel});

  static PageBlockChannel fromReader(BinaryReader reader) {
    var len;
    var channel = reader.tgReadObject();
    return PageBlockChannel(channel: channel);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4011282869, 4),
      (this.channel.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockChannel{ID: $ID, channel: $channel}';
  }
}

class PageBlockAudio extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2151899626;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 2151899626;
  BigInt audioId;
  var caption;

  PageBlockAudio({required this.audioId, required this.caption});

  static PageBlockAudio fromReader(BinaryReader reader) {
    var len;
    var audioId = reader.readLong();
    var caption = reader.tgReadObject();
    return PageBlockAudio(audioId: audioId, caption: caption);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2151899626, 4),
      readBufferFromBigInt(this.audioId, 8, little: true, signed: true),
      (this.caption.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockAudio{ID: $ID, audioId: $audioId, caption: $caption}';
  }
}

class PageBlockKicker extends BaseConstructor {
  static const CONSTRUCTOR_ID = 504660880;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 504660880;
  var text;

  PageBlockKicker({required this.text});

  static PageBlockKicker fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return PageBlockKicker(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(504660880, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockKicker{ID: $ID, text: $text}';
  }
}

class PageBlockTable extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3209554562;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 3209554562;
  bool? bordered;
  bool? striped;
  var title;
  List<dynamic> rows;

  PageBlockTable(
      {required this.bordered,
      required this.striped,
      required this.title,
      required this.rows});

  static PageBlockTable fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final bordered = (flags & 1) == 1;
    final striped = (flags & 2) == 2;
    var title = reader.tgReadObject();
    var _vectorrows = reader.readInt();
    if (_vectorrows != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> rows = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      rows.add(reader.tgReadObject());
    }
    return PageBlockTable(
        bordered: bordered, striped: striped, title: title, rows: rows);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3209554562, 4),
      [0, 0, 0, 0],
      (this.title.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.rows!.length, 4, little: true, signed: true),
      this
          .rows!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockTable{ID: $ID, bordered: $bordered, striped: $striped, title: $title, rows: $rows}';
  }
}

class PageBlockOrderedList extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2592793057;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 2592793057;
  List<dynamic> items;

  PageBlockOrderedList({required this.items});

  static PageBlockOrderedList fromReader(BinaryReader reader) {
    var len;
    var _vectoritems = reader.readInt();
    if (_vectoritems != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> items = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      items.add(reader.tgReadObject());
    }
    return PageBlockOrderedList(items: items);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2592793057, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.items!.length, 4, little: true, signed: true),
      this
          .items!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockOrderedList{ID: $ID, items: $items}';
  }
}

class PageBlockDetails extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1987480557;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 1987480557;
  bool? open;
  List<dynamic> blocks;
  var title;

  PageBlockDetails(
      {required this.open, required this.blocks, required this.title});

  static PageBlockDetails fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final open = (flags & 1) == 1;
    var _vectorblocks = reader.readInt();
    if (_vectorblocks != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> blocks = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      blocks.add(reader.tgReadObject());
    }
    var title = reader.tgReadObject();
    return PageBlockDetails(open: open, blocks: blocks, title: title);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1987480557, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.blocks!.length, 4, little: true, signed: true),
      this
          .blocks!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.title.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockDetails{ID: $ID, open: $open, blocks: $blocks, title: $title}';
  }
}

class PageBlockRelatedArticles extends BaseConstructor {
  static const CONSTRUCTOR_ID = 370236054;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 370236054;
  var title;
  List<dynamic> articles;

  PageBlockRelatedArticles({required this.title, required this.articles});

  static PageBlockRelatedArticles fromReader(BinaryReader reader) {
    var len;
    var title = reader.tgReadObject();
    var _vectorarticles = reader.readInt();
    if (_vectorarticles != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> articles = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      articles.add(reader.tgReadObject());
    }
    return PageBlockRelatedArticles(title: title, articles: articles);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(370236054, 4),
      (this.title.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.articles!.length, 4,
          little: true, signed: true),
      this
          .articles!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockRelatedArticles{ID: $ID, title: $title, articles: $articles}';
  }
}

class PageBlockMap extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2756656886;
  static const SUBCLASS_OF_ID = 449467972;
  final classType = "constructor";
  final ID = 2756656886;
  var geo;
  int zoom;
  int w;
  int h;
  var caption;

  PageBlockMap(
      {required this.geo,
      required this.zoom,
      required this.w,
      required this.h,
      required this.caption});

  static PageBlockMap fromReader(BinaryReader reader) {
    var len;
    var geo = reader.tgReadObject();
    var zoom = reader.readInt();
    var w = reader.readInt();
    var h = reader.readInt();
    var caption = reader.tgReadObject();
    return PageBlockMap(geo: geo, zoom: zoom, w: w, h: h, caption: caption);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2756656886, 4),
      (this.geo.getBytes() as List<int>),
      readBufferFromBigInt(this.zoom, 4, little: true, signed: true),
      readBufferFromBigInt(this.w, 4, little: true, signed: true),
      readBufferFromBigInt(this.h, 4, little: true, signed: true),
      (this.caption.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageBlockMap{ID: $ID, geo: $geo, zoom: $zoom, w: $w, h: $h, caption: $caption}';
  }
}

class PhoneCallDiscardReasonMissed extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2246320897;
  static const SUBCLASS_OF_ID = 3634081085;
  final classType = "constructor";
  final ID = 2246320897;

  PhoneCallDiscardReasonMissed();

  static PhoneCallDiscardReasonMissed fromReader(BinaryReader reader) {
    var len;
    return PhoneCallDiscardReasonMissed();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2246320897, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallDiscardReasonMissed{ID: $ID, }';
  }
}

class PhoneCallDiscardReasonDisconnect extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3767910816;
  static const SUBCLASS_OF_ID = 3634081085;
  final classType = "constructor";
  final ID = 3767910816;

  PhoneCallDiscardReasonDisconnect();

  static PhoneCallDiscardReasonDisconnect fromReader(BinaryReader reader) {
    var len;
    return PhoneCallDiscardReasonDisconnect();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3767910816, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallDiscardReasonDisconnect{ID: $ID, }';
  }
}

class PhoneCallDiscardReasonHangup extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1471006352;
  static const SUBCLASS_OF_ID = 3634081085;
  final classType = "constructor";
  final ID = 1471006352;

  PhoneCallDiscardReasonHangup();

  static PhoneCallDiscardReasonHangup fromReader(BinaryReader reader) {
    var len;
    return PhoneCallDiscardReasonHangup();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1471006352, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallDiscardReasonHangup{ID: $ID, }';
  }
}

class PhoneCallDiscardReasonBusy extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4210550985;
  static const SUBCLASS_OF_ID = 3634081085;
  final classType = "constructor";
  final ID = 4210550985;

  PhoneCallDiscardReasonBusy();

  static PhoneCallDiscardReasonBusy fromReader(BinaryReader reader) {
    var len;
    return PhoneCallDiscardReasonBusy();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4210550985, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallDiscardReasonBusy{ID: $ID, }';
  }
}

class DataJSON extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2104790276;
  static const SUBCLASS_OF_ID = 2902676200;
  final classType = "constructor";
  final ID = 2104790276;
  String data;

  DataJSON({required this.data});

  static DataJSON fromReader(BinaryReader reader) {
    var len;
    var data = reader.tgReadString();
    return DataJSON(data: data);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2104790276, 4),
      serializeBytes(this.data),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DataJSON{ID: $ID, data: $data}';
  }
}

class LabeledPrice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3408489464;
  static const SUBCLASS_OF_ID = 478413946;
  final classType = "constructor";
  final ID = 3408489464;
  String label;
  BigInt amount;

  LabeledPrice({required this.label, required this.amount});

  static LabeledPrice fromReader(BinaryReader reader) {
    var len;
    var label = reader.tgReadString();
    var amount = reader.readLong();
    return LabeledPrice(label: label, amount: amount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3408489464, 4),
      serializeBytes(this.label),
      readBufferFromBigInt(this.amount, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'LabeledPrice{ID: $ID, label: $label, amount: $amount}';
  }
}

class Invoice extends BaseConstructor {
  static const CONSTRUCTOR_ID = 215516896;
  static const SUBCLASS_OF_ID = 1608003288;
  final classType = "constructor";
  final ID = 215516896;
  bool? test;
  bool? nameRequested;
  bool? phoneRequested;
  bool? emailRequested;
  bool? shippingAddressRequested;
  bool? flexible;
  bool? phoneToProvider;
  bool? emailToProvider;
  String currency;
  List<dynamic> prices;
  BigInt? maxTipAmount;
  List<BigInt>? suggestedTipAmounts;

  Invoice(
      {required this.test,
      required this.nameRequested,
      required this.phoneRequested,
      required this.emailRequested,
      required this.shippingAddressRequested,
      required this.flexible,
      required this.phoneToProvider,
      required this.emailToProvider,
      required this.currency,
      required this.prices,
      required this.maxTipAmount,
      required this.suggestedTipAmounts});

  static Invoice fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final test = (flags & 1) == 1;
    final nameRequested = (flags & 2) == 2;
    final phoneRequested = (flags & 4) == 4;
    final emailRequested = (flags & 8) == 8;
    final shippingAddressRequested = (flags & 16) == 16;
    final flexible = (flags & 32) == 32;
    final phoneToProvider = (flags & 64) == 64;
    final emailToProvider = (flags & 128) == 128;
    var currency = reader.tgReadString();
    var _vectorprices = reader.readInt();
    if (_vectorprices != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> prices = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      prices.add(reader.tgReadObject());
    }
    var maxTipAmount;
    if ((flags & 256) == 256) {
      maxTipAmount = reader.readLong();
    } else {
      maxTipAmount = null;
    }
    var suggestedTipAmounts;
    if ((flags & 256) == 256) {
      var _vectorsuggestedTipAmounts = reader.readInt();
      if (_vectorsuggestedTipAmounts != 481674261)
        throw Exception('Wrong vectorId');
      List<BigInt> suggestedTipAmounts = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        suggestedTipAmounts.add(reader.readLong());
      }
    } else {
      suggestedTipAmounts = null;
    }
    return Invoice(
        test: test,
        nameRequested: nameRequested,
        phoneRequested: phoneRequested,
        emailRequested: emailRequested,
        shippingAddressRequested: shippingAddressRequested,
        flexible: flexible,
        phoneToProvider: phoneToProvider,
        emailToProvider: emailToProvider,
        currency: currency,
        prices: prices,
        maxTipAmount: maxTipAmount,
        suggestedTipAmounts: suggestedTipAmounts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(215516896, 4),
      [0, 0, 0, 0],
      serializeBytes(this.currency),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.prices!.length, 4, little: true, signed: true),
      this
          .prices!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.maxTipAmount == null || this.maxTipAmount == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.maxTipAmount, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.suggestedTipAmounts == null || this.suggestedTipAmounts == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.suggestedTipAmounts!.length, 4,
                  little: true, signed: true),
              this
                  .suggestedTipAmounts!
                  .map((x) =>
                      readBufferFromBigInt(x, 8, little: true, signed: true))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Invoice{ID: $ID, test: $test, nameRequested: $nameRequested, phoneRequested: $phoneRequested, emailRequested: $emailRequested, shippingAddressRequested: $shippingAddressRequested, flexible: $flexible, phoneToProvider: $phoneToProvider, emailToProvider: $emailToProvider, currency: $currency, prices: $prices, maxTipAmount: $maxTipAmount, suggestedTipAmounts: $suggestedTipAmounts}';
  }
}

class PaymentCharge extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3926049406;
  static const SUBCLASS_OF_ID = 1019752665;
  final classType = "constructor";
  final ID = 3926049406;
  String id;
  String providerChargeId;

  PaymentCharge({required this.id, required this.providerChargeId});

  static PaymentCharge fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadString();
    var providerChargeId = reader.tgReadString();
    return PaymentCharge(id: id, providerChargeId: providerChargeId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3926049406, 4),
      serializeBytes(this.id),
      serializeBytes(this.providerChargeId),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PaymentCharge{ID: $ID, id: $id, providerChargeId: $providerChargeId}';
  }
}

class PostAddress extends BaseConstructor {
  static const CONSTRUCTOR_ID = 512535275;
  static const SUBCLASS_OF_ID = 2373900844;
  final classType = "constructor";
  final ID = 512535275;
  String streetLine1;
  String streetLine2;
  String city;
  String state;
  String countryIso2;
  String postCode;

  PostAddress(
      {required this.streetLine1,
      required this.streetLine2,
      required this.city,
      required this.state,
      required this.countryIso2,
      required this.postCode});

  static PostAddress fromReader(BinaryReader reader) {
    var len;
    var streetLine1 = reader.tgReadString();
    var streetLine2 = reader.tgReadString();
    var city = reader.tgReadString();
    var state = reader.tgReadString();
    var countryIso2 = reader.tgReadString();
    var postCode = reader.tgReadString();
    return PostAddress(
        streetLine1: streetLine1,
        streetLine2: streetLine2,
        city: city,
        state: state,
        countryIso2: countryIso2,
        postCode: postCode);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(512535275, 4),
      serializeBytes(this.streetLine1),
      serializeBytes(this.streetLine2),
      serializeBytes(this.city),
      serializeBytes(this.state),
      serializeBytes(this.countryIso2),
      serializeBytes(this.postCode),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PostAddress{ID: $ID, streetLine1: $streetLine1, streetLine2: $streetLine2, city: $city, state: $state, countryIso2: $countryIso2, postCode: $postCode}';
  }
}

class PaymentRequestedInfo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2426158996;
  static const SUBCLASS_OF_ID = 2377134406;
  final classType = "constructor";
  final ID = 2426158996;
  String? name;
  String? phone;
  String? email;
  var shippingAddress;

  PaymentRequestedInfo(
      {required this.name,
      required this.phone,
      required this.email,
      required this.shippingAddress});

  static PaymentRequestedInfo fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var name;
    if ((flags & 1) == 1) {
      name = reader.tgReadString();
    } else {
      name = null;
    }
    var phone;
    if ((flags & 2) == 2) {
      phone = reader.tgReadString();
    } else {
      phone = null;
    }
    var email;
    if ((flags & 4) == 4) {
      email = reader.tgReadString();
    } else {
      email = null;
    }
    var shippingAddress;
    if ((flags & 8) == 8) {
      shippingAddress = reader.tgReadObject();
    } else {
      shippingAddress = null;
    }
    return PaymentRequestedInfo(
        name: name,
        phone: phone,
        email: email,
        shippingAddress: shippingAddress);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2426158996, 4),
      [0, 0, 0, 0],
      (this.name == null || this.name == false)
          ? List<int>.empty()
          : [serializeBytes(this.name)].expand((element) => element).toList(),
      (this.phone == null || this.phone == false)
          ? List<int>.empty()
          : [serializeBytes(this.phone)].expand((element) => element).toList(),
      (this.email == null || this.email == false)
          ? List<int>.empty()
          : [serializeBytes(this.email)].expand((element) => element).toList(),
      (this.shippingAddress == null || this.shippingAddress == false)
          ? List<int>.empty()
          : [(this.shippingAddress.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PaymentRequestedInfo{ID: $ID, name: $name, phone: $phone, email: $email, shippingAddress: $shippingAddress}';
  }
}

class PaymentSavedCredentialsCard extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3452074527;
  static const SUBCLASS_OF_ID = 3009576675;
  final classType = "constructor";
  final ID = 3452074527;
  String id;
  String title;

  PaymentSavedCredentialsCard({required this.id, required this.title});

  static PaymentSavedCredentialsCard fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadString();
    var title = reader.tgReadString();
    return PaymentSavedCredentialsCard(id: id, title: title);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3452074527, 4),
      serializeBytes(this.id),
      serializeBytes(this.title),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PaymentSavedCredentialsCard{ID: $ID, id: $id, title: $title}';
  }
}

class WebDocument extends BaseConstructor {
  static const CONSTRUCTOR_ID = 475467473;
  static const SUBCLASS_OF_ID = 996419604;
  final classType = "constructor";
  final ID = 475467473;
  String url;
  BigInt accessHash;
  int size;
  String mimeType;
  List<dynamic> attributes;

  WebDocument(
      {required this.url,
      required this.accessHash,
      required this.size,
      required this.mimeType,
      required this.attributes});

  static WebDocument fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var accessHash = reader.readLong();
    var size = reader.readInt();
    var mimeType = reader.tgReadString();
    var _vectorattributes = reader.readInt();
    if (_vectorattributes != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> attributes = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      attributes.add(reader.tgReadObject());
    }
    return WebDocument(
        url: url,
        accessHash: accessHash,
        size: size,
        mimeType: mimeType,
        attributes: attributes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(475467473, 4),
      serializeBytes(this.url),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.size, 4, little: true, signed: true),
      serializeBytes(this.mimeType),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.attributes!.length, 4,
          little: true, signed: true),
      this
          .attributes!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WebDocument{ID: $ID, url: $url, accessHash: $accessHash, size: $size, mimeType: $mimeType, attributes: $attributes}';
  }
}

class WebDocumentNoProxy extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4190682310;
  static const SUBCLASS_OF_ID = 996419604;
  final classType = "constructor";
  final ID = 4190682310;
  String url;
  int size;
  String mimeType;
  List<dynamic> attributes;

  WebDocumentNoProxy(
      {required this.url,
      required this.size,
      required this.mimeType,
      required this.attributes});

  static WebDocumentNoProxy fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var size = reader.readInt();
    var mimeType = reader.tgReadString();
    var _vectorattributes = reader.readInt();
    if (_vectorattributes != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> attributes = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      attributes.add(reader.tgReadObject());
    }
    return WebDocumentNoProxy(
        url: url, size: size, mimeType: mimeType, attributes: attributes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4190682310, 4),
      serializeBytes(this.url),
      readBufferFromBigInt(this.size, 4, little: true, signed: true),
      serializeBytes(this.mimeType),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.attributes!.length, 4,
          little: true, signed: true),
      this
          .attributes!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WebDocumentNoProxy{ID: $ID, url: $url, size: $size, mimeType: $mimeType, attributes: $attributes}';
  }
}

class InputWebDocument extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2616017741;
  static const SUBCLASS_OF_ID = 2330505542;
  final classType = "constructor";
  final ID = 2616017741;
  String url;
  int size;
  String mimeType;
  List<dynamic> attributes;

  InputWebDocument(
      {required this.url,
      required this.size,
      required this.mimeType,
      required this.attributes});

  static InputWebDocument fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var size = reader.readInt();
    var mimeType = reader.tgReadString();
    var _vectorattributes = reader.readInt();
    if (_vectorattributes != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> attributes = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      attributes.add(reader.tgReadObject());
    }
    return InputWebDocument(
        url: url, size: size, mimeType: mimeType, attributes: attributes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2616017741, 4),
      serializeBytes(this.url),
      readBufferFromBigInt(this.size, 4, little: true, signed: true),
      serializeBytes(this.mimeType),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.attributes!.length, 4,
          little: true, signed: true),
      this
          .attributes!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputWebDocument{ID: $ID, url: $url, size: $size, mimeType: $mimeType, attributes: $attributes}';
  }
}

class InputWebFileLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3258570374;
  static const SUBCLASS_OF_ID = 4147042521;
  final classType = "constructor";
  final ID = 3258570374;
  String url;
  BigInt accessHash;

  InputWebFileLocation({required this.url, required this.accessHash});

  static InputWebFileLocation fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var accessHash = reader.readLong();
    return InputWebFileLocation(url: url, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3258570374, 4),
      serializeBytes(this.url),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputWebFileLocation{ID: $ID, url: $url, accessHash: $accessHash}';
  }
}

class InputWebFileGeoPointLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2669814217;
  static const SUBCLASS_OF_ID = 4147042521;
  final classType = "constructor";
  final ID = 2669814217;
  var geoPoint;
  BigInt accessHash;
  int w;
  int h;
  int zoom;
  int scale;

  InputWebFileGeoPointLocation(
      {required this.geoPoint,
      required this.accessHash,
      required this.w,
      required this.h,
      required this.zoom,
      required this.scale});

  static InputWebFileGeoPointLocation fromReader(BinaryReader reader) {
    var len;
    var geoPoint = reader.tgReadObject();
    var accessHash = reader.readLong();
    var w = reader.readInt();
    var h = reader.readInt();
    var zoom = reader.readInt();
    var scale = reader.readInt();
    return InputWebFileGeoPointLocation(
        geoPoint: geoPoint,
        accessHash: accessHash,
        w: w,
        h: h,
        zoom: zoom,
        scale: scale);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2669814217, 4),
      (this.geoPoint.getBytes() as List<int>),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.w, 4, little: true, signed: true),
      readBufferFromBigInt(this.h, 4, little: true, signed: true),
      readBufferFromBigInt(this.zoom, 4, little: true, signed: true),
      readBufferFromBigInt(this.scale, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputWebFileGeoPointLocation{ID: $ID, geoPoint: $geoPoint, accessHash: $accessHash, w: $w, h: $h, zoom: $zoom, scale: $scale}';
  }
}

class InputPaymentCredentialsSaved extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3238965967;
  static const SUBCLASS_OF_ID = 681157949;
  final classType = "constructor";
  final ID = 3238965967;
  String id;
  List<int> tmpPassword;

  InputPaymentCredentialsSaved({required this.id, required this.tmpPassword});

  static InputPaymentCredentialsSaved fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadString();
    var tmpPassword = reader.tgReadBytes();
    return InputPaymentCredentialsSaved(id: id, tmpPassword: tmpPassword);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3238965967, 4),
      serializeBytes(this.id),
      serializeBytes(this.tmpPassword),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPaymentCredentialsSaved{ID: $ID, id: $id, tmpPassword: $tmpPassword}';
  }
}

class InputPaymentCredentials extends BaseConstructor {
  static const CONSTRUCTOR_ID = 873977640;
  static const SUBCLASS_OF_ID = 681157949;
  final classType = "constructor";
  final ID = 873977640;
  bool? save;
  var data;

  InputPaymentCredentials({required this.save, required this.data});

  static InputPaymentCredentials fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final save = (flags & 1) == 1;
    var data = reader.tgReadObject();
    return InputPaymentCredentials(save: save, data: data);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(873977640, 4),
      [0, 0, 0, 0],
      (this.data.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPaymentCredentials{ID: $ID, save: $save, data: $data}';
  }
}

class InputPaymentCredentialsApplePay extends BaseConstructor {
  static const CONSTRUCTOR_ID = 178373535;
  static const SUBCLASS_OF_ID = 681157949;
  final classType = "constructor";
  final ID = 178373535;
  var paymentData;

  InputPaymentCredentialsApplePay({required this.paymentData});

  static InputPaymentCredentialsApplePay fromReader(BinaryReader reader) {
    var len;
    var paymentData = reader.tgReadObject();
    return InputPaymentCredentialsApplePay(paymentData: paymentData);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(178373535, 4),
      (this.paymentData.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPaymentCredentialsApplePay{ID: $ID, paymentData: $paymentData}';
  }
}

class InputPaymentCredentialsGooglePay extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2328045569;
  static const SUBCLASS_OF_ID = 681157949;
  final classType = "constructor";
  final ID = 2328045569;
  var paymentToken;

  InputPaymentCredentialsGooglePay({required this.paymentToken});

  static InputPaymentCredentialsGooglePay fromReader(BinaryReader reader) {
    var len;
    var paymentToken = reader.tgReadObject();
    return InputPaymentCredentialsGooglePay(paymentToken: paymentToken);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2328045569, 4),
      (this.paymentToken.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPaymentCredentialsGooglePay{ID: $ID, paymentToken: $paymentToken}';
  }
}

class ShippingOption extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3055631583;
  static const SUBCLASS_OF_ID = 4108930168;
  final classType = "constructor";
  final ID = 3055631583;
  String id;
  String title;
  List<dynamic> prices;

  ShippingOption({required this.id, required this.title, required this.prices});

  static ShippingOption fromReader(BinaryReader reader) {
    var len;
    var id = reader.tgReadString();
    var title = reader.tgReadString();
    var _vectorprices = reader.readInt();
    if (_vectorprices != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> prices = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      prices.add(reader.tgReadObject());
    }
    return ShippingOption(id: id, title: title, prices: prices);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3055631583, 4),
      serializeBytes(this.id),
      serializeBytes(this.title),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.prices!.length, 4, little: true, signed: true),
      this
          .prices!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ShippingOption{ID: $ID, id: $id, title: $title, prices: $prices}';
  }
}

class InputStickerSetItem extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4288717974;
  static const SUBCLASS_OF_ID = 2925129845;
  final classType = "constructor";
  final ID = 4288717974;
  var document;
  String emoji;
  var maskCoords;

  InputStickerSetItem(
      {required this.document, required this.emoji, required this.maskCoords});

  static InputStickerSetItem fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var document = reader.tgReadObject();
    var emoji = reader.tgReadString();
    var maskCoords;
    if ((flags & 1) == 1) {
      maskCoords = reader.tgReadObject();
    } else {
      maskCoords = null;
    }
    return InputStickerSetItem(
        document: document, emoji: emoji, maskCoords: maskCoords);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4288717974, 4),
      [0, 0, 0, 0],
      (this.document.getBytes() as List<int>),
      serializeBytes(this.emoji),
      (this.maskCoords == null || this.maskCoords == false)
          ? List<int>.empty()
          : [(this.maskCoords.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputStickerSetItem{ID: $ID, document: $document, emoji: $emoji, maskCoords: $maskCoords}';
  }
}

class InputPhoneCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 506920429;
  static const SUBCLASS_OF_ID = 3165319744;
  final classType = "constructor";
  final ID = 506920429;
  BigInt id;
  BigInt accessHash;

  InputPhoneCall({required this.id, required this.accessHash});

  static InputPhoneCall fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputPhoneCall(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(506920429, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputPhoneCall{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class PhoneCallEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1399245077;
  static const SUBCLASS_OF_ID = 3296664529;
  final classType = "constructor";
  final ID = 1399245077;
  BigInt id;

  PhoneCallEmpty({required this.id});

  static PhoneCallEmpty fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    return PhoneCallEmpty(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1399245077, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallEmpty{ID: $ID, id: $id}';
  }
}

class PhoneCallWaiting extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3307368215;
  static const SUBCLASS_OF_ID = 3296664529;
  final classType = "constructor";
  final ID = 3307368215;
  bool? video;
  BigInt id;
  BigInt accessHash;
  int date;
  BigInt adminId;
  BigInt participantId;
  var protocol;
  int? receiveDate;

  PhoneCallWaiting(
      {required this.video,
      required this.id,
      required this.accessHash,
      required this.date,
      required this.adminId,
      required this.participantId,
      required this.protocol,
      required this.receiveDate});

  static PhoneCallWaiting fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final video = (flags & 64) == 64;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var date = reader.readInt();
    var adminId = reader.readLong();
    var participantId = reader.readLong();
    var protocol = reader.tgReadObject();
    var receiveDate;
    if ((flags & 1) == 1) {
      receiveDate = reader.readInt();
    } else {
      receiveDate = null;
    }
    return PhoneCallWaiting(
        video: video,
        id: id,
        accessHash: accessHash,
        date: date,
        adminId: adminId,
        participantId: participantId,
        protocol: protocol,
        receiveDate: receiveDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3307368215, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.adminId, 8, little: true, signed: true),
      readBufferFromBigInt(this.participantId, 8, little: true, signed: true),
      (this.protocol.getBytes() as List<int>),
      (this.receiveDate == null || this.receiveDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.receiveDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallWaiting{ID: $ID, video: $video, id: $id, accessHash: $accessHash, date: $date, adminId: $adminId, participantId: $participantId, protocol: $protocol, receiveDate: $receiveDate}';
  }
}

class PhoneCallRequested extends BaseConstructor {
  static const CONSTRUCTOR_ID = 347139340;
  static const SUBCLASS_OF_ID = 3296664529;
  final classType = "constructor";
  final ID = 347139340;
  bool? video;
  BigInt id;
  BigInt accessHash;
  int date;
  BigInt adminId;
  BigInt participantId;
  List<int> gAHash;
  var protocol;

  PhoneCallRequested(
      {required this.video,
      required this.id,
      required this.accessHash,
      required this.date,
      required this.adminId,
      required this.participantId,
      required this.gAHash,
      required this.protocol});

  static PhoneCallRequested fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final video = (flags & 64) == 64;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var date = reader.readInt();
    var adminId = reader.readLong();
    var participantId = reader.readLong();
    var gAHash = reader.tgReadBytes();
    var protocol = reader.tgReadObject();
    return PhoneCallRequested(
        video: video,
        id: id,
        accessHash: accessHash,
        date: date,
        adminId: adminId,
        participantId: participantId,
        gAHash: gAHash,
        protocol: protocol);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(347139340, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.adminId, 8, little: true, signed: true),
      readBufferFromBigInt(this.participantId, 8, little: true, signed: true),
      serializeBytes(this.gAHash),
      (this.protocol.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallRequested{ID: $ID, video: $video, id: $id, accessHash: $accessHash, date: $date, adminId: $adminId, participantId: $participantId, gAHash: $gAHash, protocol: $protocol}';
  }
}

class PhoneCallAccepted extends BaseConstructor {
  static const CONSTRUCTOR_ID = 912311057;
  static const SUBCLASS_OF_ID = 3296664529;
  final classType = "constructor";
  final ID = 912311057;
  bool? video;
  BigInt id;
  BigInt accessHash;
  int date;
  BigInt adminId;
  BigInt participantId;
  List<int> gB;
  var protocol;

  PhoneCallAccepted(
      {required this.video,
      required this.id,
      required this.accessHash,
      required this.date,
      required this.adminId,
      required this.participantId,
      required this.gB,
      required this.protocol});

  static PhoneCallAccepted fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final video = (flags & 64) == 64;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var date = reader.readInt();
    var adminId = reader.readLong();
    var participantId = reader.readLong();
    var gB = reader.tgReadBytes();
    var protocol = reader.tgReadObject();
    return PhoneCallAccepted(
        video: video,
        id: id,
        accessHash: accessHash,
        date: date,
        adminId: adminId,
        participantId: participantId,
        gB: gB,
        protocol: protocol);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(912311057, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.adminId, 8, little: true, signed: true),
      readBufferFromBigInt(this.participantId, 8, little: true, signed: true),
      serializeBytes(this.gB),
      (this.protocol.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallAccepted{ID: $ID, video: $video, id: $id, accessHash: $accessHash, date: $date, adminId: $adminId, participantId: $participantId, gB: $gB, protocol: $protocol}';
  }
}

class PhoneCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2524937319;
  static const SUBCLASS_OF_ID = 3296664529;
  final classType = "constructor";
  final ID = 2524937319;
  bool? p2pAllowed;
  bool? video;
  BigInt id;
  BigInt accessHash;
  int date;
  BigInt adminId;
  BigInt participantId;
  List<int> gAOrB;
  BigInt keyFingerprint;
  var protocol;
  List<dynamic> connections;
  int startDate;

  PhoneCall(
      {required this.p2pAllowed,
      required this.video,
      required this.id,
      required this.accessHash,
      required this.date,
      required this.adminId,
      required this.participantId,
      required this.gAOrB,
      required this.keyFingerprint,
      required this.protocol,
      required this.connections,
      required this.startDate});

  static PhoneCall fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final p2pAllowed = (flags & 32) == 32;
    final video = (flags & 64) == 64;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var date = reader.readInt();
    var adminId = reader.readLong();
    var participantId = reader.readLong();
    var gAOrB = reader.tgReadBytes();
    var keyFingerprint = reader.readLong();
    var protocol = reader.tgReadObject();
    var _vectorconnections = reader.readInt();
    if (_vectorconnections != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> connections = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      connections.add(reader.tgReadObject());
    }
    var startDate = reader.readInt();
    return PhoneCall(
        p2pAllowed: p2pAllowed,
        video: video,
        id: id,
        accessHash: accessHash,
        date: date,
        adminId: adminId,
        participantId: participantId,
        gAOrB: gAOrB,
        keyFingerprint: keyFingerprint,
        protocol: protocol,
        connections: connections,
        startDate: startDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2524937319, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.adminId, 8, little: true, signed: true),
      readBufferFromBigInt(this.participantId, 8, little: true, signed: true),
      serializeBytes(this.gAOrB),
      readBufferFromBigInt(this.keyFingerprint, 8, little: true, signed: true),
      (this.protocol.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.connections!.length, 4,
          little: true, signed: true),
      this
          .connections!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(this.startDate, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCall{ID: $ID, p2pAllowed: $p2pAllowed, video: $video, id: $id, accessHash: $accessHash, date: $date, adminId: $adminId, participantId: $participantId, gAOrB: $gAOrB, keyFingerprint: $keyFingerprint, protocol: $protocol, connections: $connections, startDate: $startDate}';
  }
}

class PhoneCallDiscarded extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1355435489;
  static const SUBCLASS_OF_ID = 3296664529;
  final classType = "constructor";
  final ID = 1355435489;
  bool? needRating;
  bool? needDebug;
  bool? video;
  BigInt id;
  var reason;
  int? duration;

  PhoneCallDiscarded(
      {required this.needRating,
      required this.needDebug,
      required this.video,
      required this.id,
      required this.reason,
      required this.duration});

  static PhoneCallDiscarded fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final needRating = (flags & 4) == 4;
    final needDebug = (flags & 8) == 8;
    final video = (flags & 64) == 64;
    var id = reader.readLong();
    var reason;
    if ((flags & 1) == 1) {
      reason = reader.tgReadObject();
    } else {
      reason = null;
    }
    var duration;
    if ((flags & 2) == 2) {
      duration = reader.readInt();
    } else {
      duration = null;
    }
    return PhoneCallDiscarded(
        needRating: needRating,
        needDebug: needDebug,
        video: video,
        id: id,
        reason: reason,
        duration: duration);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1355435489, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      (this.reason == null || this.reason == false)
          ? List<int>.empty()
          : [(this.reason.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.duration == null || this.duration == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.duration, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallDiscarded{ID: $ID, needRating: $needRating, needDebug: $needDebug, video: $video, id: $id, reason: $reason, duration: $duration}';
  }
}

class PhoneConnection extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2639009728;
  static const SUBCLASS_OF_ID = 2861425677;
  final classType = "constructor";
  final ID = 2639009728;
  BigInt id;
  String ip;
  String ipv6;
  int port;
  List<int> peerTag;

  PhoneConnection(
      {required this.id,
      required this.ip,
      required this.ipv6,
      required this.port,
      required this.peerTag});

  static PhoneConnection fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var ip = reader.tgReadString();
    var ipv6 = reader.tgReadString();
    var port = reader.readInt();
    var peerTag = reader.tgReadBytes();
    return PhoneConnection(
        id: id, ip: ip, ipv6: ipv6, port: port, peerTag: peerTag);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2639009728, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      serializeBytes(this.ip),
      serializeBytes(this.ipv6),
      readBufferFromBigInt(this.port, 4, little: true, signed: true),
      serializeBytes(this.peerTag),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneConnection{ID: $ID, id: $id, ip: $ip, ipv6: $ipv6, port: $port, peerTag: $peerTag}';
  }
}

class PhoneConnectionWebrtc extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1667228533;
  static const SUBCLASS_OF_ID = 2861425677;
  final classType = "constructor";
  final ID = 1667228533;
  bool? turn;
  bool? stun;
  BigInt id;
  String ip;
  String ipv6;
  int port;
  String username;
  String password;

  PhoneConnectionWebrtc(
      {required this.turn,
      required this.stun,
      required this.id,
      required this.ip,
      required this.ipv6,
      required this.port,
      required this.username,
      required this.password});

  static PhoneConnectionWebrtc fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final turn = (flags & 1) == 1;
    final stun = (flags & 2) == 2;
    var id = reader.readLong();
    var ip = reader.tgReadString();
    var ipv6 = reader.tgReadString();
    var port = reader.readInt();
    var username = reader.tgReadString();
    var password = reader.tgReadString();
    return PhoneConnectionWebrtc(
        turn: turn,
        stun: stun,
        id: id,
        ip: ip,
        ipv6: ipv6,
        port: port,
        username: username,
        password: password);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1667228533, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      serializeBytes(this.ip),
      serializeBytes(this.ipv6),
      readBufferFromBigInt(this.port, 4, little: true, signed: true),
      serializeBytes(this.username),
      serializeBytes(this.password),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneConnectionWebrtc{ID: $ID, turn: $turn, stun: $stun, id: $id, ip: $ip, ipv6: $ipv6, port: $port, username: $username, password: $password}';
  }
}

class PhoneCallProtocol extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4236742600;
  static const SUBCLASS_OF_ID = 2017038755;
  final classType = "constructor";
  final ID = 4236742600;
  bool? udpP2p;
  bool? udpReflector;
  int minLayer;
  int maxLayer;
  List<String> libraryVersions;

  PhoneCallProtocol(
      {required this.udpP2p,
      required this.udpReflector,
      required this.minLayer,
      required this.maxLayer,
      required this.libraryVersions});

  static PhoneCallProtocol fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final udpP2p = (flags & 1) == 1;
    final udpReflector = (flags & 2) == 2;
    var minLayer = reader.readInt();
    var maxLayer = reader.readInt();
    var _vectorlibraryVersions = reader.readInt();
    if (_vectorlibraryVersions != 481674261) throw Exception('Wrong vectorId');
    List<String> libraryVersions = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      libraryVersions.add(reader.tgReadString());
    }
    return PhoneCallProtocol(
        udpP2p: udpP2p,
        udpReflector: udpReflector,
        minLayer: minLayer,
        maxLayer: maxLayer,
        libraryVersions: libraryVersions);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4236742600, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.minLayer, 4, little: true, signed: true),
      readBufferFromBigInt(this.maxLayer, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.libraryVersions!.length, 4,
          little: true, signed: true),
      this
          .libraryVersions!
          .map((x) => serializeBytes(x))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PhoneCallProtocol{ID: $ID, udpP2p: $udpP2p, udpReflector: $udpReflector, minLayer: $minLayer, maxLayer: $maxLayer, libraryVersions: $libraryVersions}';
  }
}

class CdnPublicKey extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3380800186;
  static const SUBCLASS_OF_ID = 383469555;
  final classType = "constructor";
  final ID = 3380800186;
  int dcId;
  String publicKey;

  CdnPublicKey({required this.dcId, required this.publicKey});

  static CdnPublicKey fromReader(BinaryReader reader) {
    var len;
    var dcId = reader.readInt();
    var publicKey = reader.tgReadString();
    return CdnPublicKey(dcId: dcId, publicKey: publicKey);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3380800186, 4),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
      serializeBytes(this.publicKey),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'CdnPublicKey{ID: $ID, dcId: $dcId, publicKey: $publicKey}';
  }
}

class CdnConfig extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1462101002;
  static const SUBCLASS_OF_ID = 3973724540;
  final classType = "constructor";
  final ID = 1462101002;
  List<dynamic> publicKeys;

  CdnConfig({required this.publicKeys});

  static CdnConfig fromReader(BinaryReader reader) {
    var len;
    var _vectorpublicKeys = reader.readInt();
    if (_vectorpublicKeys != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> publicKeys = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      publicKeys.add(reader.tgReadObject());
    }
    return CdnConfig(publicKeys: publicKeys);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1462101002, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.publicKeys!.length, 4,
          little: true, signed: true),
      this
          .publicKeys!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'CdnConfig{ID: $ID, publicKeys: $publicKeys}';
  }
}

class LangPackString extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3402727926;
  static const SUBCLASS_OF_ID = 3692534457;
  final classType = "constructor";
  final ID = 3402727926;
  String key;
  String value;

  LangPackString({required this.key, required this.value});

  static LangPackString fromReader(BinaryReader reader) {
    var len;
    var key = reader.tgReadString();
    var value = reader.tgReadString();
    return LangPackString(key: key, value: value);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3402727926, 4),
      serializeBytes(this.key),
      serializeBytes(this.value),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'LangPackString{ID: $ID, key: $key, value: $value}';
  }
}

class LangPackStringPluralized extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1816636575;
  static const SUBCLASS_OF_ID = 3692534457;
  final classType = "constructor";
  final ID = 1816636575;
  String key;
  String? zeroValue;
  String? oneValue;
  String? twoValue;
  String? fewValue;
  String? manyValue;
  String otherValue;

  LangPackStringPluralized(
      {required this.key,
      required this.zeroValue,
      required this.oneValue,
      required this.twoValue,
      required this.fewValue,
      required this.manyValue,
      required this.otherValue});

  static LangPackStringPluralized fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var key = reader.tgReadString();
    var zeroValue;
    if ((flags & 1) == 1) {
      zeroValue = reader.tgReadString();
    } else {
      zeroValue = null;
    }
    var oneValue;
    if ((flags & 2) == 2) {
      oneValue = reader.tgReadString();
    } else {
      oneValue = null;
    }
    var twoValue;
    if ((flags & 4) == 4) {
      twoValue = reader.tgReadString();
    } else {
      twoValue = null;
    }
    var fewValue;
    if ((flags & 8) == 8) {
      fewValue = reader.tgReadString();
    } else {
      fewValue = null;
    }
    var manyValue;
    if ((flags & 16) == 16) {
      manyValue = reader.tgReadString();
    } else {
      manyValue = null;
    }
    var otherValue = reader.tgReadString();
    return LangPackStringPluralized(
        key: key,
        zeroValue: zeroValue,
        oneValue: oneValue,
        twoValue: twoValue,
        fewValue: fewValue,
        manyValue: manyValue,
        otherValue: otherValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1816636575, 4),
      [0, 0, 0, 0],
      serializeBytes(this.key),
      (this.zeroValue == null || this.zeroValue == false)
          ? List<int>.empty()
          : [serializeBytes(this.zeroValue)]
              .expand((element) => element)
              .toList(),
      (this.oneValue == null || this.oneValue == false)
          ? List<int>.empty()
          : [serializeBytes(this.oneValue)]
              .expand((element) => element)
              .toList(),
      (this.twoValue == null || this.twoValue == false)
          ? List<int>.empty()
          : [serializeBytes(this.twoValue)]
              .expand((element) => element)
              .toList(),
      (this.fewValue == null || this.fewValue == false)
          ? List<int>.empty()
          : [serializeBytes(this.fewValue)]
              .expand((element) => element)
              .toList(),
      (this.manyValue == null || this.manyValue == false)
          ? List<int>.empty()
          : [serializeBytes(this.manyValue)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.otherValue),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'LangPackStringPluralized{ID: $ID, key: $key, zeroValue: $zeroValue, oneValue: $oneValue, twoValue: $twoValue, fewValue: $fewValue, manyValue: $manyValue, otherValue: $otherValue}';
  }
}

class LangPackStringDeleted extends BaseConstructor {
  static const CONSTRUCTOR_ID = 695856818;
  static const SUBCLASS_OF_ID = 3692534457;
  final classType = "constructor";
  final ID = 695856818;
  String key;

  LangPackStringDeleted({required this.key});

  static LangPackStringDeleted fromReader(BinaryReader reader) {
    var len;
    var key = reader.tgReadString();
    return LangPackStringDeleted(key: key);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(695856818, 4),
      serializeBytes(this.key),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'LangPackStringDeleted{ID: $ID, key: $key}';
  }
}

class LangPackDifference extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4085629430;
  static const SUBCLASS_OF_ID = 1382427989;
  final classType = "constructor";
  final ID = 4085629430;
  String langCode;
  int fromVersion;
  int version;
  List<dynamic> strings;

  LangPackDifference(
      {required this.langCode,
      required this.fromVersion,
      required this.version,
      required this.strings});

  static LangPackDifference fromReader(BinaryReader reader) {
    var len;
    var langCode = reader.tgReadString();
    var fromVersion = reader.readInt();
    var version = reader.readInt();
    var _vectorstrings = reader.readInt();
    if (_vectorstrings != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> strings = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      strings.add(reader.tgReadObject());
    }
    return LangPackDifference(
        langCode: langCode,
        fromVersion: fromVersion,
        version: version,
        strings: strings);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4085629430, 4),
      serializeBytes(this.langCode),
      readBufferFromBigInt(this.fromVersion, 4, little: true, signed: true),
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.strings!.length, 4, little: true, signed: true),
      this
          .strings!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'LangPackDifference{ID: $ID, langCode: $langCode, fromVersion: $fromVersion, version: $version, strings: $strings}';
  }
}

class LangPackLanguage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4006239459;
  static const SUBCLASS_OF_ID = 2880211383;
  final classType = "constructor";
  final ID = 4006239459;
  bool? official;
  bool? rtl;
  bool? beta;
  String name;
  String nativeName;
  String langCode;
  String? baseLangCode;
  String pluralCode;
  int stringsCount;
  int translatedCount;
  String translationsUrl;

  LangPackLanguage(
      {required this.official,
      required this.rtl,
      required this.beta,
      required this.name,
      required this.nativeName,
      required this.langCode,
      required this.baseLangCode,
      required this.pluralCode,
      required this.stringsCount,
      required this.translatedCount,
      required this.translationsUrl});

  static LangPackLanguage fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final official = (flags & 1) == 1;
    final rtl = (flags & 4) == 4;
    final beta = (flags & 8) == 8;
    var name = reader.tgReadString();
    var nativeName = reader.tgReadString();
    var langCode = reader.tgReadString();
    var baseLangCode;
    if ((flags & 2) == 2) {
      baseLangCode = reader.tgReadString();
    } else {
      baseLangCode = null;
    }
    var pluralCode = reader.tgReadString();
    var stringsCount = reader.readInt();
    var translatedCount = reader.readInt();
    var translationsUrl = reader.tgReadString();
    return LangPackLanguage(
        official: official,
        rtl: rtl,
        beta: beta,
        name: name,
        nativeName: nativeName,
        langCode: langCode,
        baseLangCode: baseLangCode,
        pluralCode: pluralCode,
        stringsCount: stringsCount,
        translatedCount: translatedCount,
        translationsUrl: translationsUrl);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4006239459, 4),
      [0, 0, 0, 0],
      serializeBytes(this.name),
      serializeBytes(this.nativeName),
      serializeBytes(this.langCode),
      (this.baseLangCode == null || this.baseLangCode == false)
          ? List<int>.empty()
          : [serializeBytes(this.baseLangCode)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.pluralCode),
      readBufferFromBigInt(this.stringsCount, 4, little: true, signed: true),
      readBufferFromBigInt(this.translatedCount, 4, little: true, signed: true),
      serializeBytes(this.translationsUrl),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'LangPackLanguage{ID: $ID, official: $official, rtl: $rtl, beta: $beta, name: $name, nativeName: $nativeName, langCode: $langCode, baseLangCode: $baseLangCode, pluralCode: $pluralCode, stringsCount: $stringsCount, translatedCount: $translatedCount, translationsUrl: $translationsUrl}';
  }
}

class ChannelAdminLogEventActionChangeTitle extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3873421349;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 3873421349;
  String prevValue;
  String newValue;

  ChannelAdminLogEventActionChangeTitle(
      {required this.prevValue, required this.newValue});

  static ChannelAdminLogEventActionChangeTitle fromReader(BinaryReader reader) {
    var len;
    var prevValue = reader.tgReadString();
    var newValue = reader.tgReadString();
    return ChannelAdminLogEventActionChangeTitle(
        prevValue: prevValue, newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3873421349, 4),
      serializeBytes(this.prevValue),
      serializeBytes(this.newValue),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionChangeTitle{ID: $ID, prevValue: $prevValue, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionChangeAbout extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1427671598;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1427671598;
  String prevValue;
  String newValue;

  ChannelAdminLogEventActionChangeAbout(
      {required this.prevValue, required this.newValue});

  static ChannelAdminLogEventActionChangeAbout fromReader(BinaryReader reader) {
    var len;
    var prevValue = reader.tgReadString();
    var newValue = reader.tgReadString();
    return ChannelAdminLogEventActionChangeAbout(
        prevValue: prevValue, newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1427671598, 4),
      serializeBytes(this.prevValue),
      serializeBytes(this.newValue),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionChangeAbout{ID: $ID, prevValue: $prevValue, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionChangeUsername extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1783299128;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1783299128;
  String prevValue;
  String newValue;

  ChannelAdminLogEventActionChangeUsername(
      {required this.prevValue, required this.newValue});

  static ChannelAdminLogEventActionChangeUsername fromReader(
      BinaryReader reader) {
    var len;
    var prevValue = reader.tgReadString();
    var newValue = reader.tgReadString();
    return ChannelAdminLogEventActionChangeUsername(
        prevValue: prevValue, newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1783299128, 4),
      serializeBytes(this.prevValue),
      serializeBytes(this.newValue),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionChangeUsername{ID: $ID, prevValue: $prevValue, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionChangePhoto extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1129042607;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1129042607;
  var prevPhoto;
  var newPhoto;

  ChannelAdminLogEventActionChangePhoto(
      {required this.prevPhoto, required this.newPhoto});

  static ChannelAdminLogEventActionChangePhoto fromReader(BinaryReader reader) {
    var len;
    var prevPhoto = reader.tgReadObject();
    var newPhoto = reader.tgReadObject();
    return ChannelAdminLogEventActionChangePhoto(
        prevPhoto: prevPhoto, newPhoto: newPhoto);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1129042607, 4),
      (this.prevPhoto.getBytes() as List<int>),
      (this.newPhoto.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionChangePhoto{ID: $ID, prevPhoto: $prevPhoto, newPhoto: $newPhoto}';
  }
}

class ChannelAdminLogEventActionToggleInvites extends BaseConstructor {
  static const CONSTRUCTOR_ID = 460916654;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 460916654;
  bool newValue;

  ChannelAdminLogEventActionToggleInvites({required this.newValue});

  static ChannelAdminLogEventActionToggleInvites fromReader(
      BinaryReader reader) {
    var len;
    var newValue = reader.tgReadBool();
    return ChannelAdminLogEventActionToggleInvites(newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(460916654, 4),
      [this.newValue == true ? 0xb5757299 : 0x379779bc],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionToggleInvites{ID: $ID, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionToggleSignatures extends BaseConstructor {
  static const CONSTRUCTOR_ID = 648939889;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 648939889;
  bool newValue;

  ChannelAdminLogEventActionToggleSignatures({required this.newValue});

  static ChannelAdminLogEventActionToggleSignatures fromReader(
      BinaryReader reader) {
    var len;
    var newValue = reader.tgReadBool();
    return ChannelAdminLogEventActionToggleSignatures(newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(648939889, 4),
      [this.newValue == true ? 0xb5757299 : 0x379779bc],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionToggleSignatures{ID: $ID, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionUpdatePinned extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3924306968;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 3924306968;
  var message;

  ChannelAdminLogEventActionUpdatePinned({required this.message});

  static ChannelAdminLogEventActionUpdatePinned fromReader(
      BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    return ChannelAdminLogEventActionUpdatePinned(message: message);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3924306968, 4),
      (this.message.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionUpdatePinned{ID: $ID, message: $message}';
  }
}

class ChannelAdminLogEventActionEditMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1889215493;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1889215493;
  var prevMessage;
  var newMessage;

  ChannelAdminLogEventActionEditMessage(
      {required this.prevMessage, required this.newMessage});

  static ChannelAdminLogEventActionEditMessage fromReader(BinaryReader reader) {
    var len;
    var prevMessage = reader.tgReadObject();
    var newMessage = reader.tgReadObject();
    return ChannelAdminLogEventActionEditMessage(
        prevMessage: prevMessage, newMessage: newMessage);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1889215493, 4),
      (this.prevMessage.getBytes() as List<int>),
      (this.newMessage.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionEditMessage{ID: $ID, prevMessage: $prevMessage, newMessage: $newMessage}';
  }
}

class ChannelAdminLogEventActionDeleteMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1121994683;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1121994683;
  var message;

  ChannelAdminLogEventActionDeleteMessage({required this.message});

  static ChannelAdminLogEventActionDeleteMessage fromReader(
      BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    return ChannelAdminLogEventActionDeleteMessage(message: message);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1121994683, 4),
      (this.message.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionDeleteMessage{ID: $ID, message: $message}';
  }
}

class ChannelAdminLogEventActionParticipantJoin extends BaseConstructor {
  static const CONSTRUCTOR_ID = 405815507;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 405815507;

  ChannelAdminLogEventActionParticipantJoin();

  static ChannelAdminLogEventActionParticipantJoin fromReader(
      BinaryReader reader) {
    var len;
    return ChannelAdminLogEventActionParticipantJoin();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(405815507, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantJoin{ID: $ID, }';
  }
}

class ChannelAdminLogEventActionParticipantLeave extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4170676210;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 4170676210;

  ChannelAdminLogEventActionParticipantLeave();

  static ChannelAdminLogEventActionParticipantLeave fromReader(
      BinaryReader reader) {
    var len;
    return ChannelAdminLogEventActionParticipantLeave();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4170676210, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantLeave{ID: $ID, }';
  }
}

class ChannelAdminLogEventActionParticipantInvite extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3810276568;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 3810276568;
  var participant;

  ChannelAdminLogEventActionParticipantInvite({required this.participant});

  static ChannelAdminLogEventActionParticipantInvite fromReader(
      BinaryReader reader) {
    var len;
    var participant = reader.tgReadObject();
    return ChannelAdminLogEventActionParticipantInvite(
        participant: participant);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3810276568, 4),
      (this.participant.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantInvite{ID: $ID, participant: $participant}';
  }
}

class ChannelAdminLogEventActionParticipantToggleBan extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3872931198;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 3872931198;
  var prevParticipant;
  var newParticipant;

  ChannelAdminLogEventActionParticipantToggleBan(
      {required this.prevParticipant, required this.newParticipant});

  static ChannelAdminLogEventActionParticipantToggleBan fromReader(
      BinaryReader reader) {
    var len;
    var prevParticipant = reader.tgReadObject();
    var newParticipant = reader.tgReadObject();
    return ChannelAdminLogEventActionParticipantToggleBan(
        prevParticipant: prevParticipant, newParticipant: newParticipant);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3872931198, 4),
      (this.prevParticipant.getBytes() as List<int>),
      (this.newParticipant.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantToggleBan{ID: $ID, prevParticipant: $prevParticipant, newParticipant: $newParticipant}';
  }
}

class ChannelAdminLogEventActionParticipantToggleAdmin extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3580323600;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 3580323600;
  var prevParticipant;
  var newParticipant;

  ChannelAdminLogEventActionParticipantToggleAdmin(
      {required this.prevParticipant, required this.newParticipant});

  static ChannelAdminLogEventActionParticipantToggleAdmin fromReader(
      BinaryReader reader) {
    var len;
    var prevParticipant = reader.tgReadObject();
    var newParticipant = reader.tgReadObject();
    return ChannelAdminLogEventActionParticipantToggleAdmin(
        prevParticipant: prevParticipant, newParticipant: newParticipant);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3580323600, 4),
      (this.prevParticipant.getBytes() as List<int>),
      (this.newParticipant.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantToggleAdmin{ID: $ID, prevParticipant: $prevParticipant, newParticipant: $newParticipant}';
  }
}

class ChannelAdminLogEventActionChangeStickerSet extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2982398631;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 2982398631;
  var prevStickerset;
  var newStickerset;

  ChannelAdminLogEventActionChangeStickerSet(
      {required this.prevStickerset, required this.newStickerset});

  static ChannelAdminLogEventActionChangeStickerSet fromReader(
      BinaryReader reader) {
    var len;
    var prevStickerset = reader.tgReadObject();
    var newStickerset = reader.tgReadObject();
    return ChannelAdminLogEventActionChangeStickerSet(
        prevStickerset: prevStickerset, newStickerset: newStickerset);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2982398631, 4),
      (this.prevStickerset.getBytes() as List<int>),
      (this.newStickerset.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionChangeStickerSet{ID: $ID, prevStickerset: $prevStickerset, newStickerset: $newStickerset}';
  }
}

class ChannelAdminLogEventActionTogglePreHistoryHidden extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1599903217;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1599903217;
  bool newValue;

  ChannelAdminLogEventActionTogglePreHistoryHidden({required this.newValue});

  static ChannelAdminLogEventActionTogglePreHistoryHidden fromReader(
      BinaryReader reader) {
    var len;
    var newValue = reader.tgReadBool();
    return ChannelAdminLogEventActionTogglePreHistoryHidden(newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1599903217, 4),
      [this.newValue == true ? 0xb5757299 : 0x379779bc],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionTogglePreHistoryHidden{ID: $ID, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionDefaultBannedRights extends BaseConstructor {
  static const CONSTRUCTOR_ID = 771095562;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 771095562;
  var prevBannedRights;
  var newBannedRights;

  ChannelAdminLogEventActionDefaultBannedRights(
      {required this.prevBannedRights, required this.newBannedRights});

  static ChannelAdminLogEventActionDefaultBannedRights fromReader(
      BinaryReader reader) {
    var len;
    var prevBannedRights = reader.tgReadObject();
    var newBannedRights = reader.tgReadObject();
    return ChannelAdminLogEventActionDefaultBannedRights(
        prevBannedRights: prevBannedRights, newBannedRights: newBannedRights);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(771095562, 4),
      (this.prevBannedRights.getBytes() as List<int>),
      (this.newBannedRights.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionDefaultBannedRights{ID: $ID, prevBannedRights: $prevBannedRights, newBannedRights: $newBannedRights}';
  }
}

class ChannelAdminLogEventActionStopPoll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2399639107;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 2399639107;
  var message;

  ChannelAdminLogEventActionStopPoll({required this.message});

  static ChannelAdminLogEventActionStopPoll fromReader(BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    return ChannelAdminLogEventActionStopPoll(message: message);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2399639107, 4),
      (this.message.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionStopPoll{ID: $ID, message: $message}';
  }
}

class ChannelAdminLogEventActionChangeLinkedChat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 84703944;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 84703944;
  BigInt prevValue;
  BigInt newValue;

  ChannelAdminLogEventActionChangeLinkedChat(
      {required this.prevValue, required this.newValue});

  static ChannelAdminLogEventActionChangeLinkedChat fromReader(
      BinaryReader reader) {
    var len;
    var prevValue = reader.readLong();
    var newValue = reader.readLong();
    return ChannelAdminLogEventActionChangeLinkedChat(
        prevValue: prevValue, newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(84703944, 4),
      readBufferFromBigInt(this.prevValue, 8, little: true, signed: true),
      readBufferFromBigInt(this.newValue, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionChangeLinkedChat{ID: $ID, prevValue: $prevValue, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionChangeLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 241923758;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 241923758;
  var prevValue;
  var newValue;

  ChannelAdminLogEventActionChangeLocation(
      {required this.prevValue, required this.newValue});

  static ChannelAdminLogEventActionChangeLocation fromReader(
      BinaryReader reader) {
    var len;
    var prevValue = reader.tgReadObject();
    var newValue = reader.tgReadObject();
    return ChannelAdminLogEventActionChangeLocation(
        prevValue: prevValue, newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(241923758, 4),
      (this.prevValue.getBytes() as List<int>),
      (this.newValue.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionChangeLocation{ID: $ID, prevValue: $prevValue, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionToggleSlowMode extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1401984889;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1401984889;
  int prevValue;
  int newValue;

  ChannelAdminLogEventActionToggleSlowMode(
      {required this.prevValue, required this.newValue});

  static ChannelAdminLogEventActionToggleSlowMode fromReader(
      BinaryReader reader) {
    var len;
    var prevValue = reader.readInt();
    var newValue = reader.readInt();
    return ChannelAdminLogEventActionToggleSlowMode(
        prevValue: prevValue, newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1401984889, 4),
      readBufferFromBigInt(this.prevValue, 4, little: true, signed: true),
      readBufferFromBigInt(this.newValue, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionToggleSlowMode{ID: $ID, prevValue: $prevValue, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionStartGroupCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 589338437;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 589338437;
  var call;

  ChannelAdminLogEventActionStartGroupCall({required this.call});

  static ChannelAdminLogEventActionStartGroupCall fromReader(
      BinaryReader reader) {
    var len;
    var call = reader.tgReadObject();
    return ChannelAdminLogEventActionStartGroupCall(call: call);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(589338437, 4),
      (this.call.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionStartGroupCall{ID: $ID, call: $call}';
  }
}

class ChannelAdminLogEventActionDiscardGroupCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3684667712;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 3684667712;
  var call;

  ChannelAdminLogEventActionDiscardGroupCall({required this.call});

  static ChannelAdminLogEventActionDiscardGroupCall fromReader(
      BinaryReader reader) {
    var len;
    var call = reader.tgReadObject();
    return ChannelAdminLogEventActionDiscardGroupCall(call: call);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3684667712, 4),
      (this.call.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionDiscardGroupCall{ID: $ID, call: $call}';
  }
}

class ChannelAdminLogEventActionParticipantMute extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4179895506;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 4179895506;
  var participant;

  ChannelAdminLogEventActionParticipantMute({required this.participant});

  static ChannelAdminLogEventActionParticipantMute fromReader(
      BinaryReader reader) {
    var len;
    var participant = reader.tgReadObject();
    return ChannelAdminLogEventActionParticipantMute(participant: participant);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4179895506, 4),
      (this.participant.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantMute{ID: $ID, participant: $participant}';
  }
}

class ChannelAdminLogEventActionParticipantUnmute extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3863226816;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 3863226816;
  var participant;

  ChannelAdminLogEventActionParticipantUnmute({required this.participant});

  static ChannelAdminLogEventActionParticipantUnmute fromReader(
      BinaryReader reader) {
    var len;
    var participant = reader.tgReadObject();
    return ChannelAdminLogEventActionParticipantUnmute(
        participant: participant);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3863226816, 4),
      (this.participant.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantUnmute{ID: $ID, participant: $participant}';
  }
}

class ChannelAdminLogEventActionToggleGroupCallSetting extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1456906823;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1456906823;
  bool joinMuted;

  ChannelAdminLogEventActionToggleGroupCallSetting({required this.joinMuted});

  static ChannelAdminLogEventActionToggleGroupCallSetting fromReader(
      BinaryReader reader) {
    var len;
    var joinMuted = reader.tgReadBool();
    return ChannelAdminLogEventActionToggleGroupCallSetting(
        joinMuted: joinMuted);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1456906823, 4),
      [this.joinMuted == true ? 0xb5757299 : 0x379779bc],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionToggleGroupCallSetting{ID: $ID, joinMuted: $joinMuted}';
  }
}

class ChannelAdminLogEventActionParticipantJoinByInvite
    extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1557846647;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1557846647;
  var invite;

  ChannelAdminLogEventActionParticipantJoinByInvite({required this.invite});

  static ChannelAdminLogEventActionParticipantJoinByInvite fromReader(
      BinaryReader reader) {
    var len;
    var invite = reader.tgReadObject();
    return ChannelAdminLogEventActionParticipantJoinByInvite(invite: invite);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1557846647, 4),
      (this.invite.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantJoinByInvite{ID: $ID, invite: $invite}';
  }
}

class ChannelAdminLogEventActionExportedInviteDelete extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1515256996;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1515256996;
  var invite;

  ChannelAdminLogEventActionExportedInviteDelete({required this.invite});

  static ChannelAdminLogEventActionExportedInviteDelete fromReader(
      BinaryReader reader) {
    var len;
    var invite = reader.tgReadObject();
    return ChannelAdminLogEventActionExportedInviteDelete(invite: invite);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1515256996, 4),
      (this.invite.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionExportedInviteDelete{ID: $ID, invite: $invite}';
  }
}

class ChannelAdminLogEventActionExportedInviteRevoke extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1091179342;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1091179342;
  var invite;

  ChannelAdminLogEventActionExportedInviteRevoke({required this.invite});

  static ChannelAdminLogEventActionExportedInviteRevoke fromReader(
      BinaryReader reader) {
    var len;
    var invite = reader.tgReadObject();
    return ChannelAdminLogEventActionExportedInviteRevoke(invite: invite);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1091179342, 4),
      (this.invite.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionExportedInviteRevoke{ID: $ID, invite: $invite}';
  }
}

class ChannelAdminLogEventActionExportedInviteEdit extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3910056793;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 3910056793;
  var prevInvite;
  var newInvite;

  ChannelAdminLogEventActionExportedInviteEdit(
      {required this.prevInvite, required this.newInvite});

  static ChannelAdminLogEventActionExportedInviteEdit fromReader(
      BinaryReader reader) {
    var len;
    var prevInvite = reader.tgReadObject();
    var newInvite = reader.tgReadObject();
    return ChannelAdminLogEventActionExportedInviteEdit(
        prevInvite: prevInvite, newInvite: newInvite);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3910056793, 4),
      (this.prevInvite.getBytes() as List<int>),
      (this.newInvite.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionExportedInviteEdit{ID: $ID, prevInvite: $prevInvite, newInvite: $newInvite}';
  }
}

class ChannelAdminLogEventActionParticipantVolume extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1048537159;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1048537159;
  var participant;

  ChannelAdminLogEventActionParticipantVolume({required this.participant});

  static ChannelAdminLogEventActionParticipantVolume fromReader(
      BinaryReader reader) {
    var len;
    var participant = reader.tgReadObject();
    return ChannelAdminLogEventActionParticipantVolume(
        participant: participant);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1048537159, 4),
      (this.participant.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantVolume{ID: $ID, participant: $participant}';
  }
}

class ChannelAdminLogEventActionChangeHistoryTTL extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1855199800;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 1855199800;
  int prevValue;
  int newValue;

  ChannelAdminLogEventActionChangeHistoryTTL(
      {required this.prevValue, required this.newValue});

  static ChannelAdminLogEventActionChangeHistoryTTL fromReader(
      BinaryReader reader) {
    var len;
    var prevValue = reader.readInt();
    var newValue = reader.readInt();
    return ChannelAdminLogEventActionChangeHistoryTTL(
        prevValue: prevValue, newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1855199800, 4),
      readBufferFromBigInt(this.prevValue, 4, little: true, signed: true),
      readBufferFromBigInt(this.newValue, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionChangeHistoryTTL{ID: $ID, prevValue: $prevValue, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionParticipantJoinByRequest
    extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2947945546;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 2947945546;
  var invite;
  BigInt approvedBy;

  ChannelAdminLogEventActionParticipantJoinByRequest(
      {required this.invite, required this.approvedBy});

  static ChannelAdminLogEventActionParticipantJoinByRequest fromReader(
      BinaryReader reader) {
    var len;
    var invite = reader.tgReadObject();
    var approvedBy = reader.readLong();
    return ChannelAdminLogEventActionParticipantJoinByRequest(
        invite: invite, approvedBy: approvedBy);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2947945546, 4),
      (this.invite.getBytes() as List<int>),
      readBufferFromBigInt(this.approvedBy, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionParticipantJoinByRequest{ID: $ID, invite: $invite, approvedBy: $approvedBy}';
  }
}

class ChannelAdminLogEventActionToggleNoForwards extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3408578406;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 3408578406;
  bool newValue;

  ChannelAdminLogEventActionToggleNoForwards({required this.newValue});

  static ChannelAdminLogEventActionToggleNoForwards fromReader(
      BinaryReader reader) {
    var len;
    var newValue = reader.tgReadBool();
    return ChannelAdminLogEventActionToggleNoForwards(newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3408578406, 4),
      [this.newValue == true ? 0xb5757299 : 0x379779bc],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionToggleNoForwards{ID: $ID, newValue: $newValue}';
  }
}

class ChannelAdminLogEventActionSendMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 663693416;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 663693416;
  var message;

  ChannelAdminLogEventActionSendMessage({required this.message});

  static ChannelAdminLogEventActionSendMessage fromReader(BinaryReader reader) {
    var len;
    var message = reader.tgReadObject();
    return ChannelAdminLogEventActionSendMessage(message: message);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(663693416, 4),
      (this.message.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionSendMessage{ID: $ID, message: $message}';
  }
}

class ChannelAdminLogEventActionChangeAvailableReactions
    extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2633496426;
  static const SUBCLASS_OF_ID = 2998503411;
  final classType = "constructor";
  final ID = 2633496426;
  List<String> prevValue;
  List<String> newValue;

  ChannelAdminLogEventActionChangeAvailableReactions(
      {required this.prevValue, required this.newValue});

  static ChannelAdminLogEventActionChangeAvailableReactions fromReader(
      BinaryReader reader) {
    var len;
    var _vectorprevValue = reader.readInt();
    if (_vectorprevValue != 481674261) throw Exception('Wrong vectorId');
    List<String> prevValue = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      prevValue.add(reader.tgReadString());
    }
    var _vectornewValue = reader.readInt();
    if (_vectornewValue != 481674261) throw Exception('Wrong vectorId');
    List<String> newValue = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      newValue.add(reader.tgReadString());
    }
    return ChannelAdminLogEventActionChangeAvailableReactions(
        prevValue: prevValue, newValue: newValue);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2633496426, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.prevValue!.length, 4,
          little: true, signed: true),
      this
          .prevValue!
          .map((x) => serializeBytes(x))
          .expand((element) => element),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.newValue!.length, 4,
          little: true, signed: true),
      this.newValue!.map((x) => serializeBytes(x)).expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventActionChangeAvailableReactions{ID: $ID, prevValue: $prevValue, newValue: $newValue}';
  }
}

class ChannelAdminLogEvent extends BaseConstructor {
  static const CONSTRUCTOR_ID = 531458253;
  static const SUBCLASS_OF_ID = 1083115929;
  final classType = "constructor";
  final ID = 531458253;
  BigInt id;
  int date;
  BigInt userId;
  var action;

  ChannelAdminLogEvent(
      {required this.id,
      required this.date,
      required this.userId,
      required this.action});

  static ChannelAdminLogEvent fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var date = reader.readInt();
    var userId = reader.readLong();
    var action = reader.tgReadObject();
    return ChannelAdminLogEvent(
        id: id, date: date, userId: userId, action: action);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(531458253, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      (this.action.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEvent{ID: $ID, id: $id, date: $date, userId: $userId, action: $action}';
  }
}

class ChannelAdminLogEventsFilter extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3926948580;
  static const SUBCLASS_OF_ID = 2092692249;
  final classType = "constructor";
  final ID = 3926948580;
  bool? join;
  bool? leave;
  bool? invite;
  bool? ban;
  bool? unban;
  bool? kick;
  bool? unkick;
  bool? promote;
  bool? demote;
  bool? info;
  bool? settings;
  bool? pinned;
  bool? edit;
  bool? delete;
  bool? groupCall;
  bool? invites;
  bool? send;

  ChannelAdminLogEventsFilter(
      {required this.join,
      required this.leave,
      required this.invite,
      required this.ban,
      required this.unban,
      required this.kick,
      required this.unkick,
      required this.promote,
      required this.demote,
      required this.info,
      required this.settings,
      required this.pinned,
      required this.edit,
      required this.delete,
      required this.groupCall,
      required this.invites,
      required this.send});

  static ChannelAdminLogEventsFilter fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final join = (flags & 1) == 1;
    final leave = (flags & 2) == 2;
    final invite = (flags & 4) == 4;
    final ban = (flags & 8) == 8;
    final unban = (flags & 16) == 16;
    final kick = (flags & 32) == 32;
    final unkick = (flags & 64) == 64;
    final promote = (flags & 128) == 128;
    final demote = (flags & 256) == 256;
    final info = (flags & 512) == 512;
    final settings = (flags & 1024) == 1024;
    final pinned = (flags & 2048) == 2048;
    final edit = (flags & 4096) == 4096;
    final delete = (flags & 8192) == 8192;
    final groupCall = (flags & 16384) == 16384;
    final invites = (flags & 32768) == 32768;
    final send = (flags & 65536) == 65536;
    return ChannelAdminLogEventsFilter(
        join: join,
        leave: leave,
        invite: invite,
        ban: ban,
        unban: unban,
        kick: kick,
        unkick: unkick,
        promote: promote,
        demote: demote,
        info: info,
        settings: settings,
        pinned: pinned,
        edit: edit,
        delete: delete,
        groupCall: groupCall,
        invites: invites,
        send: send);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3926948580, 4),
      [0, 0, 0, 0],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelAdminLogEventsFilter{ID: $ID, join: $join, leave: $leave, invite: $invite, ban: $ban, unban: $unban, kick: $kick, unkick: $unkick, promote: $promote, demote: $demote, info: $info, settings: $settings, pinned: $pinned, edit: $edit, delete: $delete, groupCall: $groupCall, invites: $invites, send: $send}';
  }
}

class PopularContact extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1558266229;
  static const SUBCLASS_OF_ID = 67708250;
  final classType = "constructor";
  final ID = 1558266229;
  BigInt clientId;
  int importers;

  PopularContact({required this.clientId, required this.importers});

  static PopularContact fromReader(BinaryReader reader) {
    var len;
    var clientId = reader.readLong();
    var importers = reader.readInt();
    return PopularContact(clientId: clientId, importers: importers);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1558266229, 4),
      readBufferFromBigInt(this.clientId, 8, little: true, signed: true),
      readBufferFromBigInt(this.importers, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PopularContact{ID: $ID, clientId: $clientId, importers: $importers}';
  }
}

class RecentMeUrlUnknown extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1189204285;
  static const SUBCLASS_OF_ID = 1436889209;
  final classType = "constructor";
  final ID = 1189204285;
  String url;

  RecentMeUrlUnknown({required this.url});

  static RecentMeUrlUnknown fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    return RecentMeUrlUnknown(url: url);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1189204285, 4),
      serializeBytes(this.url),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RecentMeUrlUnknown{ID: $ID, url: $url}';
  }
}

class RecentMeUrlUser extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3106671074;
  static const SUBCLASS_OF_ID = 1436889209;
  final classType = "constructor";
  final ID = 3106671074;
  String url;
  BigInt userId;

  RecentMeUrlUser({required this.url, required this.userId});

  static RecentMeUrlUser fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var userId = reader.readLong();
    return RecentMeUrlUser(url: url, userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3106671074, 4),
      serializeBytes(this.url),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RecentMeUrlUser{ID: $ID, url: $url, userId: $userId}';
  }
}

class RecentMeUrlChat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3000660434;
  static const SUBCLASS_OF_ID = 1436889209;
  final classType = "constructor";
  final ID = 3000660434;
  String url;
  BigInt chatId;

  RecentMeUrlChat({required this.url, required this.chatId});

  static RecentMeUrlChat fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var chatId = reader.readLong();
    return RecentMeUrlChat(url: url, chatId: chatId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3000660434, 4),
      serializeBytes(this.url),
      readBufferFromBigInt(this.chatId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RecentMeUrlChat{ID: $ID, url: $url, chatId: $chatId}';
  }
}

class RecentMeUrlChatInvite extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3947431965;
  static const SUBCLASS_OF_ID = 1436889209;
  final classType = "constructor";
  final ID = 3947431965;
  String url;
  var chatInvite;

  RecentMeUrlChatInvite({required this.url, required this.chatInvite});

  static RecentMeUrlChatInvite fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var chatInvite = reader.tgReadObject();
    return RecentMeUrlChatInvite(url: url, chatInvite: chatInvite);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3947431965, 4),
      serializeBytes(this.url),
      (this.chatInvite.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RecentMeUrlChatInvite{ID: $ID, url: $url, chatInvite: $chatInvite}';
  }
}

class RecentMeUrlStickerSet extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3154794460;
  static const SUBCLASS_OF_ID = 1436889209;
  final classType = "constructor";
  final ID = 3154794460;
  String url;
  var set;

  RecentMeUrlStickerSet({required this.url, required this.set});

  static RecentMeUrlStickerSet fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var set = reader.tgReadObject();
    return RecentMeUrlStickerSet(url: url, set: set);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3154794460, 4),
      serializeBytes(this.url),
      (this.set.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RecentMeUrlStickerSet{ID: $ID, url: $url, set: $set}';
  }
}

class InputSingleMedia extends BaseConstructor {
  static const CONSTRUCTOR_ID = 482797855;
  static const SUBCLASS_OF_ID = 566922968;
  final classType = "constructor";
  final ID = 482797855;
  var media;
  BigInt randomId;
  String message;
  List<dynamic>? entities;

  InputSingleMedia(
      {required this.media,
      required this.randomId,
      required this.message,
      required this.entities});

  static InputSingleMedia fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var media = reader.tgReadObject();
    var randomId = reader.readLong();
    var message = reader.tgReadString();
    var entities;
    if ((flags & 1) == 1) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    return InputSingleMedia(
        media: media, randomId: randomId, message: message, entities: entities);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(482797855, 4),
      [0, 0, 0, 0],
      (this.media.getBytes() as List<int>),
      readBufferFromBigInt(this.randomId, 8, little: true, signed: true),
      serializeBytes(this.message),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputSingleMedia{ID: $ID, media: $media, randomId: $randomId, message: $message, entities: $entities}';
  }
}

class WebAuthorization extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2801333330;
  static const SUBCLASS_OF_ID = 58084656;
  final classType = "constructor";
  final ID = 2801333330;
  BigInt hash;
  BigInt botId;
  String domain;
  String browser;
  String platform;
  int dateCreated;
  int dateActive;
  String ip;
  String region;

  WebAuthorization(
      {required this.hash,
      required this.botId,
      required this.domain,
      required this.browser,
      required this.platform,
      required this.dateCreated,
      required this.dateActive,
      required this.ip,
      required this.region});

  static WebAuthorization fromReader(BinaryReader reader) {
    var len;
    var hash = reader.readLong();
    var botId = reader.readLong();
    var domain = reader.tgReadString();
    var browser = reader.tgReadString();
    var platform = reader.tgReadString();
    var dateCreated = reader.readInt();
    var dateActive = reader.readInt();
    var ip = reader.tgReadString();
    var region = reader.tgReadString();
    return WebAuthorization(
        hash: hash,
        botId: botId,
        domain: domain,
        browser: browser,
        platform: platform,
        dateCreated: dateCreated,
        dateActive: dateActive,
        ip: ip,
        region: region);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2801333330, 4),
      readBufferFromBigInt(this.hash, 8, little: true, signed: true),
      readBufferFromBigInt(this.botId, 8, little: true, signed: true),
      serializeBytes(this.domain),
      serializeBytes(this.browser),
      serializeBytes(this.platform),
      readBufferFromBigInt(this.dateCreated, 4, little: true, signed: true),
      readBufferFromBigInt(this.dateActive, 4, little: true, signed: true),
      serializeBytes(this.ip),
      serializeBytes(this.region),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WebAuthorization{ID: $ID, hash: $hash, botId: $botId, domain: $domain, browser: $browser, platform: $platform, dateCreated: $dateCreated, dateActive: $dateActive, ip: $ip, region: $region}';
  }
}

class InputMessageID extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2792792866;
  static const SUBCLASS_OF_ID = 1421262021;
  final classType = "constructor";
  final ID = 2792792866;
  int id;

  InputMessageID({required this.id});

  static InputMessageID fromReader(BinaryReader reader) {
    var len;
    var id = reader.readInt();
    return InputMessageID(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2792792866, 4),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessageID{ID: $ID, id: $id}';
  }
}

class InputMessageReplyTo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3134751637;
  static const SUBCLASS_OF_ID = 1421262021;
  final classType = "constructor";
  final ID = 3134751637;
  int id;

  InputMessageReplyTo({required this.id});

  static InputMessageReplyTo fromReader(BinaryReader reader) {
    var len;
    var id = reader.readInt();
    return InputMessageReplyTo(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3134751637, 4),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessageReplyTo{ID: $ID, id: $id}';
  }
}

class InputMessagePinned extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2257003832;
  static const SUBCLASS_OF_ID = 1421262021;
  final classType = "constructor";
  final ID = 2257003832;

  InputMessagePinned();

  static InputMessagePinned fromReader(BinaryReader reader) {
    var len;
    return InputMessagePinned();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2257003832, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessagePinned{ID: $ID, }';
  }
}

class InputMessageCallbackQuery extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2902071934;
  static const SUBCLASS_OF_ID = 1421262021;
  final classType = "constructor";
  final ID = 2902071934;
  int id;
  BigInt queryId;

  InputMessageCallbackQuery({required this.id, required this.queryId});

  static InputMessageCallbackQuery fromReader(BinaryReader reader) {
    var len;
    var id = reader.readInt();
    var queryId = reader.readLong();
    return InputMessageCallbackQuery(id: id, queryId: queryId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2902071934, 4),
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      readBufferFromBigInt(this.queryId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputMessageCallbackQuery{ID: $ID, id: $id, queryId: $queryId}';
  }
}

class InputDialogPeer extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4239064759;
  static const SUBCLASS_OF_ID = 2719782805;
  final classType = "constructor";
  final ID = 4239064759;
  var peer;

  InputDialogPeer({required this.peer});

  static InputDialogPeer fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    return InputDialogPeer(peer: peer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4239064759, 4),
      (this.peer.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputDialogPeer{ID: $ID, peer: $peer}';
  }
}

class InputDialogPeerFolder extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1684014375;
  static const SUBCLASS_OF_ID = 2719782805;
  final classType = "constructor";
  final ID = 1684014375;
  int folderId;

  InputDialogPeerFolder({required this.folderId});

  static InputDialogPeerFolder fromReader(BinaryReader reader) {
    var len;
    var folderId = reader.readInt();
    return InputDialogPeerFolder(folderId: folderId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1684014375, 4),
      readBufferFromBigInt(this.folderId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputDialogPeerFolder{ID: $ID, folderId: $folderId}';
  }
}

class DialogPeer extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3849174789;
  static const SUBCLASS_OF_ID = 627892654;
  final classType = "constructor";
  final ID = 3849174789;
  var peer;

  DialogPeer({required this.peer});

  static DialogPeer fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    return DialogPeer(peer: peer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3849174789, 4),
      (this.peer.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DialogPeer{ID: $ID, peer: $peer}';
  }
}

class DialogPeerFolder extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1363483106;
  static const SUBCLASS_OF_ID = 627892654;
  final classType = "constructor";
  final ID = 1363483106;
  int folderId;

  DialogPeerFolder({required this.folderId});

  static DialogPeerFolder fromReader(BinaryReader reader) {
    var len;
    var folderId = reader.readInt();
    return DialogPeerFolder(folderId: folderId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1363483106, 4),
      readBufferFromBigInt(this.folderId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DialogPeerFolder{ID: $ID, folderId: $folderId}';
  }
}

class FileHash extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1648543603;
  static const SUBCLASS_OF_ID = 3939776691;
  final classType = "constructor";
  final ID = 1648543603;
  int offset;
  int limit;
  List<int> hash;

  FileHash({required this.offset, required this.limit, required this.hash});

  static FileHash fromReader(BinaryReader reader) {
    var len;
    var offset = reader.readInt();
    var limit = reader.readInt();
    var hash = reader.tgReadBytes();
    return FileHash(offset: offset, limit: limit, hash: hash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1648543603, 4),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
      readBufferFromBigInt(this.limit, 4, little: true, signed: true),
      serializeBytes(this.hash),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'FileHash{ID: $ID, offset: $offset, limit: $limit, hash: $hash}';
  }
}

class InputClientProxy extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1968737087;
  static const SUBCLASS_OF_ID = 152716102;
  final classType = "constructor";
  final ID = 1968737087;
  String address;
  int port;

  InputClientProxy({required this.address, required this.port});

  static InputClientProxy fromReader(BinaryReader reader) {
    var len;
    var address = reader.tgReadString();
    var port = reader.readInt();
    return InputClientProxy(address: address, port: port);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1968737087, 4),
      serializeBytes(this.address),
      readBufferFromBigInt(this.port, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputClientProxy{ID: $ID, address: $address, port: $port}';
  }
}

class InputSecureFileUploaded extends BaseConstructor {
  static const CONSTRUCTOR_ID = 859091184;
  static const SUBCLASS_OF_ID = 3670584828;
  final classType = "constructor";
  final ID = 859091184;
  BigInt id;
  int parts;
  String md5Checksum;
  List<int> fileHash;
  List<int> secret;

  InputSecureFileUploaded(
      {required this.id,
      required this.parts,
      required this.md5Checksum,
      required this.fileHash,
      required this.secret});

  static InputSecureFileUploaded fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var parts = reader.readInt();
    var md5Checksum = reader.tgReadString();
    var fileHash = reader.tgReadBytes();
    var secret = reader.tgReadBytes();
    return InputSecureFileUploaded(
        id: id,
        parts: parts,
        md5Checksum: md5Checksum,
        fileHash: fileHash,
        secret: secret);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(859091184, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.parts, 4, little: true, signed: true),
      serializeBytes(this.md5Checksum),
      serializeBytes(this.fileHash),
      serializeBytes(this.secret),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputSecureFileUploaded{ID: $ID, id: $id, parts: $parts, md5Checksum: $md5Checksum, fileHash: $fileHash, secret: $secret}';
  }
}

class InputSecureFile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1399317950;
  static const SUBCLASS_OF_ID = 3670584828;
  final classType = "constructor";
  final ID = 1399317950;
  BigInt id;
  BigInt accessHash;

  InputSecureFile({required this.id, required this.accessHash});

  static InputSecureFile fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputSecureFile(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1399317950, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputSecureFile{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class SecureFileEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1679398724;
  static const SUBCLASS_OF_ID = 1572395975;
  final classType = "constructor";
  final ID = 1679398724;

  SecureFileEmpty();

  static SecureFileEmpty fromReader(BinaryReader reader) {
    var len;
    return SecureFileEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1679398724, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureFileEmpty{ID: $ID, }';
  }
}

class SecureFile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3760683618;
  static const SUBCLASS_OF_ID = 1572395975;
  final classType = "constructor";
  final ID = 3760683618;
  BigInt id;
  BigInt accessHash;
  int size;
  int dcId;
  int date;
  List<int> fileHash;
  List<int> secret;

  SecureFile(
      {required this.id,
      required this.accessHash,
      required this.size,
      required this.dcId,
      required this.date,
      required this.fileHash,
      required this.secret});

  static SecureFile fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var size = reader.readInt();
    var dcId = reader.readInt();
    var date = reader.readInt();
    var fileHash = reader.tgReadBytes();
    var secret = reader.tgReadBytes();
    return SecureFile(
        id: id,
        accessHash: accessHash,
        size: size,
        dcId: dcId,
        date: date,
        fileHash: fileHash,
        secret: secret);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3760683618, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.size, 4, little: true, signed: true),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      serializeBytes(this.fileHash),
      serializeBytes(this.secret),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureFile{ID: $ID, id: $id, accessHash: $accessHash, size: $size, dcId: $dcId, date: $date, fileHash: $fileHash, secret: $secret}';
  }
}

class SecureData extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2330640067;
  static const SUBCLASS_OF_ID = 2094276276;
  final classType = "constructor";
  final ID = 2330640067;
  List<int> data;
  List<int> dataHash;
  List<int> secret;

  SecureData(
      {required this.data, required this.dataHash, required this.secret});

  static SecureData fromReader(BinaryReader reader) {
    var len;
    var data = reader.tgReadBytes();
    var dataHash = reader.tgReadBytes();
    var secret = reader.tgReadBytes();
    return SecureData(data: data, dataHash: dataHash, secret: secret);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2330640067, 4),
      serializeBytes(this.data),
      serializeBytes(this.dataHash),
      serializeBytes(this.secret),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureData{ID: $ID, data: $data, dataHash: $dataHash, secret: $secret}';
  }
}

class SecurePlainPhone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2103482845;
  static const SUBCLASS_OF_ID = 598912950;
  final classType = "constructor";
  final ID = 2103482845;
  String phone;

  SecurePlainPhone({required this.phone});

  static SecurePlainPhone fromReader(BinaryReader reader) {
    var len;
    var phone = reader.tgReadString();
    return SecurePlainPhone(phone: phone);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2103482845, 4),
      serializeBytes(this.phone),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecurePlainPhone{ID: $ID, phone: $phone}';
  }
}

class SecurePlainEmail extends BaseConstructor {
  static const CONSTRUCTOR_ID = 569137759;
  static const SUBCLASS_OF_ID = 598912950;
  final classType = "constructor";
  final ID = 569137759;
  String email;

  SecurePlainEmail({required this.email});

  static SecurePlainEmail fromReader(BinaryReader reader) {
    var len;
    var email = reader.tgReadString();
    return SecurePlainEmail(email: email);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(569137759, 4),
      serializeBytes(this.email),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecurePlainEmail{ID: $ID, email: $email}';
  }
}

class SecureValueTypePersonalDetails extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2636808675;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 2636808675;

  SecureValueTypePersonalDetails();

  static SecureValueTypePersonalDetails fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypePersonalDetails();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2636808675, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypePersonalDetails{ID: $ID, }';
  }
}

class SecureValueTypePassport extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1034709504;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 1034709504;

  SecureValueTypePassport();

  static SecureValueTypePassport fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypePassport();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1034709504, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypePassport{ID: $ID, }';
  }
}

class SecureValueTypeDriverLicense extends BaseConstructor {
  static const CONSTRUCTOR_ID = 115615172;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 115615172;

  SecureValueTypeDriverLicense();

  static SecureValueTypeDriverLicense fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypeDriverLicense();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(115615172, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypeDriverLicense{ID: $ID, }';
  }
}

class SecureValueTypeIdentityCard extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2698015819;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 2698015819;

  SecureValueTypeIdentityCard();

  static SecureValueTypeIdentityCard fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypeIdentityCard();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2698015819, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypeIdentityCard{ID: $ID, }';
  }
}

class SecureValueTypeInternalPassport extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2577698595;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 2577698595;

  SecureValueTypeInternalPassport();

  static SecureValueTypeInternalPassport fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypeInternalPassport();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2577698595, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypeInternalPassport{ID: $ID, }';
  }
}

class SecureValueTypeAddress extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3420659238;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 3420659238;

  SecureValueTypeAddress();

  static SecureValueTypeAddress fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypeAddress();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3420659238, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypeAddress{ID: $ID, }';
  }
}

class SecureValueTypeUtilityBill extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4231435598;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 4231435598;

  SecureValueTypeUtilityBill();

  static SecureValueTypeUtilityBill fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypeUtilityBill();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4231435598, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypeUtilityBill{ID: $ID, }';
  }
}

class SecureValueTypeBankStatement extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2299755533;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 2299755533;

  SecureValueTypeBankStatement();

  static SecureValueTypeBankStatement fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypeBankStatement();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2299755533, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypeBankStatement{ID: $ID, }';
  }
}

class SecureValueTypeRentalAgreement extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2340959368;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 2340959368;

  SecureValueTypeRentalAgreement();

  static SecureValueTypeRentalAgreement fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypeRentalAgreement();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2340959368, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypeRentalAgreement{ID: $ID, }';
  }
}

class SecureValueTypePassportRegistration extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2581823594;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 2581823594;

  SecureValueTypePassportRegistration();

  static SecureValueTypePassportRegistration fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypePassportRegistration();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2581823594, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypePassportRegistration{ID: $ID, }';
  }
}

class SecureValueTypeTemporaryRegistration extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3926060083;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 3926060083;

  SecureValueTypeTemporaryRegistration();

  static SecureValueTypeTemporaryRegistration fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypeTemporaryRegistration();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3926060083, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypeTemporaryRegistration{ID: $ID, }';
  }
}

class SecureValueTypePhone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3005262555;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 3005262555;

  SecureValueTypePhone();

  static SecureValueTypePhone fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypePhone();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3005262555, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypePhone{ID: $ID, }';
  }
}

class SecureValueTypeEmail extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2386339822;
  static const SUBCLASS_OF_ID = 2291398038;
  final classType = "constructor";
  final ID = 2386339822;

  SecureValueTypeEmail();

  static SecureValueTypeEmail fromReader(BinaryReader reader) {
    var len;
    return SecureValueTypeEmail();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2386339822, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueTypeEmail{ID: $ID, }';
  }
}

class SecureValue extends BaseConstructor {
  static const CONSTRUCTOR_ID = 411017418;
  static const SUBCLASS_OF_ID = 85014702;
  final classType = "constructor";
  final ID = 411017418;
  var type;
  var data;
  var frontSide;
  var reverseSide;
  var selfie;
  List<dynamic>? translation;
  List<dynamic>? files;
  var plainData;
  List<int> hash;

  SecureValue(
      {required this.type,
      required this.data,
      required this.frontSide,
      required this.reverseSide,
      required this.selfie,
      required this.translation,
      required this.files,
      required this.plainData,
      required this.hash});

  static SecureValue fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var type = reader.tgReadObject();
    var data;
    if ((flags & 1) == 1) {
      data = reader.tgReadObject();
    } else {
      data = null;
    }
    var frontSide;
    if ((flags & 2) == 2) {
      frontSide = reader.tgReadObject();
    } else {
      frontSide = null;
    }
    var reverseSide;
    if ((flags & 4) == 4) {
      reverseSide = reader.tgReadObject();
    } else {
      reverseSide = null;
    }
    var selfie;
    if ((flags & 8) == 8) {
      selfie = reader.tgReadObject();
    } else {
      selfie = null;
    }
    var translation;
    if ((flags & 64) == 64) {
      var _vectortranslation = reader.readInt();
      if (_vectortranslation != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> translation = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        translation.add(reader.tgReadObject());
      }
    } else {
      translation = null;
    }
    var files;
    if ((flags & 16) == 16) {
      var _vectorfiles = reader.readInt();
      if (_vectorfiles != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> files = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        files.add(reader.tgReadObject());
      }
    } else {
      files = null;
    }
    var plainData;
    if ((flags & 32) == 32) {
      plainData = reader.tgReadObject();
    } else {
      plainData = null;
    }
    var hash = reader.tgReadBytes();
    return SecureValue(
        type: type,
        data: data,
        frontSide: frontSide,
        reverseSide: reverseSide,
        selfie: selfie,
        translation: translation,
        files: files,
        plainData: plainData,
        hash: hash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(411017418, 4),
      [0, 0, 0, 0],
      (this.type.getBytes() as List<int>),
      (this.data == null || this.data == false)
          ? List<int>.empty()
          : [(this.data.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.frontSide == null || this.frontSide == false)
          ? List<int>.empty()
          : [(this.frontSide.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.reverseSide == null || this.reverseSide == false)
          ? List<int>.empty()
          : [(this.reverseSide.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.selfie == null || this.selfie == false)
          ? List<int>.empty()
          : [(this.selfie.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.translation == null || this.translation == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.translation!.length, 4,
                  little: true, signed: true),
              this
                  .translation!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.files == null || this.files == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.files!.length, 4,
                  little: true, signed: true),
              this
                  .files!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.plainData == null || this.plainData == false)
          ? List<int>.empty()
          : [(this.plainData.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.hash),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValue{ID: $ID, type: $type, data: $data, frontSide: $frontSide, reverseSide: $reverseSide, selfie: $selfie, translation: $translation, files: $files, plainData: $plainData, hash: $hash}';
  }
}

class InputSecureValue extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3676426407;
  static const SUBCLASS_OF_ID = 3030229500;
  final classType = "constructor";
  final ID = 3676426407;
  var type;
  var data;
  var frontSide;
  var reverseSide;
  var selfie;
  List<dynamic>? translation;
  List<dynamic>? files;
  var plainData;

  InputSecureValue(
      {required this.type,
      required this.data,
      required this.frontSide,
      required this.reverseSide,
      required this.selfie,
      required this.translation,
      required this.files,
      required this.plainData});

  static InputSecureValue fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var type = reader.tgReadObject();
    var data;
    if ((flags & 1) == 1) {
      data = reader.tgReadObject();
    } else {
      data = null;
    }
    var frontSide;
    if ((flags & 2) == 2) {
      frontSide = reader.tgReadObject();
    } else {
      frontSide = null;
    }
    var reverseSide;
    if ((flags & 4) == 4) {
      reverseSide = reader.tgReadObject();
    } else {
      reverseSide = null;
    }
    var selfie;
    if ((flags & 8) == 8) {
      selfie = reader.tgReadObject();
    } else {
      selfie = null;
    }
    var translation;
    if ((flags & 64) == 64) {
      var _vectortranslation = reader.readInt();
      if (_vectortranslation != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> translation = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        translation.add(reader.tgReadObject());
      }
    } else {
      translation = null;
    }
    var files;
    if ((flags & 16) == 16) {
      var _vectorfiles = reader.readInt();
      if (_vectorfiles != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> files = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        files.add(reader.tgReadObject());
      }
    } else {
      files = null;
    }
    var plainData;
    if ((flags & 32) == 32) {
      plainData = reader.tgReadObject();
    } else {
      plainData = null;
    }
    return InputSecureValue(
        type: type,
        data: data,
        frontSide: frontSide,
        reverseSide: reverseSide,
        selfie: selfie,
        translation: translation,
        files: files,
        plainData: plainData);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3676426407, 4),
      [0, 0, 0, 0],
      (this.type.getBytes() as List<int>),
      (this.data == null || this.data == false)
          ? List<int>.empty()
          : [(this.data.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.frontSide == null || this.frontSide == false)
          ? List<int>.empty()
          : [(this.frontSide.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.reverseSide == null || this.reverseSide == false)
          ? List<int>.empty()
          : [(this.reverseSide.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.selfie == null || this.selfie == false)
          ? List<int>.empty()
          : [(this.selfie.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.translation == null || this.translation == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.translation!.length, 4,
                  little: true, signed: true),
              this
                  .translation!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.files == null || this.files == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.files!.length, 4,
                  little: true, signed: true),
              this
                  .files!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.plainData == null || this.plainData == false)
          ? List<int>.empty()
          : [(this.plainData.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputSecureValue{ID: $ID, type: $type, data: $data, frontSide: $frontSide, reverseSide: $reverseSide, selfie: $selfie, translation: $translation, files: $files, plainData: $plainData}';
  }
}

class SecureValueHash extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3978218928;
  static const SUBCLASS_OF_ID = 3589652487;
  final classType = "constructor";
  final ID = 3978218928;
  var type;
  List<int> hash;

  SecureValueHash({required this.type, required this.hash});

  static SecureValueHash fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var hash = reader.tgReadBytes();
    return SecureValueHash(type: type, hash: hash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3978218928, 4),
      (this.type.getBytes() as List<int>),
      serializeBytes(this.hash),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueHash{ID: $ID, type: $type, hash: $hash}';
  }
}

class SecureValueErrorData extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3903065049;
  static const SUBCLASS_OF_ID = 101146574;
  final classType = "constructor";
  final ID = 3903065049;
  var type;
  List<int> dataHash;
  String field;
  String text;

  SecureValueErrorData(
      {required this.type,
      required this.dataHash,
      required this.field,
      required this.text});

  static SecureValueErrorData fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var dataHash = reader.tgReadBytes();
    var field = reader.tgReadString();
    var text = reader.tgReadString();
    return SecureValueErrorData(
        type: type, dataHash: dataHash, field: field, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3903065049, 4),
      (this.type.getBytes() as List<int>),
      serializeBytes(this.dataHash),
      serializeBytes(this.field),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueErrorData{ID: $ID, type: $type, dataHash: $dataHash, field: $field, text: $text}';
  }
}

class SecureValueErrorFrontSide extends BaseConstructor {
  static const CONSTRUCTOR_ID = 12467706;
  static const SUBCLASS_OF_ID = 101146574;
  final classType = "constructor";
  final ID = 12467706;
  var type;
  List<int> fileHash;
  String text;

  SecureValueErrorFrontSide(
      {required this.type, required this.fileHash, required this.text});

  static SecureValueErrorFrontSide fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var fileHash = reader.tgReadBytes();
    var text = reader.tgReadString();
    return SecureValueErrorFrontSide(
        type: type, fileHash: fileHash, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(12467706, 4),
      (this.type.getBytes() as List<int>),
      serializeBytes(this.fileHash),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueErrorFrontSide{ID: $ID, type: $type, fileHash: $fileHash, text: $text}';
  }
}

class SecureValueErrorReverseSide extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2257201829;
  static const SUBCLASS_OF_ID = 101146574;
  final classType = "constructor";
  final ID = 2257201829;
  var type;
  List<int> fileHash;
  String text;

  SecureValueErrorReverseSide(
      {required this.type, required this.fileHash, required this.text});

  static SecureValueErrorReverseSide fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var fileHash = reader.tgReadBytes();
    var text = reader.tgReadString();
    return SecureValueErrorReverseSide(
        type: type, fileHash: fileHash, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2257201829, 4),
      (this.type.getBytes() as List<int>),
      serializeBytes(this.fileHash),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueErrorReverseSide{ID: $ID, type: $type, fileHash: $fileHash, text: $text}';
  }
}

class SecureValueErrorSelfie extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3845639894;
  static const SUBCLASS_OF_ID = 101146574;
  final classType = "constructor";
  final ID = 3845639894;
  var type;
  List<int> fileHash;
  String text;

  SecureValueErrorSelfie(
      {required this.type, required this.fileHash, required this.text});

  static SecureValueErrorSelfie fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var fileHash = reader.tgReadBytes();
    var text = reader.tgReadString();
    return SecureValueErrorSelfie(type: type, fileHash: fileHash, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3845639894, 4),
      (this.type.getBytes() as List<int>),
      serializeBytes(this.fileHash),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueErrorSelfie{ID: $ID, type: $type, fileHash: $fileHash, text: $text}';
  }
}

class SecureValueErrorFile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2054162547;
  static const SUBCLASS_OF_ID = 101146574;
  final classType = "constructor";
  final ID = 2054162547;
  var type;
  List<int> fileHash;
  String text;

  SecureValueErrorFile(
      {required this.type, required this.fileHash, required this.text});

  static SecureValueErrorFile fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var fileHash = reader.tgReadBytes();
    var text = reader.tgReadString();
    return SecureValueErrorFile(type: type, fileHash: fileHash, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2054162547, 4),
      (this.type.getBytes() as List<int>),
      serializeBytes(this.fileHash),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueErrorFile{ID: $ID, type: $type, fileHash: $fileHash, text: $text}';
  }
}

class SecureValueErrorFiles extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1717706985;
  static const SUBCLASS_OF_ID = 101146574;
  final classType = "constructor";
  final ID = 1717706985;
  var type;
  List<List<int>> fileHash;
  String text;

  SecureValueErrorFiles(
      {required this.type, required this.fileHash, required this.text});

  static SecureValueErrorFiles fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var _vectorfileHash = reader.readInt();
    if (_vectorfileHash != 481674261) throw Exception('Wrong vectorId');
    List<List<int>> fileHash = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      fileHash.add(reader.tgReadBytes());
    }
    var text = reader.tgReadString();
    return SecureValueErrorFiles(type: type, fileHash: fileHash, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1717706985, 4),
      (this.type.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.fileHash!.length, 4,
          little: true, signed: true),
      this.fileHash!.map((x) => serializeBytes(x)).expand((element) => element),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueErrorFiles{ID: $ID, type: $type, fileHash: $fileHash, text: $text}';
  }
}

class SecureValueError extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2258466191;
  static const SUBCLASS_OF_ID = 101146574;
  final classType = "constructor";
  final ID = 2258466191;
  var type;
  List<int> hash;
  String text;

  SecureValueError(
      {required this.type, required this.hash, required this.text});

  static SecureValueError fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var hash = reader.tgReadBytes();
    var text = reader.tgReadString();
    return SecureValueError(type: type, hash: hash, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2258466191, 4),
      (this.type.getBytes() as List<int>),
      serializeBytes(this.hash),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueError{ID: $ID, type: $type, hash: $hash, text: $text}';
  }
}

class SecureValueErrorTranslationFile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2702460784;
  static const SUBCLASS_OF_ID = 101146574;
  final classType = "constructor";
  final ID = 2702460784;
  var type;
  List<int> fileHash;
  String text;

  SecureValueErrorTranslationFile(
      {required this.type, required this.fileHash, required this.text});

  static SecureValueErrorTranslationFile fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var fileHash = reader.tgReadBytes();
    var text = reader.tgReadString();
    return SecureValueErrorTranslationFile(
        type: type, fileHash: fileHash, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2702460784, 4),
      (this.type.getBytes() as List<int>),
      serializeBytes(this.fileHash),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueErrorTranslationFile{ID: $ID, type: $type, fileHash: $fileHash, text: $text}';
  }
}

class SecureValueErrorTranslationFiles extends BaseConstructor {
  static const CONSTRUCTOR_ID = 878931416;
  static const SUBCLASS_OF_ID = 101146574;
  final classType = "constructor";
  final ID = 878931416;
  var type;
  List<List<int>> fileHash;
  String text;

  SecureValueErrorTranslationFiles(
      {required this.type, required this.fileHash, required this.text});

  static SecureValueErrorTranslationFiles fromReader(BinaryReader reader) {
    var len;
    var type = reader.tgReadObject();
    var _vectorfileHash = reader.readInt();
    if (_vectorfileHash != 481674261) throw Exception('Wrong vectorId');
    List<List<int>> fileHash = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      fileHash.add(reader.tgReadBytes());
    }
    var text = reader.tgReadString();
    return SecureValueErrorTranslationFiles(
        type: type, fileHash: fileHash, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(878931416, 4),
      (this.type.getBytes() as List<int>),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.fileHash!.length, 4,
          little: true, signed: true),
      this.fileHash!.map((x) => serializeBytes(x)).expand((element) => element),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureValueErrorTranslationFiles{ID: $ID, type: $type, fileHash: $fileHash, text: $text}';
  }
}

class SecureCredentialsEncrypted extends BaseConstructor {
  static const CONSTRUCTOR_ID = 871426631;
  static const SUBCLASS_OF_ID = 2497476147;
  final classType = "constructor";
  final ID = 871426631;
  List<int> data;
  List<int> hash;
  List<int> secret;

  SecureCredentialsEncrypted(
      {required this.data, required this.hash, required this.secret});

  static SecureCredentialsEncrypted fromReader(BinaryReader reader) {
    var len;
    var data = reader.tgReadBytes();
    var hash = reader.tgReadBytes();
    var secret = reader.tgReadBytes();
    return SecureCredentialsEncrypted(data: data, hash: hash, secret: secret);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(871426631, 4),
      serializeBytes(this.data),
      serializeBytes(this.hash),
      serializeBytes(this.secret),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureCredentialsEncrypted{ID: $ID, data: $data, hash: $hash, secret: $secret}';
  }
}

class SavedPhoneContact extends BaseConstructor {
  static const CONSTRUCTOR_ID = 289586518;
  static const SUBCLASS_OF_ID = 115054788;
  final classType = "constructor";
  final ID = 289586518;
  String phone;
  String firstName;
  String lastName;
  int date;

  SavedPhoneContact(
      {required this.phone,
      required this.firstName,
      required this.lastName,
      required this.date});

  static SavedPhoneContact fromReader(BinaryReader reader) {
    var len;
    var phone = reader.tgReadString();
    var firstName = reader.tgReadString();
    var lastName = reader.tgReadString();
    var date = reader.readInt();
    return SavedPhoneContact(
        phone: phone, firstName: firstName, lastName: lastName, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(289586518, 4),
      serializeBytes(this.phone),
      serializeBytes(this.firstName),
      serializeBytes(this.lastName),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SavedPhoneContact{ID: $ID, phone: $phone, firstName: $firstName, lastName: $lastName, date: $date}';
  }
}

class PasswordKdfAlgoUnknown extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3562713238;
  static const SUBCLASS_OF_ID = 935130572;
  final classType = "constructor";
  final ID = 3562713238;

  PasswordKdfAlgoUnknown();

  static PasswordKdfAlgoUnknown fromReader(BinaryReader reader) {
    var len;
    return PasswordKdfAlgoUnknown();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3562713238, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PasswordKdfAlgoUnknown{ID: $ID, }';
  }
}

class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
    extends BaseConstructor {
  static const CONSTRUCTOR_ID = 982592842;
  static const SUBCLASS_OF_ID = 935130572;
  final classType = "constructor";
  final ID = 982592842;
  List<int> salt1;
  List<int> salt2;
  int g;
  List<int> p;

  PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow(
      {required this.salt1,
      required this.salt2,
      required this.g,
      required this.p});

  static PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
      fromReader(BinaryReader reader) {
    var len;
    var salt1 = reader.tgReadBytes();
    var salt2 = reader.tgReadBytes();
    var g = reader.readInt();
    var p = reader.tgReadBytes();
    return PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow(
        salt1: salt1, salt2: salt2, g: g, p: p);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(982592842, 4),
      serializeBytes(this.salt1),
      serializeBytes(this.salt2),
      readBufferFromBigInt(this.g, 4, little: true, signed: true),
      serializeBytes(this.p),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow{ID: $ID, salt1: $salt1, salt2: $salt2, g: $g, p: $p}';
  }
}

class SecurePasswordKdfAlgoUnknown extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4883767;
  static const SUBCLASS_OF_ID = 1998989635;
  final classType = "constructor";
  final ID = 4883767;

  SecurePasswordKdfAlgoUnknown();

  static SecurePasswordKdfAlgoUnknown fromReader(BinaryReader reader) {
    var len;
    return SecurePasswordKdfAlgoUnknown();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4883767, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecurePasswordKdfAlgoUnknown{ID: $ID, }';
  }
}

class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3153255840;
  static const SUBCLASS_OF_ID = 1998989635;
  final classType = "constructor";
  final ID = 3153255840;
  List<int> salt;

  SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000({required this.salt});

  static SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 fromReader(
      BinaryReader reader) {
    var len;
    var salt = reader.tgReadBytes();
    return SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000(salt: salt);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3153255840, 4),
      serializeBytes(this.salt),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000{ID: $ID, salt: $salt}';
  }
}

class SecurePasswordKdfAlgoSHA512 extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2252807570;
  static const SUBCLASS_OF_ID = 1998989635;
  final classType = "constructor";
  final ID = 2252807570;
  List<int> salt;

  SecurePasswordKdfAlgoSHA512({required this.salt});

  static SecurePasswordKdfAlgoSHA512 fromReader(BinaryReader reader) {
    var len;
    var salt = reader.tgReadBytes();
    return SecurePasswordKdfAlgoSHA512(salt: salt);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2252807570, 4),
      serializeBytes(this.salt),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecurePasswordKdfAlgoSHA512{ID: $ID, salt: $salt}';
  }
}

class SecureSecretSettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 354925740;
  static const SUBCLASS_OF_ID = 3334996731;
  final classType = "constructor";
  final ID = 354925740;
  var secureAlgo;
  List<int> secureSecret;
  BigInt secureSecretId;

  SecureSecretSettings(
      {required this.secureAlgo,
      required this.secureSecret,
      required this.secureSecretId});

  static SecureSecretSettings fromReader(BinaryReader reader) {
    var len;
    var secureAlgo = reader.tgReadObject();
    var secureSecret = reader.tgReadBytes();
    var secureSecretId = reader.readLong();
    return SecureSecretSettings(
        secureAlgo: secureAlgo,
        secureSecret: secureSecret,
        secureSecretId: secureSecretId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(354925740, 4),
      (this.secureAlgo.getBytes() as List<int>),
      serializeBytes(this.secureSecret),
      readBufferFromBigInt(this.secureSecretId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureSecretSettings{ID: $ID, secureAlgo: $secureAlgo, secureSecret: $secureSecret, secureSecretId: $secureSecretId}';
  }
}

class InputCheckPasswordEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2558588504;
  static const SUBCLASS_OF_ID = 3558536544;
  final classType = "constructor";
  final ID = 2558588504;

  InputCheckPasswordEmpty();

  static InputCheckPasswordEmpty fromReader(BinaryReader reader) {
    var len;
    return InputCheckPasswordEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2558588504, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputCheckPasswordEmpty{ID: $ID, }';
  }
}

class InputCheckPasswordSRP extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3531600002;
  static const SUBCLASS_OF_ID = 3558536544;
  final classType = "constructor";
  final ID = 3531600002;
  BigInt srpId;
  List<int> A;
  List<int> M1;

  InputCheckPasswordSRP(
      {required this.srpId, required this.A, required this.M1});

  static InputCheckPasswordSRP fromReader(BinaryReader reader) {
    var len;
    var srpId = reader.readLong();
    var A = reader.tgReadBytes();
    var M1 = reader.tgReadBytes();
    return InputCheckPasswordSRP(srpId: srpId, A: A, M1: M1);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3531600002, 4),
      readBufferFromBigInt(this.srpId, 8, little: true, signed: true),
      serializeBytes(this.A),
      serializeBytes(this.M1),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputCheckPasswordSRP{ID: $ID, srpId: $srpId, A: $A, M1: $M1}';
  }
}

class SecureRequiredType extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2191366618;
  static const SUBCLASS_OF_ID = 2088452618;
  final classType = "constructor";
  final ID = 2191366618;
  bool? nativeNames;
  bool? selfieRequired;
  bool? translationRequired;
  var type;

  SecureRequiredType(
      {required this.nativeNames,
      required this.selfieRequired,
      required this.translationRequired,
      required this.type});

  static SecureRequiredType fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final nativeNames = (flags & 1) == 1;
    final selfieRequired = (flags & 2) == 2;
    final translationRequired = (flags & 4) == 4;
    var type = reader.tgReadObject();
    return SecureRequiredType(
        nativeNames: nativeNames,
        selfieRequired: selfieRequired,
        translationRequired: translationRequired,
        type: type);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2191366618, 4),
      [0, 0, 0, 0],
      (this.type.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureRequiredType{ID: $ID, nativeNames: $nativeNames, selfieRequired: $selfieRequired, translationRequired: $translationRequired, type: $type}';
  }
}

class SecureRequiredTypeOneOf extends BaseConstructor {
  static const CONSTRUCTOR_ID = 41187252;
  static const SUBCLASS_OF_ID = 2088452618;
  final classType = "constructor";
  final ID = 41187252;
  List<dynamic> types;

  SecureRequiredTypeOneOf({required this.types});

  static SecureRequiredTypeOneOf fromReader(BinaryReader reader) {
    var len;
    var _vectortypes = reader.readInt();
    if (_vectortypes != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> types = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      types.add(reader.tgReadObject());
    }
    return SecureRequiredTypeOneOf(types: types);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(41187252, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.types!.length, 4, little: true, signed: true),
      this
          .types!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SecureRequiredTypeOneOf{ID: $ID, types: $types}';
  }
}

class InputAppEvent extends BaseConstructor {
  static const CONSTRUCTOR_ID = 488313413;
  static const SUBCLASS_OF_ID = 2301763846;
  final classType = "constructor";
  final ID = 488313413;
  double time;
  String type;
  BigInt peer;
  var data;

  InputAppEvent(
      {required this.time,
      required this.type,
      required this.peer,
      required this.data});

  static InputAppEvent fromReader(BinaryReader reader) {
    var len;
    var time = reader.readDouble();
    var type = reader.tgReadString();
    var peer = reader.readLong();
    var data = reader.tgReadObject();
    return InputAppEvent(time: time, type: type, peer: peer, data: data);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(488313413, 4),
      readBufferFromBigInt(this.time, 4),
      serializeBytes(this.type),
      readBufferFromBigInt(this.peer, 8, little: true, signed: true),
      (this.data.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputAppEvent{ID: $ID, time: $time, type: $type, peer: $peer, data: $data}';
  }
}

class JsonObjectValue extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3235781593;
  static const SUBCLASS_OF_ID = 2474626745;
  final classType = "constructor";
  final ID = 3235781593;
  String key;
  var value;

  JsonObjectValue({required this.key, required this.value});

  static JsonObjectValue fromReader(BinaryReader reader) {
    var len;
    var key = reader.tgReadString();
    var value = reader.tgReadObject();
    return JsonObjectValue(key: key, value: value);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3235781593, 4),
      serializeBytes(this.key),
      (this.value.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'JsonObjectValue{ID: $ID, key: $key, value: $value}';
  }
}

class JsonNull extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1064139624;
  static const SUBCLASS_OF_ID = 3952707507;
  final classType = "constructor";
  final ID = 1064139624;

  JsonNull();

  static JsonNull fromReader(BinaryReader reader) {
    var len;
    return JsonNull();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1064139624, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'JsonNull{ID: $ID, }';
  }
}

class JsonBool extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3342098026;
  static const SUBCLASS_OF_ID = 3952707507;
  final classType = "constructor";
  final ID = 3342098026;
  bool value;

  JsonBool({required this.value});

  static JsonBool fromReader(BinaryReader reader) {
    var len;
    var value = reader.tgReadBool();
    return JsonBool(value: value);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3342098026, 4),
      [this.value == true ? 0xb5757299 : 0x379779bc],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'JsonBool{ID: $ID, value: $value}';
  }
}

class JsonNumber extends BaseConstructor {
  static const CONSTRUCTOR_ID = 736157604;
  static const SUBCLASS_OF_ID = 3952707507;
  final classType = "constructor";
  final ID = 736157604;
  double value;

  JsonNumber({required this.value});

  static JsonNumber fromReader(BinaryReader reader) {
    var len;
    var value = reader.readDouble();
    return JsonNumber(value: value);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(736157604, 4),
      readBufferFromBigInt(this.value, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'JsonNumber{ID: $ID, value: $value}';
  }
}

class JsonString extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3072226938;
  static const SUBCLASS_OF_ID = 3952707507;
  final classType = "constructor";
  final ID = 3072226938;
  String value;

  JsonString({required this.value});

  static JsonString fromReader(BinaryReader reader) {
    var len;
    var value = reader.tgReadString();
    return JsonString(value: value);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3072226938, 4),
      serializeBytes(this.value),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'JsonString{ID: $ID, value: $value}';
  }
}

class JsonArray extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4148447075;
  static const SUBCLASS_OF_ID = 3952707507;
  final classType = "constructor";
  final ID = 4148447075;
  List<dynamic> value;

  JsonArray({required this.value});

  static JsonArray fromReader(BinaryReader reader) {
    var len;
    var _vectorvalue = reader.readInt();
    if (_vectorvalue != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> value = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      value.add(reader.tgReadObject());
    }
    return JsonArray(value: value);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4148447075, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.value!.length, 4, little: true, signed: true),
      this
          .value!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'JsonArray{ID: $ID, value: $value}';
  }
}

class JsonObject extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2579616925;
  static const SUBCLASS_OF_ID = 3952707507;
  final classType = "constructor";
  final ID = 2579616925;
  List<dynamic> value;

  JsonObject({required this.value});

  static JsonObject fromReader(BinaryReader reader) {
    var len;
    var _vectorvalue = reader.readInt();
    if (_vectorvalue != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> value = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      value.add(reader.tgReadObject());
    }
    return JsonObject(value: value);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2579616925, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.value!.length, 4, little: true, signed: true),
      this
          .value!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'JsonObject{ID: $ID, value: $value}';
  }
}

class PageTableCell extends BaseConstructor {
  static const CONSTRUCTOR_ID = 878078826;
  static const SUBCLASS_OF_ID = 2968203348;
  final classType = "constructor";
  final ID = 878078826;
  bool? header;
  bool? alignCenter;
  bool? alignRight;
  bool? valignMiddle;
  bool? valignBottom;
  var text;
  int? colspan;
  int? rowspan;

  PageTableCell(
      {required this.header,
      required this.alignCenter,
      required this.alignRight,
      required this.valignMiddle,
      required this.valignBottom,
      required this.text,
      required this.colspan,
      required this.rowspan});

  static PageTableCell fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final header = (flags & 1) == 1;
    final alignCenter = (flags & 8) == 8;
    final alignRight = (flags & 16) == 16;
    final valignMiddle = (flags & 32) == 32;
    final valignBottom = (flags & 64) == 64;
    var text;
    if ((flags & 128) == 128) {
      text = reader.tgReadObject();
    } else {
      text = null;
    }
    var colspan;
    if ((flags & 2) == 2) {
      colspan = reader.readInt();
    } else {
      colspan = null;
    }
    var rowspan;
    if ((flags & 4) == 4) {
      rowspan = reader.readInt();
    } else {
      rowspan = null;
    }
    return PageTableCell(
        header: header,
        alignCenter: alignCenter,
        alignRight: alignRight,
        valignMiddle: valignMiddle,
        valignBottom: valignBottom,
        text: text,
        colspan: colspan,
        rowspan: rowspan);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(878078826, 4),
      [0, 0, 0, 0],
      (this.text == null || this.text == false)
          ? List<int>.empty()
          : [(this.text.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.colspan == null || this.colspan == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.colspan, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.rowspan == null || this.rowspan == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.rowspan, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageTableCell{ID: $ID, header: $header, alignCenter: $alignCenter, alignRight: $alignRight, valignMiddle: $valignMiddle, valignBottom: $valignBottom, text: $text, colspan: $colspan, rowspan: $rowspan}';
  }
}

class PageTableRow extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3770729957;
  static const SUBCLASS_OF_ID = 1504505361;
  final classType = "constructor";
  final ID = 3770729957;
  List<dynamic> cells;

  PageTableRow({required this.cells});

  static PageTableRow fromReader(BinaryReader reader) {
    var len;
    var _vectorcells = reader.readInt();
    if (_vectorcells != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> cells = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      cells.add(reader.tgReadObject());
    }
    return PageTableRow(cells: cells);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3770729957, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.cells!.length, 4, little: true, signed: true),
      this
          .cells!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageTableRow{ID: $ID, cells: $cells}';
  }
}

class PageCaption extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1869903447;
  static const SUBCLASS_OF_ID = 699985587;
  final classType = "constructor";
  final ID = 1869903447;
  var text;
  var credit;

  PageCaption({required this.text, required this.credit});

  static PageCaption fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    var credit = reader.tgReadObject();
    return PageCaption(text: text, credit: credit);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1869903447, 4),
      (this.text.getBytes() as List<int>),
      (this.credit.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageCaption{ID: $ID, text: $text, credit: $credit}';
  }
}

class PageListItemText extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3106911949;
  static const SUBCLASS_OF_ID = 2360261809;
  final classType = "constructor";
  final ID = 3106911949;
  var text;

  PageListItemText({required this.text});

  static PageListItemText fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadObject();
    return PageListItemText(text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3106911949, 4),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageListItemText{ID: $ID, text: $text}';
  }
}

class PageListItemBlocks extends BaseConstructor {
  static const CONSTRUCTOR_ID = 635466748;
  static const SUBCLASS_OF_ID = 2360261809;
  final classType = "constructor";
  final ID = 635466748;
  List<dynamic> blocks;

  PageListItemBlocks({required this.blocks});

  static PageListItemBlocks fromReader(BinaryReader reader) {
    var len;
    var _vectorblocks = reader.readInt();
    if (_vectorblocks != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> blocks = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      blocks.add(reader.tgReadObject());
    }
    return PageListItemBlocks(blocks: blocks);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(635466748, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.blocks!.length, 4, little: true, signed: true),
      this
          .blocks!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageListItemBlocks{ID: $ID, blocks: $blocks}';
  }
}

class PageListOrderedItemText extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1577484359;
  static const SUBCLASS_OF_ID = 4007268024;
  final classType = "constructor";
  final ID = 1577484359;
  String num;
  var text;

  PageListOrderedItemText({required this.num, required this.text});

  static PageListOrderedItemText fromReader(BinaryReader reader) {
    var len;
    var num = reader.tgReadString();
    var text = reader.tgReadObject();
    return PageListOrderedItemText(num: num, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1577484359, 4),
      serializeBytes(this.num),
      (this.text.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageListOrderedItemText{ID: $ID, num: $num, text: $text}';
  }
}

class PageListOrderedItemBlocks extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2564655414;
  static const SUBCLASS_OF_ID = 4007268024;
  final classType = "constructor";
  final ID = 2564655414;
  String num;
  List<dynamic> blocks;

  PageListOrderedItemBlocks({required this.num, required this.blocks});

  static PageListOrderedItemBlocks fromReader(BinaryReader reader) {
    var len;
    var num = reader.tgReadString();
    var _vectorblocks = reader.readInt();
    if (_vectorblocks != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> blocks = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      blocks.add(reader.tgReadObject());
    }
    return PageListOrderedItemBlocks(num: num, blocks: blocks);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2564655414, 4),
      serializeBytes(this.num),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.blocks!.length, 4, little: true, signed: true),
      this
          .blocks!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageListOrderedItemBlocks{ID: $ID, num: $num, blocks: $blocks}';
  }
}

class PageRelatedArticle extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3012615176;
  static const SUBCLASS_OF_ID = 919623714;
  final classType = "constructor";
  final ID = 3012615176;
  String url;
  BigInt webpageId;
  String? title;
  String? description;
  BigInt? photoId;
  String? author;
  int? publishedDate;

  PageRelatedArticle(
      {required this.url,
      required this.webpageId,
      required this.title,
      required this.description,
      required this.photoId,
      required this.author,
      required this.publishedDate});

  static PageRelatedArticle fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var url = reader.tgReadString();
    var webpageId = reader.readLong();
    var title;
    if ((flags & 1) == 1) {
      title = reader.tgReadString();
    } else {
      title = null;
    }
    var description;
    if ((flags & 2) == 2) {
      description = reader.tgReadString();
    } else {
      description = null;
    }
    var photoId;
    if ((flags & 4) == 4) {
      photoId = reader.readLong();
    } else {
      photoId = null;
    }
    var author;
    if ((flags & 8) == 8) {
      author = reader.tgReadString();
    } else {
      author = null;
    }
    var publishedDate;
    if ((flags & 16) == 16) {
      publishedDate = reader.readInt();
    } else {
      publishedDate = null;
    }
    return PageRelatedArticle(
        url: url,
        webpageId: webpageId,
        title: title,
        description: description,
        photoId: photoId,
        author: author,
        publishedDate: publishedDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3012615176, 4),
      [0, 0, 0, 0],
      serializeBytes(this.url),
      readBufferFromBigInt(this.webpageId, 8, little: true, signed: true),
      (this.title == null || this.title == false)
          ? List<int>.empty()
          : [serializeBytes(this.title)].expand((element) => element).toList(),
      (this.description == null || this.description == false)
          ? List<int>.empty()
          : [serializeBytes(this.description)]
              .expand((element) => element)
              .toList(),
      (this.photoId == null || this.photoId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.photoId, 8, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.author == null || this.author == false)
          ? List<int>.empty()
          : [serializeBytes(this.author)].expand((element) => element).toList(),
      (this.publishedDate == null || this.publishedDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.publishedDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PageRelatedArticle{ID: $ID, url: $url, webpageId: $webpageId, title: $title, description: $description, photoId: $photoId, author: $author, publishedDate: $publishedDate}';
  }
}

class Page extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2556788493;
  static const SUBCLASS_OF_ID = 3023575326;
  final classType = "constructor";
  final ID = 2556788493;
  bool? part;
  bool? rtl;
  bool? v2;
  String url;
  List<dynamic> blocks;
  List<dynamic> photos;
  List<dynamic> documents;
  int? views;

  Page(
      {required this.part,
      required this.rtl,
      required this.v2,
      required this.url,
      required this.blocks,
      required this.photos,
      required this.documents,
      required this.views});

  static Page fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final part = (flags & 1) == 1;
    final rtl = (flags & 2) == 2;
    final v2 = (flags & 4) == 4;
    var url = reader.tgReadString();
    var _vectorblocks = reader.readInt();
    if (_vectorblocks != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> blocks = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      blocks.add(reader.tgReadObject());
    }
    var _vectorphotos = reader.readInt();
    if (_vectorphotos != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> photos = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      photos.add(reader.tgReadObject());
    }
    var _vectordocuments = reader.readInt();
    if (_vectordocuments != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> documents = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      documents.add(reader.tgReadObject());
    }
    var views;
    if ((flags & 8) == 8) {
      views = reader.readInt();
    } else {
      views = null;
    }
    return Page(
        part: part,
        rtl: rtl,
        v2: v2,
        url: url,
        blocks: blocks,
        photos: photos,
        documents: documents,
        views: views);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2556788493, 4),
      [0, 0, 0, 0],
      serializeBytes(this.url),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.blocks!.length, 4, little: true, signed: true),
      this
          .blocks!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.photos!.length, 4, little: true, signed: true),
      this
          .photos!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.documents!.length, 4,
          little: true, signed: true),
      this
          .documents!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.views == null || this.views == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.views, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Page{ID: $ID, part: $part, rtl: $rtl, v2: $v2, url: $url, blocks: $blocks, photos: $photos, documents: $documents, views: $views}';
  }
}

class PollAnswer extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1823064809;
  static const SUBCLASS_OF_ID = 2124799390;
  final classType = "constructor";
  final ID = 1823064809;
  String text;
  List<int> option;

  PollAnswer({required this.text, required this.option});

  static PollAnswer fromReader(BinaryReader reader) {
    var len;
    var text = reader.tgReadString();
    var option = reader.tgReadBytes();
    return PollAnswer(text: text, option: option);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1823064809, 4),
      serializeBytes(this.text),
      serializeBytes(this.option),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PollAnswer{ID: $ID, text: $text, option: $option}';
  }
}

class Poll extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2262925665;
  static const SUBCLASS_OF_ID = 613307771;
  final classType = "constructor";
  final ID = 2262925665;
  BigInt id;
  bool? closed;
  bool? publicVoters;
  bool? multipleChoice;
  bool? quiz;
  String question;
  List<dynamic> answers;
  int? closePeriod;
  int? closeDate;

  Poll(
      {required this.id,
      required this.closed,
      required this.publicVoters,
      required this.multipleChoice,
      required this.quiz,
      required this.question,
      required this.answers,
      required this.closePeriod,
      required this.closeDate});

  static Poll fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    final flags = reader.readInt();
    final closed = (flags & 1) == 1;
    final publicVoters = (flags & 2) == 2;
    final multipleChoice = (flags & 4) == 4;
    final quiz = (flags & 8) == 8;
    var question = reader.tgReadString();
    var _vectoranswers = reader.readInt();
    if (_vectoranswers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> answers = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      answers.add(reader.tgReadObject());
    }
    var closePeriod;
    if ((flags & 16) == 16) {
      closePeriod = reader.readInt();
    } else {
      closePeriod = null;
    }
    var closeDate;
    if ((flags & 32) == 32) {
      closeDate = reader.readInt();
    } else {
      closeDate = null;
    }
    return Poll(
        id: id,
        closed: closed,
        publicVoters: publicVoters,
        multipleChoice: multipleChoice,
        quiz: quiz,
        question: question,
        answers: answers,
        closePeriod: closePeriod,
        closeDate: closeDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2262925665, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      [0, 0, 0, 0],
      serializeBytes(this.question),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.answers!.length, 4, little: true, signed: true),
      this
          .answers!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.closePeriod == null || this.closePeriod == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.closePeriod, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.closeDate == null || this.closeDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.closeDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Poll{ID: $ID, id: $id, closed: $closed, publicVoters: $publicVoters, multipleChoice: $multipleChoice, quiz: $quiz, question: $question, answers: $answers, closePeriod: $closePeriod, closeDate: $closeDate}';
  }
}

class PollAnswerVoters extends BaseConstructor {
  static const CONSTRUCTOR_ID = 997055186;
  static const SUBCLASS_OF_ID = 2095107985;
  final classType = "constructor";
  final ID = 997055186;
  bool? chosen;
  bool? correct;
  List<int> option;
  int voters;

  PollAnswerVoters(
      {required this.chosen,
      required this.correct,
      required this.option,
      required this.voters});

  static PollAnswerVoters fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final chosen = (flags & 1) == 1;
    final correct = (flags & 2) == 2;
    var option = reader.tgReadBytes();
    var voters = reader.readInt();
    return PollAnswerVoters(
        chosen: chosen, correct: correct, option: option, voters: voters);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(997055186, 4),
      [0, 0, 0, 0],
      serializeBytes(this.option),
      readBufferFromBigInt(this.voters, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PollAnswerVoters{ID: $ID, chosen: $chosen, correct: $correct, option: $option, voters: $voters}';
  }
}

class PollResults extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3703058083;
  static const SUBCLASS_OF_ID = 3283416711;
  final classType = "constructor";
  final ID = 3703058083;
  bool? min;
  List<dynamic>? results;
  int? totalVoters;
  List<BigInt>? recentVoters;
  String? solution;
  List<dynamic>? solutionEntities;

  PollResults(
      {required this.min,
      required this.results,
      required this.totalVoters,
      required this.recentVoters,
      required this.solution,
      required this.solutionEntities});

  static PollResults fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final min = (flags & 1) == 1;
    var results;
    if ((flags & 2) == 2) {
      var _vectorresults = reader.readInt();
      if (_vectorresults != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> results = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        results.add(reader.tgReadObject());
      }
    } else {
      results = null;
    }
    var totalVoters;
    if ((flags & 4) == 4) {
      totalVoters = reader.readInt();
    } else {
      totalVoters = null;
    }
    var recentVoters;
    if ((flags & 8) == 8) {
      var _vectorrecentVoters = reader.readInt();
      if (_vectorrecentVoters != 481674261) throw Exception('Wrong vectorId');
      List<BigInt> recentVoters = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        recentVoters.add(reader.readLong());
      }
    } else {
      recentVoters = null;
    }
    var solution;
    if ((flags & 16) == 16) {
      solution = reader.tgReadString();
    } else {
      solution = null;
    }
    var solutionEntities;
    if ((flags & 16) == 16) {
      var _vectorsolutionEntities = reader.readInt();
      if (_vectorsolutionEntities != 481674261)
        throw Exception('Wrong vectorId');
      List<dynamic> solutionEntities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        solutionEntities.add(reader.tgReadObject());
      }
    } else {
      solutionEntities = null;
    }
    return PollResults(
        min: min,
        results: results,
        totalVoters: totalVoters,
        recentVoters: recentVoters,
        solution: solution,
        solutionEntities: solutionEntities);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3703058083, 4),
      [0, 0, 0, 0],
      (this.results == null || this.results == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.results!.length, 4,
                  little: true, signed: true),
              this
                  .results!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.totalVoters == null || this.totalVoters == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.totalVoters, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.recentVoters == null || this.recentVoters == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.recentVoters!.length, 4,
                  little: true, signed: true),
              this
                  .recentVoters!
                  .map((x) =>
                      readBufferFromBigInt(x, 8, little: true, signed: true))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.solution == null || this.solution == false)
          ? List<int>.empty()
          : [serializeBytes(this.solution)]
              .expand((element) => element)
              .toList(),
      (this.solutionEntities == null || this.solutionEntities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.solutionEntities!.length, 4,
                  little: true, signed: true),
              this
                  .solutionEntities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PollResults{ID: $ID, min: $min, results: $results, totalVoters: $totalVoters, recentVoters: $recentVoters, solution: $solution, solutionEntities: $solutionEntities}';
  }
}

class ChatOnlines extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4030849616;
  static const SUBCLASS_OF_ID = 2357301306;
  final classType = "constructor";
  final ID = 4030849616;
  int onlines;

  ChatOnlines({required this.onlines});

  static ChatOnlines fromReader(BinaryReader reader) {
    var len;
    var onlines = reader.readInt();
    return ChatOnlines(onlines: onlines);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4030849616, 4),
      readBufferFromBigInt(this.onlines, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatOnlines{ID: $ID, onlines: $onlines}';
  }
}

class StatsURL extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1202287072;
  static const SUBCLASS_OF_ID = 2370606272;
  final classType = "constructor";
  final ID = 1202287072;
  String url;

  StatsURL({required this.url});

  static StatsURL fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    return StatsURL(url: url);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1202287072, 4),
      serializeBytes(this.url),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsURL{ID: $ID, url: $url}';
  }
}

class ChatAdminRights extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1605510357;
  static const SUBCLASS_OF_ID = 2252195780;
  final classType = "constructor";
  final ID = 1605510357;
  bool? changeInfo;
  bool? postMessages;
  bool? editMessages;
  bool? deleteMessages;
  bool? banUsers;
  bool? inviteUsers;
  bool? pinMessages;
  bool? addAdmins;
  bool? anonymous;
  bool? manageCall;
  bool? other;

  ChatAdminRights(
      {required this.changeInfo,
      required this.postMessages,
      required this.editMessages,
      required this.deleteMessages,
      required this.banUsers,
      required this.inviteUsers,
      required this.pinMessages,
      required this.addAdmins,
      required this.anonymous,
      required this.manageCall,
      required this.other});

  static ChatAdminRights fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final changeInfo = (flags & 1) == 1;
    final postMessages = (flags & 2) == 2;
    final editMessages = (flags & 4) == 4;
    final deleteMessages = (flags & 8) == 8;
    final banUsers = (flags & 16) == 16;
    final inviteUsers = (flags & 32) == 32;
    final pinMessages = (flags & 128) == 128;
    final addAdmins = (flags & 512) == 512;
    final anonymous = (flags & 1024) == 1024;
    final manageCall = (flags & 2048) == 2048;
    final other = (flags & 4096) == 4096;
    return ChatAdminRights(
        changeInfo: changeInfo,
        postMessages: postMessages,
        editMessages: editMessages,
        deleteMessages: deleteMessages,
        banUsers: banUsers,
        inviteUsers: inviteUsers,
        pinMessages: pinMessages,
        addAdmins: addAdmins,
        anonymous: anonymous,
        manageCall: manageCall,
        other: other);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1605510357, 4),
      [0, 0, 0, 0],
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatAdminRights{ID: $ID, changeInfo: $changeInfo, postMessages: $postMessages, editMessages: $editMessages, deleteMessages: $deleteMessages, banUsers: $banUsers, inviteUsers: $inviteUsers, pinMessages: $pinMessages, addAdmins: $addAdmins, anonymous: $anonymous, manageCall: $manageCall, other: $other}';
  }
}

class ChatBannedRights extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2668758040;
  static const SUBCLASS_OF_ID = 1263814057;
  final classType = "constructor";
  final ID = 2668758040;
  bool? viewMessages;
  bool? sendMessages;
  bool? sendMedia;
  bool? sendStickers;
  bool? sendGifs;
  bool? sendGames;
  bool? sendInline;
  bool? embedLinks;
  bool? sendPolls;
  bool? changeInfo;
  bool? inviteUsers;
  bool? pinMessages;
  int untilDate;

  ChatBannedRights(
      {required this.viewMessages,
      required this.sendMessages,
      required this.sendMedia,
      required this.sendStickers,
      required this.sendGifs,
      required this.sendGames,
      required this.sendInline,
      required this.embedLinks,
      required this.sendPolls,
      required this.changeInfo,
      required this.inviteUsers,
      required this.pinMessages,
      required this.untilDate});

  static ChatBannedRights fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final viewMessages = (flags & 1) == 1;
    final sendMessages = (flags & 2) == 2;
    final sendMedia = (flags & 4) == 4;
    final sendStickers = (flags & 8) == 8;
    final sendGifs = (flags & 16) == 16;
    final sendGames = (flags & 32) == 32;
    final sendInline = (flags & 64) == 64;
    final embedLinks = (flags & 128) == 128;
    final sendPolls = (flags & 256) == 256;
    final changeInfo = (flags & 1024) == 1024;
    final inviteUsers = (flags & 32768) == 32768;
    final pinMessages = (flags & 131072) == 131072;
    var untilDate = reader.readInt();
    return ChatBannedRights(
        viewMessages: viewMessages,
        sendMessages: sendMessages,
        sendMedia: sendMedia,
        sendStickers: sendStickers,
        sendGifs: sendGifs,
        sendGames: sendGames,
        sendInline: sendInline,
        embedLinks: embedLinks,
        sendPolls: sendPolls,
        changeInfo: changeInfo,
        inviteUsers: inviteUsers,
        pinMessages: pinMessages,
        untilDate: untilDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2668758040, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.untilDate, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatBannedRights{ID: $ID, viewMessages: $viewMessages, sendMessages: $sendMessages, sendMedia: $sendMedia, sendStickers: $sendStickers, sendGifs: $sendGifs, sendGames: $sendGames, sendInline: $sendInline, embedLinks: $embedLinks, sendPolls: $sendPolls, changeInfo: $changeInfo, inviteUsers: $inviteUsers, pinMessages: $pinMessages, untilDate: $untilDate}';
  }
}

class InputWallPaper extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3861952889;
  static const SUBCLASS_OF_ID = 4000784410;
  final classType = "constructor";
  final ID = 3861952889;
  BigInt id;
  BigInt accessHash;

  InputWallPaper({required this.id, required this.accessHash});

  static InputWallPaper fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputWallPaper(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3861952889, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputWallPaper{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class InputWallPaperSlug extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1913199744;
  static const SUBCLASS_OF_ID = 4000784410;
  final classType = "constructor";
  final ID = 1913199744;
  String slug;

  InputWallPaperSlug({required this.slug});

  static InputWallPaperSlug fromReader(BinaryReader reader) {
    var len;
    var slug = reader.tgReadString();
    return InputWallPaperSlug(slug: slug);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1913199744, 4),
      serializeBytes(this.slug),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputWallPaperSlug{ID: $ID, slug: $slug}';
  }
}

class InputWallPaperNoFile extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2524595758;
  static const SUBCLASS_OF_ID = 4000784410;
  final classType = "constructor";
  final ID = 2524595758;
  BigInt id;

  InputWallPaperNoFile({required this.id});

  static InputWallPaperNoFile fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    return InputWallPaperNoFile(id: id);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2524595758, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputWallPaperNoFile{ID: $ID, id: $id}';
  }
}

class CodeSettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2321836482;
  static const SUBCLASS_OF_ID = 1223539850;
  final classType = "constructor";
  final ID = 2321836482;
  bool? allowFlashcall;
  bool? currentNumber;
  bool? allowAppHash;
  bool? allowMissedCall;
  List<List<int>>? logoutTokens;

  CodeSettings(
      {required this.allowFlashcall,
      required this.currentNumber,
      required this.allowAppHash,
      required this.allowMissedCall,
      required this.logoutTokens});

  static CodeSettings fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final allowFlashcall = (flags & 1) == 1;
    final currentNumber = (flags & 2) == 2;
    final allowAppHash = (flags & 16) == 16;
    final allowMissedCall = (flags & 32) == 32;
    var logoutTokens;
    if ((flags & 64) == 64) {
      var _vectorlogoutTokens = reader.readInt();
      if (_vectorlogoutTokens != 481674261) throw Exception('Wrong vectorId');
      List<List<int>> logoutTokens = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        logoutTokens.add(reader.tgReadBytes());
      }
    } else {
      logoutTokens = null;
    }
    return CodeSettings(
        allowFlashcall: allowFlashcall,
        currentNumber: currentNumber,
        allowAppHash: allowAppHash,
        allowMissedCall: allowMissedCall,
        logoutTokens: logoutTokens);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2321836482, 4),
      [0, 0, 0, 0],
      (this.logoutTokens == null || this.logoutTokens == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.logoutTokens!.length, 4,
                  little: true, signed: true),
              this
                  .logoutTokens!
                  .map((x) => serializeBytes(x))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'CodeSettings{ID: $ID, allowFlashcall: $allowFlashcall, currentNumber: $currentNumber, allowAppHash: $allowAppHash, allowMissedCall: $allowMissedCall, logoutTokens: $logoutTokens}';
  }
}

class WallPaperSettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 499236004;
  static const SUBCLASS_OF_ID = 1098244882;
  final classType = "constructor";
  final ID = 499236004;
  bool? blur;
  bool? motion;
  int? backgroundColor;
  int? secondBackgroundColor;
  int? thirdBackgroundColor;
  int? fourthBackgroundColor;
  int? intensity;
  int? rotation;

  WallPaperSettings(
      {required this.blur,
      required this.motion,
      required this.backgroundColor,
      required this.secondBackgroundColor,
      required this.thirdBackgroundColor,
      required this.fourthBackgroundColor,
      required this.intensity,
      required this.rotation});

  static WallPaperSettings fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final blur = (flags & 2) == 2;
    final motion = (flags & 4) == 4;
    var backgroundColor;
    if ((flags & 1) == 1) {
      backgroundColor = reader.readInt();
    } else {
      backgroundColor = null;
    }
    var secondBackgroundColor;
    if ((flags & 16) == 16) {
      secondBackgroundColor = reader.readInt();
    } else {
      secondBackgroundColor = null;
    }
    var thirdBackgroundColor;
    if ((flags & 32) == 32) {
      thirdBackgroundColor = reader.readInt();
    } else {
      thirdBackgroundColor = null;
    }
    var fourthBackgroundColor;
    if ((flags & 64) == 64) {
      fourthBackgroundColor = reader.readInt();
    } else {
      fourthBackgroundColor = null;
    }
    var intensity;
    if ((flags & 8) == 8) {
      intensity = reader.readInt();
    } else {
      intensity = null;
    }
    var rotation;
    if ((flags & 16) == 16) {
      rotation = reader.readInt();
    } else {
      rotation = null;
    }
    return WallPaperSettings(
        blur: blur,
        motion: motion,
        backgroundColor: backgroundColor,
        secondBackgroundColor: secondBackgroundColor,
        thirdBackgroundColor: thirdBackgroundColor,
        fourthBackgroundColor: fourthBackgroundColor,
        intensity: intensity,
        rotation: rotation);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(499236004, 4),
      [0, 0, 0, 0],
      (this.backgroundColor == null || this.backgroundColor == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.backgroundColor, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.secondBackgroundColor == null ||
              this.secondBackgroundColor == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.secondBackgroundColor, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.thirdBackgroundColor == null || this.thirdBackgroundColor == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.thirdBackgroundColor, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.fourthBackgroundColor == null ||
              this.fourthBackgroundColor == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.fourthBackgroundColor, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.intensity == null || this.intensity == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.intensity, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.rotation == null || this.rotation == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.rotation, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WallPaperSettings{ID: $ID, blur: $blur, motion: $motion, backgroundColor: $backgroundColor, secondBackgroundColor: $secondBackgroundColor, thirdBackgroundColor: $thirdBackgroundColor, fourthBackgroundColor: $fourthBackgroundColor, intensity: $intensity, rotation: $rotation}';
  }
}

class AutoDownloadSettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3762434803;
  static const SUBCLASS_OF_ID = 1361582535;
  final classType = "constructor";
  final ID = 3762434803;
  bool? disabled;
  bool? videoPreloadLarge;
  bool? audioPreloadNext;
  bool? phonecallsLessData;
  int photoSizeMax;
  int videoSizeMax;
  int fileSizeMax;
  int videoUploadMaxbitrate;

  AutoDownloadSettings(
      {required this.disabled,
      required this.videoPreloadLarge,
      required this.audioPreloadNext,
      required this.phonecallsLessData,
      required this.photoSizeMax,
      required this.videoSizeMax,
      required this.fileSizeMax,
      required this.videoUploadMaxbitrate});

  static AutoDownloadSettings fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final disabled = (flags & 1) == 1;
    final videoPreloadLarge = (flags & 2) == 2;
    final audioPreloadNext = (flags & 4) == 4;
    final phonecallsLessData = (flags & 8) == 8;
    var photoSizeMax = reader.readInt();
    var videoSizeMax = reader.readInt();
    var fileSizeMax = reader.readInt();
    var videoUploadMaxbitrate = reader.readInt();
    return AutoDownloadSettings(
        disabled: disabled,
        videoPreloadLarge: videoPreloadLarge,
        audioPreloadNext: audioPreloadNext,
        phonecallsLessData: phonecallsLessData,
        photoSizeMax: photoSizeMax,
        videoSizeMax: videoSizeMax,
        fileSizeMax: fileSizeMax,
        videoUploadMaxbitrate: videoUploadMaxbitrate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3762434803, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.photoSizeMax, 4, little: true, signed: true),
      readBufferFromBigInt(this.videoSizeMax, 4, little: true, signed: true),
      readBufferFromBigInt(this.fileSizeMax, 4, little: true, signed: true),
      readBufferFromBigInt(this.videoUploadMaxbitrate, 4,
          little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'AutoDownloadSettings{ID: $ID, disabled: $disabled, videoPreloadLarge: $videoPreloadLarge, audioPreloadNext: $audioPreloadNext, phonecallsLessData: $phonecallsLessData, photoSizeMax: $photoSizeMax, videoSizeMax: $videoSizeMax, fileSizeMax: $fileSizeMax, videoUploadMaxbitrate: $videoUploadMaxbitrate}';
  }
}

class EmojiKeyword extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3585325561;
  static const SUBCLASS_OF_ID = 1712497982;
  final classType = "constructor";
  final ID = 3585325561;
  String keyword;
  List<String> emoticons;

  EmojiKeyword({required this.keyword, required this.emoticons});

  static EmojiKeyword fromReader(BinaryReader reader) {
    var len;
    var keyword = reader.tgReadString();
    var _vectoremoticons = reader.readInt();
    if (_vectoremoticons != 481674261) throw Exception('Wrong vectorId');
    List<String> emoticons = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      emoticons.add(reader.tgReadString());
    }
    return EmojiKeyword(keyword: keyword, emoticons: emoticons);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3585325561, 4),
      serializeBytes(this.keyword),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.emoticons!.length, 4,
          little: true, signed: true),
      this
          .emoticons!
          .map((x) => serializeBytes(x))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EmojiKeyword{ID: $ID, keyword: $keyword, emoticons: $emoticons}';
  }
}

class EmojiKeywordDeleted extends BaseConstructor {
  static const CONSTRUCTOR_ID = 594408994;
  static const SUBCLASS_OF_ID = 1712497982;
  final classType = "constructor";
  final ID = 594408994;
  String keyword;
  List<String> emoticons;

  EmojiKeywordDeleted({required this.keyword, required this.emoticons});

  static EmojiKeywordDeleted fromReader(BinaryReader reader) {
    var len;
    var keyword = reader.tgReadString();
    var _vectoremoticons = reader.readInt();
    if (_vectoremoticons != 481674261) throw Exception('Wrong vectorId');
    List<String> emoticons = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      emoticons.add(reader.tgReadString());
    }
    return EmojiKeywordDeleted(keyword: keyword, emoticons: emoticons);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(594408994, 4),
      serializeBytes(this.keyword),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.emoticons!.length, 4,
          little: true, signed: true),
      this
          .emoticons!
          .map((x) => serializeBytes(x))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EmojiKeywordDeleted{ID: $ID, keyword: $keyword, emoticons: $emoticons}';
  }
}

class EmojiKeywordsDifference extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1556570557;
  static const SUBCLASS_OF_ID = 3531196018;
  final classType = "constructor";
  final ID = 1556570557;
  String langCode;
  int fromVersion;
  int version;
  List<dynamic> keywords;

  EmojiKeywordsDifference(
      {required this.langCode,
      required this.fromVersion,
      required this.version,
      required this.keywords});

  static EmojiKeywordsDifference fromReader(BinaryReader reader) {
    var len;
    var langCode = reader.tgReadString();
    var fromVersion = reader.readInt();
    var version = reader.readInt();
    var _vectorkeywords = reader.readInt();
    if (_vectorkeywords != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> keywords = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      keywords.add(reader.tgReadObject());
    }
    return EmojiKeywordsDifference(
        langCode: langCode,
        fromVersion: fromVersion,
        version: version,
        keywords: keywords);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1556570557, 4),
      serializeBytes(this.langCode),
      readBufferFromBigInt(this.fromVersion, 4, little: true, signed: true),
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.keywords!.length, 4,
          little: true, signed: true),
      this
          .keywords!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EmojiKeywordsDifference{ID: $ID, langCode: $langCode, fromVersion: $fromVersion, version: $version, keywords: $keywords}';
  }
}

class EmojiURL extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2775937949;
  static const SUBCLASS_OF_ID = 530614809;
  final classType = "constructor";
  final ID = 2775937949;
  String url;

  EmojiURL({required this.url});

  static EmojiURL fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    return EmojiURL(url: url);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2775937949, 4),
      serializeBytes(this.url),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EmojiURL{ID: $ID, url: $url}';
  }
}

class EmojiLanguage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3019592545;
  static const SUBCLASS_OF_ID = 2760705262;
  final classType = "constructor";
  final ID = 3019592545;
  String langCode;

  EmojiLanguage({required this.langCode});

  static EmojiLanguage fromReader(BinaryReader reader) {
    var len;
    var langCode = reader.tgReadString();
    return EmojiLanguage(langCode: langCode);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3019592545, 4),
      serializeBytes(this.langCode),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'EmojiLanguage{ID: $ID, langCode: $langCode}';
  }
}

class Folder extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4283715173;
  static const SUBCLASS_OF_ID = 3943566587;
  final classType = "constructor";
  final ID = 4283715173;
  bool? autofillNewBroadcasts;
  bool? autofillPublicGroups;
  bool? autofillNewCorrespondents;
  int id;
  String title;
  var photo;

  Folder(
      {required this.autofillNewBroadcasts,
      required this.autofillPublicGroups,
      required this.autofillNewCorrespondents,
      required this.id,
      required this.title,
      required this.photo});

  static Folder fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final autofillNewBroadcasts = (flags & 1) == 1;
    final autofillPublicGroups = (flags & 2) == 2;
    final autofillNewCorrespondents = (flags & 4) == 4;
    var id = reader.readInt();
    var title = reader.tgReadString();
    var photo;
    if ((flags & 8) == 8) {
      photo = reader.tgReadObject();
    } else {
      photo = null;
    }
    return Folder(
        autofillNewBroadcasts: autofillNewBroadcasts,
        autofillPublicGroups: autofillPublicGroups,
        autofillNewCorrespondents: autofillNewCorrespondents,
        id: id,
        title: title,
        photo: photo);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4283715173, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      serializeBytes(this.title),
      (this.photo == null || this.photo == false)
          ? List<int>.empty()
          : [(this.photo.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Folder{ID: $ID, autofillNewBroadcasts: $autofillNewBroadcasts, autofillPublicGroups: $autofillPublicGroups, autofillNewCorrespondents: $autofillNewCorrespondents, id: $id, title: $title, photo: $photo}';
  }
}

class InputFolderPeer extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4224893590;
  static const SUBCLASS_OF_ID = 1954700800;
  final classType = "constructor";
  final ID = 4224893590;
  var peer;
  int folderId;

  InputFolderPeer({required this.peer, required this.folderId});

  static InputFolderPeer fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var folderId = reader.readInt();
    return InputFolderPeer(peer: peer, folderId: folderId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4224893590, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.folderId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputFolderPeer{ID: $ID, peer: $peer, folderId: $folderId}';
  }
}

class FolderPeer extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3921323624;
  static const SUBCLASS_OF_ID = 4092733499;
  final classType = "constructor";
  final ID = 3921323624;
  var peer;
  int folderId;

  FolderPeer({required this.peer, required this.folderId});

  static FolderPeer fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var folderId = reader.readInt();
    return FolderPeer(peer: peer, folderId: folderId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3921323624, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.folderId, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'FolderPeer{ID: $ID, peer: $peer, folderId: $folderId}';
  }
}

class UrlAuthResultRequest extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2463316494;
  static const SUBCLASS_OF_ID = 2003159838;
  final classType = "constructor";
  final ID = 2463316494;
  bool? requestWriteAccess;
  var bot;
  String domain;

  UrlAuthResultRequest(
      {required this.requestWriteAccess,
      required this.bot,
      required this.domain});

  static UrlAuthResultRequest fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final requestWriteAccess = (flags & 1) == 1;
    var bot = reader.tgReadObject();
    var domain = reader.tgReadString();
    return UrlAuthResultRequest(
        requestWriteAccess: requestWriteAccess, bot: bot, domain: domain);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2463316494, 4),
      [0, 0, 0, 0],
      (this.bot.getBytes() as List<int>),
      serializeBytes(this.domain),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UrlAuthResultRequest{ID: $ID, requestWriteAccess: $requestWriteAccess, bot: $bot, domain: $domain}';
  }
}

class UrlAuthResultAccepted extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2408320590;
  static const SUBCLASS_OF_ID = 2003159838;
  final classType = "constructor";
  final ID = 2408320590;
  String url;

  UrlAuthResultAccepted({required this.url});

  static UrlAuthResultAccepted fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    return UrlAuthResultAccepted(url: url);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2408320590, 4),
      serializeBytes(this.url),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UrlAuthResultAccepted{ID: $ID, url: $url}';
  }
}

class UrlAuthResultDefault extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2849430303;
  static const SUBCLASS_OF_ID = 2003159838;
  final classType = "constructor";
  final ID = 2849430303;

  UrlAuthResultDefault();

  static UrlAuthResultDefault fromReader(BinaryReader reader) {
    var len;
    return UrlAuthResultDefault();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2849430303, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'UrlAuthResultDefault{ID: $ID, }';
  }
}

class ChannelLocationEmpty extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3216354699;
  static const SUBCLASS_OF_ID = 3961916287;
  final classType = "constructor";
  final ID = 3216354699;

  ChannelLocationEmpty();

  static ChannelLocationEmpty fromReader(BinaryReader reader) {
    var len;
    return ChannelLocationEmpty();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3216354699, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelLocationEmpty{ID: $ID, }';
  }
}

class ChannelLocation extends BaseConstructor {
  static const CONSTRUCTOR_ID = 547062491;
  static const SUBCLASS_OF_ID = 3961916287;
  final classType = "constructor";
  final ID = 547062491;
  var geoPoint;
  String address;

  ChannelLocation({required this.geoPoint, required this.address});

  static ChannelLocation fromReader(BinaryReader reader) {
    var len;
    var geoPoint = reader.tgReadObject();
    var address = reader.tgReadString();
    return ChannelLocation(geoPoint: geoPoint, address: address);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(547062491, 4),
      (this.geoPoint.getBytes() as List<int>),
      serializeBytes(this.address),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChannelLocation{ID: $ID, geoPoint: $geoPoint, address: $address}';
  }
}

class PeerLocated extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3393592157;
  static const SUBCLASS_OF_ID = 4208604332;
  final classType = "constructor";
  final ID = 3393592157;
  var peer;
  int expires;
  int distance;

  PeerLocated(
      {required this.peer, required this.expires, required this.distance});

  static PeerLocated fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var expires = reader.readInt();
    var distance = reader.readInt();
    return PeerLocated(peer: peer, expires: expires, distance: distance);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3393592157, 4),
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.expires, 4, little: true, signed: true),
      readBufferFromBigInt(this.distance, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PeerLocated{ID: $ID, peer: $peer, expires: $expires, distance: $distance}';
  }
}

class PeerSelfLocated extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4176226379;
  static const SUBCLASS_OF_ID = 4208604332;
  final classType = "constructor";
  final ID = 4176226379;
  int expires;

  PeerSelfLocated({required this.expires});

  static PeerSelfLocated fromReader(BinaryReader reader) {
    var len;
    var expires = reader.readInt();
    return PeerSelfLocated(expires: expires);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4176226379, 4),
      readBufferFromBigInt(this.expires, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PeerSelfLocated{ID: $ID, expires: $expires}';
  }
}

class RestrictionReason extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3497176244;
  static const SUBCLASS_OF_ID = 112039341;
  final classType = "constructor";
  final ID = 3497176244;
  String platform;
  String reason;
  String text;

  RestrictionReason(
      {required this.platform, required this.reason, required this.text});

  static RestrictionReason fromReader(BinaryReader reader) {
    var len;
    var platform = reader.tgReadString();
    var reason = reader.tgReadString();
    var text = reader.tgReadString();
    return RestrictionReason(platform: platform, reason: reason, text: text);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3497176244, 4),
      serializeBytes(this.platform),
      serializeBytes(this.reason),
      serializeBytes(this.text),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RestrictionReason{ID: $ID, platform: $platform, reason: $reason, text: $text}';
  }
}

class InputTheme extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1012306921;
  static const SUBCLASS_OF_ID = 127992048;
  final classType = "constructor";
  final ID = 1012306921;
  BigInt id;
  BigInt accessHash;

  InputTheme({required this.id, required this.accessHash});

  static InputTheme fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputTheme(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1012306921, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputTheme{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class InputThemeSlug extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4119399921;
  static const SUBCLASS_OF_ID = 127992048;
  final classType = "constructor";
  final ID = 4119399921;
  String slug;

  InputThemeSlug({required this.slug});

  static InputThemeSlug fromReader(BinaryReader reader) {
    var len;
    var slug = reader.tgReadString();
    return InputThemeSlug(slug: slug);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4119399921, 4),
      serializeBytes(this.slug),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputThemeSlug{ID: $ID, slug: $slug}';
  }
}

class Theme extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2685298646;
  static const SUBCLASS_OF_ID = 1454688268;
  final classType = "constructor";
  final ID = 2685298646;
  bool? creator;
  bool? defaultVar;
  bool? forChat;
  BigInt id;
  BigInt accessHash;
  String slug;
  String title;
  var document;
  List<dynamic>? settings;
  String? emoticon;
  int? installsCount;

  Theme(
      {required this.creator,
      required this.defaultVar,
      required this.forChat,
      required this.id,
      required this.accessHash,
      required this.slug,
      required this.title,
      required this.document,
      required this.settings,
      required this.emoticon,
      required this.installsCount});

  static Theme fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final creator = (flags & 1) == 1;
    final defaultVar = (flags & 2) == 2;
    final forChat = (flags & 32) == 32;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var slug = reader.tgReadString();
    var title = reader.tgReadString();
    var document;
    if ((flags & 4) == 4) {
      document = reader.tgReadObject();
    } else {
      document = null;
    }
    var settings;
    if ((flags & 8) == 8) {
      var _vectorsettings = reader.readInt();
      if (_vectorsettings != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> settings = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        settings.add(reader.tgReadObject());
      }
    } else {
      settings = null;
    }
    var emoticon;
    if ((flags & 64) == 64) {
      emoticon = reader.tgReadString();
    } else {
      emoticon = null;
    }
    var installsCount;
    if ((flags & 16) == 16) {
      installsCount = reader.readInt();
    } else {
      installsCount = null;
    }
    return Theme(
        creator: creator,
        defaultVar: defaultVar,
        forChat: forChat,
        id: id,
        accessHash: accessHash,
        slug: slug,
        title: title,
        document: document,
        settings: settings,
        emoticon: emoticon,
        installsCount: installsCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2685298646, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      serializeBytes(this.slug),
      serializeBytes(this.title),
      (this.document == null || this.document == false)
          ? List<int>.empty()
          : [(this.document.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.settings == null || this.settings == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.settings!.length, 4,
                  little: true, signed: true),
              this
                  .settings!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.emoticon == null || this.emoticon == false)
          ? List<int>.empty()
          : [serializeBytes(this.emoticon)]
              .expand((element) => element)
              .toList(),
      (this.installsCount == null || this.installsCount == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.installsCount, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Theme{ID: $ID, creator: $creator, defaultVar: $defaultVar, forChat: $forChat, id: $id, accessHash: $accessHash, slug: $slug, title: $title, document: $document, settings: $settings, emoticon: $emoticon, installsCount: $installsCount}';
  }
}

class BaseThemeClassic extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3282117730;
  static const SUBCLASS_OF_ID = 520352836;
  final classType = "constructor";
  final ID = 3282117730;

  BaseThemeClassic();

  static BaseThemeClassic fromReader(BinaryReader reader) {
    var len;
    return BaseThemeClassic();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3282117730, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BaseThemeClassic{ID: $ID, }';
  }
}

class BaseThemeDay extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4225242760;
  static const SUBCLASS_OF_ID = 520352836;
  final classType = "constructor";
  final ID = 4225242760;

  BaseThemeDay();

  static BaseThemeDay fromReader(BinaryReader reader) {
    var len;
    return BaseThemeDay();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4225242760, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BaseThemeDay{ID: $ID, }';
  }
}

class BaseThemeNight extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3081969320;
  static const SUBCLASS_OF_ID = 520352836;
  final classType = "constructor";
  final ID = 3081969320;

  BaseThemeNight();

  static BaseThemeNight fromReader(BinaryReader reader) {
    var len;
    return BaseThemeNight();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3081969320, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BaseThemeNight{ID: $ID, }';
  }
}

class BaseThemeTinted extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1834973166;
  static const SUBCLASS_OF_ID = 520352836;
  final classType = "constructor";
  final ID = 1834973166;

  BaseThemeTinted();

  static BaseThemeTinted fromReader(BinaryReader reader) {
    var len;
    return BaseThemeTinted();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1834973166, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BaseThemeTinted{ID: $ID, }';
  }
}

class BaseThemeArctic extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1527845466;
  static const SUBCLASS_OF_ID = 520352836;
  final classType = "constructor";
  final ID = 1527845466;

  BaseThemeArctic();

  static BaseThemeArctic fromReader(BinaryReader reader) {
    var len;
    return BaseThemeArctic();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1527845466, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BaseThemeArctic{ID: $ID, }';
  }
}

class InputThemeSettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2413711439;
  static const SUBCLASS_OF_ID = 2201536642;
  final classType = "constructor";
  final ID = 2413711439;
  bool? messageColorsAnimated;
  var baseTheme;
  int accentColor;
  int? outboxAccentColor;
  List<int>? messageColors;
  var wallpaper;
  var wallpaperSettings;

  InputThemeSettings(
      {required this.messageColorsAnimated,
      required this.baseTheme,
      required this.accentColor,
      required this.outboxAccentColor,
      required this.messageColors,
      required this.wallpaper,
      required this.wallpaperSettings});

  static InputThemeSettings fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final messageColorsAnimated = (flags & 4) == 4;
    var baseTheme = reader.tgReadObject();
    var accentColor = reader.readInt();
    var outboxAccentColor;
    if ((flags & 8) == 8) {
      outboxAccentColor = reader.readInt();
    } else {
      outboxAccentColor = null;
    }
    var messageColors;
    if ((flags & 1) == 1) {
      var _vectormessageColors = reader.readInt();
      if (_vectormessageColors != 481674261) throw Exception('Wrong vectorId');
      List<int> messageColors = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        messageColors.add(reader.readInt());
      }
    } else {
      messageColors = null;
    }
    var wallpaper;
    if ((flags & 2) == 2) {
      wallpaper = reader.tgReadObject();
    } else {
      wallpaper = null;
    }
    var wallpaperSettings;
    if ((flags & 2) == 2) {
      wallpaperSettings = reader.tgReadObject();
    } else {
      wallpaperSettings = null;
    }
    return InputThemeSettings(
        messageColorsAnimated: messageColorsAnimated,
        baseTheme: baseTheme,
        accentColor: accentColor,
        outboxAccentColor: outboxAccentColor,
        messageColors: messageColors,
        wallpaper: wallpaper,
        wallpaperSettings: wallpaperSettings);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2413711439, 4),
      [0, 0, 0, 0],
      (this.baseTheme.getBytes() as List<int>),
      readBufferFromBigInt(this.accentColor, 4, little: true, signed: true),
      (this.outboxAccentColor == null || this.outboxAccentColor == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.outboxAccentColor, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.messageColors == null || this.messageColors == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.messageColors!.length, 4,
                  little: true, signed: true),
              this
                  .messageColors!
                  .map((x) =>
                      readBufferFromBigInt(x, 4, little: true, signed: true))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.wallpaper == null || this.wallpaper == false)
          ? List<int>.empty()
          : [(this.wallpaper.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.wallpaperSettings == null || this.wallpaperSettings == false)
          ? List<int>.empty()
          : [(this.wallpaperSettings.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputThemeSettings{ID: $ID, messageColorsAnimated: $messageColorsAnimated, baseTheme: $baseTheme, accentColor: $accentColor, outboxAccentColor: $outboxAccentColor, messageColors: $messageColors, wallpaper: $wallpaper, wallpaperSettings: $wallpaperSettings}';
  }
}

class ThemeSettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4200117972;
  static const SUBCLASS_OF_ID = 2187750712;
  final classType = "constructor";
  final ID = 4200117972;
  bool? messageColorsAnimated;
  var baseTheme;
  int accentColor;
  int? outboxAccentColor;
  List<int>? messageColors;
  var wallpaper;

  ThemeSettings(
      {required this.messageColorsAnimated,
      required this.baseTheme,
      required this.accentColor,
      required this.outboxAccentColor,
      required this.messageColors,
      required this.wallpaper});

  static ThemeSettings fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final messageColorsAnimated = (flags & 4) == 4;
    var baseTheme = reader.tgReadObject();
    var accentColor = reader.readInt();
    var outboxAccentColor;
    if ((flags & 8) == 8) {
      outboxAccentColor = reader.readInt();
    } else {
      outboxAccentColor = null;
    }
    var messageColors;
    if ((flags & 1) == 1) {
      var _vectormessageColors = reader.readInt();
      if (_vectormessageColors != 481674261) throw Exception('Wrong vectorId');
      List<int> messageColors = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        messageColors.add(reader.readInt());
      }
    } else {
      messageColors = null;
    }
    var wallpaper;
    if ((flags & 2) == 2) {
      wallpaper = reader.tgReadObject();
    } else {
      wallpaper = null;
    }
    return ThemeSettings(
        messageColorsAnimated: messageColorsAnimated,
        baseTheme: baseTheme,
        accentColor: accentColor,
        outboxAccentColor: outboxAccentColor,
        messageColors: messageColors,
        wallpaper: wallpaper);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4200117972, 4),
      [0, 0, 0, 0],
      (this.baseTheme.getBytes() as List<int>),
      readBufferFromBigInt(this.accentColor, 4, little: true, signed: true),
      (this.outboxAccentColor == null || this.outboxAccentColor == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.outboxAccentColor, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.messageColors == null || this.messageColors == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.messageColors!.length, 4,
                  little: true, signed: true),
              this
                  .messageColors!
                  .map((x) =>
                      readBufferFromBigInt(x, 4, little: true, signed: true))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.wallpaper == null || this.wallpaper == false)
          ? List<int>.empty()
          : [(this.wallpaper.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ThemeSettings{ID: $ID, messageColorsAnimated: $messageColorsAnimated, baseTheme: $baseTheme, accentColor: $accentColor, outboxAccentColor: $outboxAccentColor, messageColors: $messageColors, wallpaper: $wallpaper}';
  }
}

class WebPageAttributeTheme extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1421174295;
  static const SUBCLASS_OF_ID = 2949638599;
  final classType = "constructor";
  final ID = 1421174295;
  List<dynamic>? documents;
  var settings;

  WebPageAttributeTheme({required this.documents, required this.settings});

  static WebPageAttributeTheme fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var documents;
    if ((flags & 1) == 1) {
      var _vectordocuments = reader.readInt();
      if (_vectordocuments != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> documents = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        documents.add(reader.tgReadObject());
      }
    } else {
      documents = null;
    }
    var settings;
    if ((flags & 2) == 2) {
      settings = reader.tgReadObject();
    } else {
      settings = null;
    }
    return WebPageAttributeTheme(documents: documents, settings: settings);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1421174295, 4),
      [0, 0, 0, 0],
      (this.documents == null || this.documents == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.documents!.length, 4,
                  little: true, signed: true),
              this
                  .documents!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.settings == null || this.settings == false)
          ? List<int>.empty()
          : [(this.settings.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'WebPageAttributeTheme{ID: $ID, documents: $documents, settings: $settings}';
  }
}

class MessageUserVote extends BaseConstructor {
  static const CONSTRUCTOR_ID = 886196148;
  static const SUBCLASS_OF_ID = 3375158674;
  final classType = "constructor";
  final ID = 886196148;
  BigInt userId;
  List<int> option;
  int date;

  MessageUserVote(
      {required this.userId, required this.option, required this.date});

  static MessageUserVote fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var option = reader.tgReadBytes();
    var date = reader.readInt();
    return MessageUserVote(userId: userId, option: option, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(886196148, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.option),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageUserVote{ID: $ID, userId: $userId, option: $option, date: $date}';
  }
}

class MessageUserVoteInputOption extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1017491692;
  static const SUBCLASS_OF_ID = 3375158674;
  final classType = "constructor";
  final ID = 1017491692;
  BigInt userId;
  int date;

  MessageUserVoteInputOption({required this.userId, required this.date});

  static MessageUserVoteInputOption fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var date = reader.readInt();
    return MessageUserVoteInputOption(userId: userId, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1017491692, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageUserVoteInputOption{ID: $ID, userId: $userId, date: $date}';
  }
}

class MessageUserVoteMultiple extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2321933655;
  static const SUBCLASS_OF_ID = 3375158674;
  final classType = "constructor";
  final ID = 2321933655;
  BigInt userId;
  List<List<int>> options;
  int date;

  MessageUserVoteMultiple(
      {required this.userId, required this.options, required this.date});

  static MessageUserVoteMultiple fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var _vectoroptions = reader.readInt();
    if (_vectoroptions != 481674261) throw Exception('Wrong vectorId');
    List<List<int>> options = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      options.add(reader.tgReadBytes());
    }
    var date = reader.readInt();
    return MessageUserVoteMultiple(
        userId: userId, options: options, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2321933655, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.options!.length, 4, little: true, signed: true),
      this.options!.map((x) => serializeBytes(x)).expand((element) => element),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageUserVoteMultiple{ID: $ID, userId: $userId, options: $options, date: $date}';
  }
}

class BankCardOpenUrl extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4117234314;
  static const SUBCLASS_OF_ID = 4074915342;
  final classType = "constructor";
  final ID = 4117234314;
  String url;
  String name;

  BankCardOpenUrl({required this.url, required this.name});

  static BankCardOpenUrl fromReader(BinaryReader reader) {
    var len;
    var url = reader.tgReadString();
    var name = reader.tgReadString();
    return BankCardOpenUrl(url: url, name: name);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4117234314, 4),
      serializeBytes(this.url),
      serializeBytes(this.name),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BankCardOpenUrl{ID: $ID, url: $url, name: $name}';
  }
}

class DialogFilter extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1949890536;
  static const SUBCLASS_OF_ID = 1764475991;
  final classType = "constructor";
  final ID = 1949890536;
  bool? contacts;
  bool? nonContacts;
  bool? groups;
  bool? broadcasts;
  bool? bots;
  bool? excludeMuted;
  bool? excludeRead;
  bool? excludeArchived;
  int id;
  String title;
  String? emoticon;
  List<dynamic> pinnedPeers;
  List<dynamic> includePeers;
  List<dynamic> excludePeers;

  DialogFilter(
      {required this.contacts,
      required this.nonContacts,
      required this.groups,
      required this.broadcasts,
      required this.bots,
      required this.excludeMuted,
      required this.excludeRead,
      required this.excludeArchived,
      required this.id,
      required this.title,
      required this.emoticon,
      required this.pinnedPeers,
      required this.includePeers,
      required this.excludePeers});

  static DialogFilter fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final contacts = (flags & 1) == 1;
    final nonContacts = (flags & 2) == 2;
    final groups = (flags & 4) == 4;
    final broadcasts = (flags & 8) == 8;
    final bots = (flags & 16) == 16;
    final excludeMuted = (flags & 2048) == 2048;
    final excludeRead = (flags & 4096) == 4096;
    final excludeArchived = (flags & 8192) == 8192;
    var id = reader.readInt();
    var title = reader.tgReadString();
    var emoticon;
    if ((flags & 33554432) == 33554432) {
      emoticon = reader.tgReadString();
    } else {
      emoticon = null;
    }
    var _vectorpinnedPeers = reader.readInt();
    if (_vectorpinnedPeers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> pinnedPeers = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      pinnedPeers.add(reader.tgReadObject());
    }
    var _vectorincludePeers = reader.readInt();
    if (_vectorincludePeers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> includePeers = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      includePeers.add(reader.tgReadObject());
    }
    var _vectorexcludePeers = reader.readInt();
    if (_vectorexcludePeers != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> excludePeers = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      excludePeers.add(reader.tgReadObject());
    }
    return DialogFilter(
        contacts: contacts,
        nonContacts: nonContacts,
        groups: groups,
        broadcasts: broadcasts,
        bots: bots,
        excludeMuted: excludeMuted,
        excludeRead: excludeRead,
        excludeArchived: excludeArchived,
        id: id,
        title: title,
        emoticon: emoticon,
        pinnedPeers: pinnedPeers,
        includePeers: includePeers,
        excludePeers: excludePeers);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1949890536, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 4, little: true, signed: true),
      serializeBytes(this.title),
      (this.emoticon == null || this.emoticon == false)
          ? List<int>.empty()
          : [serializeBytes(this.emoticon)]
              .expand((element) => element)
              .toList(),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.pinnedPeers!.length, 4,
          little: true, signed: true),
      this
          .pinnedPeers!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.includePeers!.length, 4,
          little: true, signed: true),
      this
          .includePeers!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.excludePeers!.length, 4,
          little: true, signed: true),
      this
          .excludePeers!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DialogFilter{ID: $ID, contacts: $contacts, nonContacts: $nonContacts, groups: $groups, broadcasts: $broadcasts, bots: $bots, excludeMuted: $excludeMuted, excludeRead: $excludeRead, excludeArchived: $excludeArchived, id: $id, title: $title, emoticon: $emoticon, pinnedPeers: $pinnedPeers, includePeers: $includePeers, excludePeers: $excludePeers}';
  }
}

class DialogFilterSuggested extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2004110666;
  static const SUBCLASS_OF_ID = 837673094;
  final classType = "constructor";
  final ID = 2004110666;
  var filter;
  String description;

  DialogFilterSuggested({required this.filter, required this.description});

  static DialogFilterSuggested fromReader(BinaryReader reader) {
    var len;
    var filter = reader.tgReadObject();
    var description = reader.tgReadString();
    return DialogFilterSuggested(filter: filter, description: description);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2004110666, 4),
      (this.filter.getBytes() as List<int>),
      serializeBytes(this.description),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DialogFilterSuggested{ID: $ID, filter: $filter, description: $description}';
  }
}

class StatsDateRangeDays extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3057118639;
  static const SUBCLASS_OF_ID = 2166579781;
  final classType = "constructor";
  final ID = 3057118639;
  int minDate;
  int maxDate;

  StatsDateRangeDays({required this.minDate, required this.maxDate});

  static StatsDateRangeDays fromReader(BinaryReader reader) {
    var len;
    var minDate = reader.readInt();
    var maxDate = reader.readInt();
    return StatsDateRangeDays(minDate: minDate, maxDate: maxDate);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3057118639, 4),
      readBufferFromBigInt(this.minDate, 4, little: true, signed: true),
      readBufferFromBigInt(this.maxDate, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsDateRangeDays{ID: $ID, minDate: $minDate, maxDate: $maxDate}';
  }
}

class StatsAbsValueAndPrev extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3410210014;
  static const SUBCLASS_OF_ID = 1052662191;
  final classType = "constructor";
  final ID = 3410210014;
  double current;
  double previous;

  StatsAbsValueAndPrev({required this.current, required this.previous});

  static StatsAbsValueAndPrev fromReader(BinaryReader reader) {
    var len;
    var current = reader.readDouble();
    var previous = reader.readDouble();
    return StatsAbsValueAndPrev(current: current, previous: previous);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3410210014, 4),
      readBufferFromBigInt(this.current, 4),
      readBufferFromBigInt(this.previous, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsAbsValueAndPrev{ID: $ID, current: $current, previous: $previous}';
  }
}

class StatsPercentValue extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3419287520;
  static const SUBCLASS_OF_ID = 2533541150;
  final classType = "constructor";
  final ID = 3419287520;
  double part;
  double total;

  StatsPercentValue({required this.part, required this.total});

  static StatsPercentValue fromReader(BinaryReader reader) {
    var len;
    var part = reader.readDouble();
    var total = reader.readDouble();
    return StatsPercentValue(part: part, total: total);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3419287520, 4),
      readBufferFromBigInt(this.part, 4),
      readBufferFromBigInt(this.total, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsPercentValue{ID: $ID, part: $part, total: $total}';
  }
}

class StatsGraphAsync extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1244130093;
  static const SUBCLASS_OF_ID = 2609918291;
  final classType = "constructor";
  final ID = 1244130093;
  String token;

  StatsGraphAsync({required this.token});

  static StatsGraphAsync fromReader(BinaryReader reader) {
    var len;
    var token = reader.tgReadString();
    return StatsGraphAsync(token: token);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1244130093, 4),
      serializeBytes(this.token),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsGraphAsync{ID: $ID, token: $token}';
  }
}

class StatsGraphError extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3202127906;
  static const SUBCLASS_OF_ID = 2609918291;
  final classType = "constructor";
  final ID = 3202127906;
  String error;

  StatsGraphError({required this.error});

  static StatsGraphError fromReader(BinaryReader reader) {
    var len;
    var error = reader.tgReadString();
    return StatsGraphError(error: error);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3202127906, 4),
      serializeBytes(this.error),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsGraphError{ID: $ID, error: $error}';
  }
}

class StatsGraph extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2393138358;
  static const SUBCLASS_OF_ID = 2609918291;
  final classType = "constructor";
  final ID = 2393138358;
  var json;
  String? zoomToken;

  StatsGraph({required this.json, required this.zoomToken});

  static StatsGraph fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var json = reader.tgReadObject();
    var zoomToken;
    if ((flags & 1) == 1) {
      zoomToken = reader.tgReadString();
    } else {
      zoomToken = null;
    }
    return StatsGraph(json: json, zoomToken: zoomToken);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2393138358, 4),
      [0, 0, 0, 0],
      (this.json.getBytes() as List<int>),
      (this.zoomToken == null || this.zoomToken == false)
          ? List<int>.empty()
          : [serializeBytes(this.zoomToken)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsGraph{ID: $ID, json: $json, zoomToken: $zoomToken}';
  }
}

class MessageInteractionCounters extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2907687357;
  static const SUBCLASS_OF_ID = 641251104;
  final classType = "constructor";
  final ID = 2907687357;
  int msgId;
  int views;
  int forwards;

  MessageInteractionCounters(
      {required this.msgId, required this.views, required this.forwards});

  static MessageInteractionCounters fromReader(BinaryReader reader) {
    var len;
    var msgId = reader.readInt();
    var views = reader.readInt();
    var forwards = reader.readInt();
    return MessageInteractionCounters(
        msgId: msgId, views: views, forwards: forwards);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2907687357, 4),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.views, 4, little: true, signed: true),
      readBufferFromBigInt(this.forwards, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageInteractionCounters{ID: $ID, msgId: $msgId, views: $views, forwards: $forwards}';
  }
}

class VideoSize extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3727929492;
  static const SUBCLASS_OF_ID = 1660015881;
  final classType = "constructor";
  final ID = 3727929492;
  String type;
  int w;
  int h;
  int size;
  double? videoStartTs;

  VideoSize(
      {required this.type,
      required this.w,
      required this.h,
      required this.size,
      required this.videoStartTs});

  static VideoSize fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var type = reader.tgReadString();
    var w = reader.readInt();
    var h = reader.readInt();
    var size = reader.readInt();
    var videoStartTs;
    if ((flags & 1) == 1) {
      videoStartTs = reader.readDouble();
    } else {
      videoStartTs = null;
    }
    return VideoSize(
        type: type, w: w, h: h, size: size, videoStartTs: videoStartTs);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3727929492, 4),
      [0, 0, 0, 0],
      serializeBytes(this.type),
      readBufferFromBigInt(this.w, 4, little: true, signed: true),
      readBufferFromBigInt(this.h, 4, little: true, signed: true),
      readBufferFromBigInt(this.size, 4, little: true, signed: true),
      (this.videoStartTs == null || this.videoStartTs == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.videoStartTs, 4)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'VideoSize{ID: $ID, type: $type, w: $w, h: $h, size: $size, videoStartTs: $videoStartTs}';
  }
}

class StatsGroupTopPoster extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2634330011;
  static const SUBCLASS_OF_ID = 2177224227;
  final classType = "constructor";
  final ID = 2634330011;
  BigInt userId;
  int messages;
  int avgChars;

  StatsGroupTopPoster(
      {required this.userId, required this.messages, required this.avgChars});

  static StatsGroupTopPoster fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var messages = reader.readInt();
    var avgChars = reader.readInt();
    return StatsGroupTopPoster(
        userId: userId, messages: messages, avgChars: avgChars);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2634330011, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.messages, 4, little: true, signed: true),
      readBufferFromBigInt(this.avgChars, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsGroupTopPoster{ID: $ID, userId: $userId, messages: $messages, avgChars: $avgChars}';
  }
}

class StatsGroupTopAdmin extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3612888199;
  static const SUBCLASS_OF_ID = 2150997085;
  final classType = "constructor";
  final ID = 3612888199;
  BigInt userId;
  int deleted;
  int kicked;
  int banned;

  StatsGroupTopAdmin(
      {required this.userId,
      required this.deleted,
      required this.kicked,
      required this.banned});

  static StatsGroupTopAdmin fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var deleted = reader.readInt();
    var kicked = reader.readInt();
    var banned = reader.readInt();
    return StatsGroupTopAdmin(
        userId: userId, deleted: deleted, kicked: kicked, banned: banned);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3612888199, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.deleted, 4, little: true, signed: true),
      readBufferFromBigInt(this.kicked, 4, little: true, signed: true),
      readBufferFromBigInt(this.banned, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsGroupTopAdmin{ID: $ID, userId: $userId, deleted: $deleted, kicked: $kicked, banned: $banned}';
  }
}

class StatsGroupTopInviter extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1398765469;
  static const SUBCLASS_OF_ID = 2231438458;
  final classType = "constructor";
  final ID = 1398765469;
  BigInt userId;
  int invitations;

  StatsGroupTopInviter({required this.userId, required this.invitations});

  static StatsGroupTopInviter fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var invitations = reader.readInt();
    return StatsGroupTopInviter(userId: userId, invitations: invitations);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1398765469, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.invitations, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'StatsGroupTopInviter{ID: $ID, userId: $userId, invitations: $invitations}';
  }
}

class GlobalPrivacySettings extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3198350372;
  static const SUBCLASS_OF_ID = 3373160304;
  final classType = "constructor";
  final ID = 3198350372;
  bool? archiveAndMuteNewNoncontactPeers;

  GlobalPrivacySettings({required this.archiveAndMuteNewNoncontactPeers});

  static GlobalPrivacySettings fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var archiveAndMuteNewNoncontactPeers;
    if ((flags & 1) == 1) {
      archiveAndMuteNewNoncontactPeers = reader.tgReadBool();
    } else {
      archiveAndMuteNewNoncontactPeers = null;
    }
    return GlobalPrivacySettings(
        archiveAndMuteNewNoncontactPeers: archiveAndMuteNewNoncontactPeers);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3198350372, 4),
      [0, 0, 0, 0],
      (this.archiveAndMuteNewNoncontactPeers == null ||
              this.archiveAndMuteNewNoncontactPeers == false)
          ? List<int>.empty()
          : [
              [
                this.archiveAndMuteNewNoncontactPeers == true
                    ? 0xb5757299
                    : 0x379779bc
              ]
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'GlobalPrivacySettings{ID: $ID, archiveAndMuteNewNoncontactPeers: $archiveAndMuteNewNoncontactPeers}';
  }
}

class MessageViews extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1163625789;
  static const SUBCLASS_OF_ID = 1018201017;
  final classType = "constructor";
  final ID = 1163625789;
  int? views;
  int? forwards;
  var replies;

  MessageViews(
      {required this.views, required this.forwards, required this.replies});

  static MessageViews fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var views;
    if ((flags & 1) == 1) {
      views = reader.readInt();
    } else {
      views = null;
    }
    var forwards;
    if ((flags & 2) == 2) {
      forwards = reader.readInt();
    } else {
      forwards = null;
    }
    var replies;
    if ((flags & 4) == 4) {
      replies = reader.tgReadObject();
    } else {
      replies = null;
    }
    return MessageViews(views: views, forwards: forwards, replies: replies);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1163625789, 4),
      [0, 0, 0, 0],
      (this.views == null || this.views == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.views, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.forwards == null || this.forwards == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.forwards, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.replies == null || this.replies == false)
          ? List<int>.empty()
          : [(this.replies.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageViews{ID: $ID, views: $views, forwards: $forwards, replies: $replies}';
  }
}

class MessageReplyHeader extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2799007587;
  static const SUBCLASS_OF_ID = 1531810151;
  final classType = "constructor";
  final ID = 2799007587;
  int replyToMsgId;
  var replyToPeerId;
  int? replyToTopId;

  MessageReplyHeader(
      {required this.replyToMsgId,
      required this.replyToPeerId,
      required this.replyToTopId});

  static MessageReplyHeader fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var replyToMsgId = reader.readInt();
    var replyToPeerId;
    if ((flags & 1) == 1) {
      replyToPeerId = reader.tgReadObject();
    } else {
      replyToPeerId = null;
    }
    var replyToTopId;
    if ((flags & 2) == 2) {
      replyToTopId = reader.readInt();
    } else {
      replyToTopId = null;
    }
    return MessageReplyHeader(
        replyToMsgId: replyToMsgId,
        replyToPeerId: replyToPeerId,
        replyToTopId: replyToTopId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2799007587, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.replyToMsgId, 4, little: true, signed: true),
      (this.replyToPeerId == null || this.replyToPeerId == false)
          ? List<int>.empty()
          : [(this.replyToPeerId.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.replyToTopId == null || this.replyToTopId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.replyToTopId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageReplyHeader{ID: $ID, replyToMsgId: $replyToMsgId, replyToPeerId: $replyToPeerId, replyToTopId: $replyToTopId}';
  }
}

class MessageReplies extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2211844034;
  static const SUBCLASS_OF_ID = 1825397986;
  final classType = "constructor";
  final ID = 2211844034;
  bool? comments;
  int replies;
  int repliesPts;
  List<dynamic>? recentRepliers;
  BigInt? channelId;
  int? maxId;
  int? readMaxId;

  MessageReplies(
      {required this.comments,
      required this.replies,
      required this.repliesPts,
      required this.recentRepliers,
      required this.channelId,
      required this.maxId,
      required this.readMaxId});

  static MessageReplies fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final comments = (flags & 1) == 1;
    var replies = reader.readInt();
    var repliesPts = reader.readInt();
    var recentRepliers;
    if ((flags & 2) == 2) {
      var _vectorrecentRepliers = reader.readInt();
      if (_vectorrecentRepliers != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> recentRepliers = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        recentRepliers.add(reader.tgReadObject());
      }
    } else {
      recentRepliers = null;
    }
    var channelId;
    if ((flags & 1) == 1) {
      channelId = reader.readLong();
    } else {
      channelId = null;
    }
    var maxId;
    if ((flags & 4) == 4) {
      maxId = reader.readInt();
    } else {
      maxId = null;
    }
    var readMaxId;
    if ((flags & 8) == 8) {
      readMaxId = reader.readInt();
    } else {
      readMaxId = null;
    }
    return MessageReplies(
        comments: comments,
        replies: replies,
        repliesPts: repliesPts,
        recentRepliers: recentRepliers,
        channelId: channelId,
        maxId: maxId,
        readMaxId: readMaxId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2211844034, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.replies, 4, little: true, signed: true),
      readBufferFromBigInt(this.repliesPts, 4, little: true, signed: true),
      (this.recentRepliers == null || this.recentRepliers == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.recentRepliers!.length, 4,
                  little: true, signed: true),
              this
                  .recentRepliers!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
      (this.channelId == null || this.channelId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.channelId, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.maxId == null || this.maxId == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.maxId, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.readMaxId == null || this.readMaxId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.readMaxId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageReplies{ID: $ID, comments: $comments, replies: $replies, repliesPts: $repliesPts, recentRepliers: $recentRepliers, channelId: $channelId, maxId: $maxId, readMaxId: $readMaxId}';
  }
}

class PeerBlocked extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3908927508;
  static const SUBCLASS_OF_ID = 1425210520;
  final classType = "constructor";
  final ID = 3908927508;
  var peerId;
  int date;

  PeerBlocked({required this.peerId, required this.date});

  static PeerBlocked fromReader(BinaryReader reader) {
    var len;
    var peerId = reader.tgReadObject();
    var date = reader.readInt();
    return PeerBlocked(peerId: peerId, date: date);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3908927508, 4),
      (this.peerId.getBytes() as List<int>),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PeerBlocked{ID: $ID, peerId: $peerId, date: $date}';
  }
}

class GroupCallDiscarded extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2004925620;
  static const SUBCLASS_OF_ID = 548729632;
  final classType = "constructor";
  final ID = 2004925620;
  BigInt id;
  BigInt accessHash;
  int duration;

  GroupCallDiscarded(
      {required this.id, required this.accessHash, required this.duration});

  static GroupCallDiscarded fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var duration = reader.readInt();
    return GroupCallDiscarded(
        id: id, accessHash: accessHash, duration: duration);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2004925620, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.duration, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'GroupCallDiscarded{ID: $ID, id: $id, accessHash: $accessHash, duration: $duration}';
  }
}

class GroupCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3583468812;
  static const SUBCLASS_OF_ID = 548729632;
  final classType = "constructor";
  final ID = 3583468812;
  bool? joinMuted;
  bool? canChangeJoinMuted;
  bool? joinDateAsc;
  bool? scheduleStartSubscribed;
  bool? canStartVideo;
  bool? recordVideoActive;
  BigInt id;
  BigInt accessHash;
  int participantsCount;
  String? title;
  int? streamDcId;
  int? recordStartDate;
  int? scheduleDate;
  int? unmutedVideoCount;
  int unmutedVideoLimit;
  int version;

  GroupCall(
      {required this.joinMuted,
      required this.canChangeJoinMuted,
      required this.joinDateAsc,
      required this.scheduleStartSubscribed,
      required this.canStartVideo,
      required this.recordVideoActive,
      required this.id,
      required this.accessHash,
      required this.participantsCount,
      required this.title,
      required this.streamDcId,
      required this.recordStartDate,
      required this.scheduleDate,
      required this.unmutedVideoCount,
      required this.unmutedVideoLimit,
      required this.version});

  static GroupCall fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final joinMuted = (flags & 2) == 2;
    final canChangeJoinMuted = (flags & 4) == 4;
    final joinDateAsc = (flags & 64) == 64;
    final scheduleStartSubscribed = (flags & 256) == 256;
    final canStartVideo = (flags & 512) == 512;
    final recordVideoActive = (flags & 2048) == 2048;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    var participantsCount = reader.readInt();
    var title;
    if ((flags & 8) == 8) {
      title = reader.tgReadString();
    } else {
      title = null;
    }
    var streamDcId;
    if ((flags & 16) == 16) {
      streamDcId = reader.readInt();
    } else {
      streamDcId = null;
    }
    var recordStartDate;
    if ((flags & 32) == 32) {
      recordStartDate = reader.readInt();
    } else {
      recordStartDate = null;
    }
    var scheduleDate;
    if ((flags & 128) == 128) {
      scheduleDate = reader.readInt();
    } else {
      scheduleDate = null;
    }
    var unmutedVideoCount;
    if ((flags & 1024) == 1024) {
      unmutedVideoCount = reader.readInt();
    } else {
      unmutedVideoCount = null;
    }
    var unmutedVideoLimit = reader.readInt();
    var version = reader.readInt();
    return GroupCall(
        joinMuted: joinMuted,
        canChangeJoinMuted: canChangeJoinMuted,
        joinDateAsc: joinDateAsc,
        scheduleStartSubscribed: scheduleStartSubscribed,
        canStartVideo: canStartVideo,
        recordVideoActive: recordVideoActive,
        id: id,
        accessHash: accessHash,
        participantsCount: participantsCount,
        title: title,
        streamDcId: streamDcId,
        recordStartDate: recordStartDate,
        scheduleDate: scheduleDate,
        unmutedVideoCount: unmutedVideoCount,
        unmutedVideoLimit: unmutedVideoLimit,
        version: version);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3583468812, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
      readBufferFromBigInt(this.participantsCount, 4,
          little: true, signed: true),
      (this.title == null || this.title == false)
          ? List<int>.empty()
          : [serializeBytes(this.title)].expand((element) => element).toList(),
      (this.streamDcId == null || this.streamDcId == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.streamDcId, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.recordStartDate == null || this.recordStartDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.recordStartDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.scheduleDate == null || this.scheduleDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.scheduleDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.unmutedVideoCount == null || this.unmutedVideoCount == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.unmutedVideoCount, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.unmutedVideoLimit, 4,
          little: true, signed: true),
      readBufferFromBigInt(this.version, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'GroupCall{ID: $ID, joinMuted: $joinMuted, canChangeJoinMuted: $canChangeJoinMuted, joinDateAsc: $joinDateAsc, scheduleStartSubscribed: $scheduleStartSubscribed, canStartVideo: $canStartVideo, recordVideoActive: $recordVideoActive, id: $id, accessHash: $accessHash, participantsCount: $participantsCount, title: $title, streamDcId: $streamDcId, recordStartDate: $recordStartDate, scheduleDate: $scheduleDate, unmutedVideoCount: $unmutedVideoCount, unmutedVideoLimit: $unmutedVideoLimit, version: $version}';
  }
}

class InputGroupCall extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3635053583;
  static const SUBCLASS_OF_ID = 1482758833;
  final classType = "constructor";
  final ID = 3635053583;
  BigInt id;
  BigInt accessHash;

  InputGroupCall({required this.id, required this.accessHash});

  static InputGroupCall fromReader(BinaryReader reader) {
    var len;
    var id = reader.readLong();
    var accessHash = reader.readLong();
    return InputGroupCall(id: id, accessHash: accessHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3635053583, 4),
      readBufferFromBigInt(this.id, 8, little: true, signed: true),
      readBufferFromBigInt(this.accessHash, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InputGroupCall{ID: $ID, id: $id, accessHash: $accessHash}';
  }
}

class GroupCallParticipant extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3953538814;
  static const SUBCLASS_OF_ID = 3222974284;
  final classType = "constructor";
  final ID = 3953538814;
  bool? muted;
  bool? left;
  bool? canSelfUnmute;
  bool? justJoined;
  bool? versioned;
  bool? min;
  bool? mutedByYou;
  bool? volumeByAdmin;
  bool? self;
  bool? videoJoined;
  var peer;
  int date;
  int? activeDate;
  int source;
  int? volume;
  String? about;
  BigInt? raiseHandRating;
  var video;
  var presentation;

  GroupCallParticipant(
      {required this.muted,
      required this.left,
      required this.canSelfUnmute,
      required this.justJoined,
      required this.versioned,
      required this.min,
      required this.mutedByYou,
      required this.volumeByAdmin,
      required this.self,
      required this.videoJoined,
      required this.peer,
      required this.date,
      required this.activeDate,
      required this.source,
      required this.volume,
      required this.about,
      required this.raiseHandRating,
      required this.video,
      required this.presentation});

  static GroupCallParticipant fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final muted = (flags & 1) == 1;
    final left = (flags & 2) == 2;
    final canSelfUnmute = (flags & 4) == 4;
    final justJoined = (flags & 16) == 16;
    final versioned = (flags & 32) == 32;
    final min = (flags & 256) == 256;
    final mutedByYou = (flags & 512) == 512;
    final volumeByAdmin = (flags & 1024) == 1024;
    final self = (flags & 4096) == 4096;
    final videoJoined = (flags & 32768) == 32768;
    var peer = reader.tgReadObject();
    var date = reader.readInt();
    var activeDate;
    if ((flags & 8) == 8) {
      activeDate = reader.readInt();
    } else {
      activeDate = null;
    }
    var source = reader.readInt();
    var volume;
    if ((flags & 128) == 128) {
      volume = reader.readInt();
    } else {
      volume = null;
    }
    var about;
    if ((flags & 2048) == 2048) {
      about = reader.tgReadString();
    } else {
      about = null;
    }
    var raiseHandRating;
    if ((flags & 8192) == 8192) {
      raiseHandRating = reader.readLong();
    } else {
      raiseHandRating = null;
    }
    var video;
    if ((flags & 64) == 64) {
      video = reader.tgReadObject();
    } else {
      video = null;
    }
    var presentation;
    if ((flags & 16384) == 16384) {
      presentation = reader.tgReadObject();
    } else {
      presentation = null;
    }
    return GroupCallParticipant(
        muted: muted,
        left: left,
        canSelfUnmute: canSelfUnmute,
        justJoined: justJoined,
        versioned: versioned,
        min: min,
        mutedByYou: mutedByYou,
        volumeByAdmin: volumeByAdmin,
        self: self,
        videoJoined: videoJoined,
        peer: peer,
        date: date,
        activeDate: activeDate,
        source: source,
        volume: volume,
        about: about,
        raiseHandRating: raiseHandRating,
        video: video,
        presentation: presentation);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3953538814, 4),
      [0, 0, 0, 0],
      (this.peer.getBytes() as List<int>),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.activeDate == null || this.activeDate == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.activeDate, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      readBufferFromBigInt(this.source, 4, little: true, signed: true),
      (this.volume == null || this.volume == false)
          ? List<int>.empty()
          : [readBufferFromBigInt(this.volume, 4, little: true, signed: true)]
              .expand((element) => element)
              .toList(),
      (this.about == null || this.about == false)
          ? List<int>.empty()
          : [serializeBytes(this.about)].expand((element) => element).toList(),
      (this.raiseHandRating == null || this.raiseHandRating == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.raiseHandRating, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.video == null || this.video == false)
          ? List<int>.empty()
          : [(this.video.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.presentation == null || this.presentation == false)
          ? List<int>.empty()
          : [(this.presentation.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'GroupCallParticipant{ID: $ID, muted: $muted, left: $left, canSelfUnmute: $canSelfUnmute, justJoined: $justJoined, versioned: $versioned, min: $min, mutedByYou: $mutedByYou, volumeByAdmin: $volumeByAdmin, self: $self, videoJoined: $videoJoined, peer: $peer, date: $date, activeDate: $activeDate, source: $source, volume: $volume, about: $about, raiseHandRating: $raiseHandRating, video: $video, presentation: $presentation}';
  }
}

class InlineQueryPeerTypeSameBotPM extends BaseConstructor {
  static const CONSTRUCTOR_ID = 813821341;
  static const SUBCLASS_OF_ID = 2947611167;
  final classType = "constructor";
  final ID = 813821341;

  InlineQueryPeerTypeSameBotPM();

  static InlineQueryPeerTypeSameBotPM fromReader(BinaryReader reader) {
    var len;
    return InlineQueryPeerTypeSameBotPM();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(813821341, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InlineQueryPeerTypeSameBotPM{ID: $ID, }';
  }
}

class InlineQueryPeerTypePM extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2201751468;
  static const SUBCLASS_OF_ID = 2947611167;
  final classType = "constructor";
  final ID = 2201751468;

  InlineQueryPeerTypePM();

  static InlineQueryPeerTypePM fromReader(BinaryReader reader) {
    var len;
    return InlineQueryPeerTypePM();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2201751468, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InlineQueryPeerTypePM{ID: $ID, }';
  }
}

class InlineQueryPeerTypeChat extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3613836554;
  static const SUBCLASS_OF_ID = 2947611167;
  final classType = "constructor";
  final ID = 3613836554;

  InlineQueryPeerTypeChat();

  static InlineQueryPeerTypeChat fromReader(BinaryReader reader) {
    var len;
    return InlineQueryPeerTypeChat();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3613836554, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InlineQueryPeerTypeChat{ID: $ID, }';
  }
}

class InlineQueryPeerTypeMegagroup extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1589952067;
  static const SUBCLASS_OF_ID = 2947611167;
  final classType = "constructor";
  final ID = 1589952067;

  InlineQueryPeerTypeMegagroup();

  static InlineQueryPeerTypeMegagroup fromReader(BinaryReader reader) {
    var len;
    return InlineQueryPeerTypeMegagroup();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1589952067, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InlineQueryPeerTypeMegagroup{ID: $ID, }';
  }
}

class InlineQueryPeerTypeBroadcast extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1664413338;
  static const SUBCLASS_OF_ID = 2947611167;
  final classType = "constructor";
  final ID = 1664413338;

  InlineQueryPeerTypeBroadcast();

  static InlineQueryPeerTypeBroadcast fromReader(BinaryReader reader) {
    var len;
    return InlineQueryPeerTypeBroadcast();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1664413338, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'InlineQueryPeerTypeBroadcast{ID: $ID, }';
  }
}

class ChatInviteImporter extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2354765785;
  static const SUBCLASS_OF_ID = 1393710126;
  final classType = "constructor";
  final ID = 2354765785;
  bool? requested;
  BigInt userId;
  int date;
  String? about;
  BigInt? approvedBy;

  ChatInviteImporter(
      {required this.requested,
      required this.userId,
      required this.date,
      required this.about,
      required this.approvedBy});

  static ChatInviteImporter fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final requested = (flags & 1) == 1;
    var userId = reader.readLong();
    var date = reader.readInt();
    var about;
    if ((flags & 4) == 4) {
      about = reader.tgReadString();
    } else {
      about = null;
    }
    var approvedBy;
    if ((flags & 2) == 2) {
      approvedBy = reader.readLong();
    } else {
      approvedBy = null;
    }
    return ChatInviteImporter(
        requested: requested,
        userId: userId,
        date: date,
        about: about,
        approvedBy: approvedBy);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2354765785, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      (this.about == null || this.about == false)
          ? List<int>.empty()
          : [serializeBytes(this.about)].expand((element) => element).toList(),
      (this.approvedBy == null || this.approvedBy == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.approvedBy, 8,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatInviteImporter{ID: $ID, requested: $requested, userId: $userId, date: $date, about: $about, approvedBy: $approvedBy}';
  }
}

class ChatAdminWithInvites extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4075613987;
  static const SUBCLASS_OF_ID = 1348727704;
  final classType = "constructor";
  final ID = 4075613987;
  BigInt adminId;
  int invitesCount;
  int revokedInvitesCount;

  ChatAdminWithInvites(
      {required this.adminId,
      required this.invitesCount,
      required this.revokedInvitesCount});

  static ChatAdminWithInvites fromReader(BinaryReader reader) {
    var len;
    var adminId = reader.readLong();
    var invitesCount = reader.readInt();
    var revokedInvitesCount = reader.readInt();
    return ChatAdminWithInvites(
        adminId: adminId,
        invitesCount: invitesCount,
        revokedInvitesCount: revokedInvitesCount);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4075613987, 4),
      readBufferFromBigInt(this.adminId, 8, little: true, signed: true),
      readBufferFromBigInt(this.invitesCount, 4, little: true, signed: true),
      readBufferFromBigInt(this.revokedInvitesCount, 4,
          little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ChatAdminWithInvites{ID: $ID, adminId: $adminId, invitesCount: $invitesCount, revokedInvitesCount: $revokedInvitesCount}';
  }
}

class GroupCallParticipantVideoSourceGroup extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3702593719;
  static const SUBCLASS_OF_ID = 806746236;
  final classType = "constructor";
  final ID = 3702593719;
  String semantics;
  List<int> sources;

  GroupCallParticipantVideoSourceGroup(
      {required this.semantics, required this.sources});

  static GroupCallParticipantVideoSourceGroup fromReader(BinaryReader reader) {
    var len;
    var semantics = reader.tgReadString();
    var _vectorsources = reader.readInt();
    if (_vectorsources != 481674261) throw Exception('Wrong vectorId');
    List<int> sources = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      sources.add(reader.readInt());
    }
    return GroupCallParticipantVideoSourceGroup(
        semantics: semantics, sources: sources);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3702593719, 4),
      serializeBytes(this.semantics),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.sources!.length, 4, little: true, signed: true),
      this
          .sources!
          .map((x) => readBufferFromBigInt(x, 4, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'GroupCallParticipantVideoSourceGroup{ID: $ID, semantics: $semantics, sources: $sources}';
  }
}

class GroupCallParticipantVideo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1735736008;
  static const SUBCLASS_OF_ID = 4014389467;
  final classType = "constructor";
  final ID = 1735736008;
  bool? paused;
  String endpoint;
  List<dynamic> sourceGroups;
  int? audioSource;

  GroupCallParticipantVideo(
      {required this.paused,
      required this.endpoint,
      required this.sourceGroups,
      required this.audioSource});

  static GroupCallParticipantVideo fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final paused = (flags & 1) == 1;
    var endpoint = reader.tgReadString();
    var _vectorsourceGroups = reader.readInt();
    if (_vectorsourceGroups != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> sourceGroups = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      sourceGroups.add(reader.tgReadObject());
    }
    var audioSource;
    if ((flags & 2) == 2) {
      audioSource = reader.readInt();
    } else {
      audioSource = null;
    }
    return GroupCallParticipantVideo(
        paused: paused,
        endpoint: endpoint,
        sourceGroups: sourceGroups,
        audioSource: audioSource);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1735736008, 4),
      [0, 0, 0, 0],
      serializeBytes(this.endpoint),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.sourceGroups!.length, 4,
          little: true, signed: true),
      this
          .sourceGroups!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.audioSource == null || this.audioSource == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.audioSource, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'GroupCallParticipantVideo{ID: $ID, paused: $paused, endpoint: $endpoint, sourceGroups: $sourceGroups, audioSource: $audioSource}';
  }
}

class BotCommandScopeDefault extends BaseConstructor {
  static const CONSTRUCTOR_ID = 795652779;
  static const SUBCLASS_OF_ID = 1269783824;
  final classType = "constructor";
  final ID = 795652779;

  BotCommandScopeDefault();

  static BotCommandScopeDefault fromReader(BinaryReader reader) {
    var len;
    return BotCommandScopeDefault();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(795652779, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotCommandScopeDefault{ID: $ID, }';
  }
}

class BotCommandScopeUsers extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1011811544;
  static const SUBCLASS_OF_ID = 1269783824;
  final classType = "constructor";
  final ID = 1011811544;

  BotCommandScopeUsers();

  static BotCommandScopeUsers fromReader(BinaryReader reader) {
    var len;
    return BotCommandScopeUsers();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1011811544, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotCommandScopeUsers{ID: $ID, }';
  }
}

class BotCommandScopeChats extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1877059713;
  static const SUBCLASS_OF_ID = 1269783824;
  final classType = "constructor";
  final ID = 1877059713;

  BotCommandScopeChats();

  static BotCommandScopeChats fromReader(BinaryReader reader) {
    var len;
    return BotCommandScopeChats();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1877059713, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotCommandScopeChats{ID: $ID, }';
  }
}

class BotCommandScopeChatAdmins extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3114950762;
  static const SUBCLASS_OF_ID = 1269783824;
  final classType = "constructor";
  final ID = 3114950762;

  BotCommandScopeChatAdmins();

  static BotCommandScopeChatAdmins fromReader(BinaryReader reader) {
    var len;
    return BotCommandScopeChatAdmins();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3114950762, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotCommandScopeChatAdmins{ID: $ID, }';
  }
}

class BotCommandScopePeer extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3684534653;
  static const SUBCLASS_OF_ID = 1269783824;
  final classType = "constructor";
  final ID = 3684534653;
  var peer;

  BotCommandScopePeer({required this.peer});

  static BotCommandScopePeer fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    return BotCommandScopePeer(peer: peer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3684534653, 4),
      (this.peer.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotCommandScopePeer{ID: $ID, peer: $peer}';
  }
}

class BotCommandScopePeerAdmins extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1071145937;
  static const SUBCLASS_OF_ID = 1269783824;
  final classType = "constructor";
  final ID = 1071145937;
  var peer;

  BotCommandScopePeerAdmins({required this.peer});

  static BotCommandScopePeerAdmins fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    return BotCommandScopePeerAdmins(peer: peer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1071145937, 4),
      (this.peer.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotCommandScopePeerAdmins{ID: $ID, peer: $peer}';
  }
}

class BotCommandScopePeerUser extends BaseConstructor {
  static const CONSTRUCTOR_ID = 169026035;
  static const SUBCLASS_OF_ID = 1269783824;
  final classType = "constructor";
  final ID = 169026035;
  var peer;
  var userId;

  BotCommandScopePeerUser({required this.peer, required this.userId});

  static BotCommandScopePeerUser fromReader(BinaryReader reader) {
    var len;
    var peer = reader.tgReadObject();
    var userId = reader.tgReadObject();
    return BotCommandScopePeerUser(peer: peer, userId: userId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(169026035, 4),
      (this.peer.getBytes() as List<int>),
      (this.userId.getBytes() as List<int>),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BotCommandScopePeerUser{ID: $ID, peer: $peer, userId: $userId}';
  }
}

class SponsoredMessage extends BaseConstructor {
  static const CONSTRUCTOR_ID = 981691896;
  static const SUBCLASS_OF_ID = 3780630582;
  final classType = "constructor";
  final ID = 981691896;
  List<int> randomId;
  var fromId;
  var chatInvite;
  String? chatInviteHash;
  int? channelPost;
  String? startParam;
  String message;
  List<dynamic>? entities;

  SponsoredMessage(
      {required this.randomId,
      required this.fromId,
      required this.chatInvite,
      required this.chatInviteHash,
      required this.channelPost,
      required this.startParam,
      required this.message,
      required this.entities});

  static SponsoredMessage fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    var randomId = reader.tgReadBytes();
    var fromId;
    if ((flags & 8) == 8) {
      fromId = reader.tgReadObject();
    } else {
      fromId = null;
    }
    var chatInvite;
    if ((flags & 16) == 16) {
      chatInvite = reader.tgReadObject();
    } else {
      chatInvite = null;
    }
    var chatInviteHash;
    if ((flags & 16) == 16) {
      chatInviteHash = reader.tgReadString();
    } else {
      chatInviteHash = null;
    }
    var channelPost;
    if ((flags & 4) == 4) {
      channelPost = reader.readInt();
    } else {
      channelPost = null;
    }
    var startParam;
    if ((flags & 1) == 1) {
      startParam = reader.tgReadString();
    } else {
      startParam = null;
    }
    var message = reader.tgReadString();
    var entities;
    if ((flags & 2) == 2) {
      var _vectorentities = reader.readInt();
      if (_vectorentities != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> entities = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        entities.add(reader.tgReadObject());
      }
    } else {
      entities = null;
    }
    return SponsoredMessage(
        randomId: randomId,
        fromId: fromId,
        chatInvite: chatInvite,
        chatInviteHash: chatInviteHash,
        channelPost: channelPost,
        startParam: startParam,
        message: message,
        entities: entities);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(981691896, 4),
      [0, 0, 0, 0],
      serializeBytes(this.randomId),
      (this.fromId == null || this.fromId == false)
          ? List<int>.empty()
          : [(this.fromId.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.chatInvite == null || this.chatInvite == false)
          ? List<int>.empty()
          : [(this.chatInvite.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.chatInviteHash == null || this.chatInviteHash == false)
          ? List<int>.empty()
          : [serializeBytes(this.chatInviteHash)]
              .expand((element) => element)
              .toList(),
      (this.channelPost == null || this.channelPost == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(this.channelPost, 4,
                  little: true, signed: true)
            ].expand((element) => element).toList(),
      (this.startParam == null || this.startParam == false)
          ? List<int>.empty()
          : [serializeBytes(this.startParam)]
              .expand((element) => element)
              .toList(),
      serializeBytes(this.message),
      (this.entities == null || this.entities == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.entities!.length, 4,
                  little: true, signed: true),
              this
                  .entities!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SponsoredMessage{ID: $ID, randomId: $randomId, fromId: $fromId, chatInvite: $chatInvite, chatInviteHash: $chatInviteHash, channelPost: $channelPost, startParam: $startParam, message: $message, entities: $entities}';
  }
}

class SearchResultsCalendarPeriod extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3383776159;
  static const SUBCLASS_OF_ID = 3797743871;
  final classType = "constructor";
  final ID = 3383776159;
  int date;
  int minMsgId;
  int maxMsgId;
  int count;

  SearchResultsCalendarPeriod(
      {required this.date,
      required this.minMsgId,
      required this.maxMsgId,
      required this.count});

  static SearchResultsCalendarPeriod fromReader(BinaryReader reader) {
    var len;
    var date = reader.readInt();
    var minMsgId = reader.readInt();
    var maxMsgId = reader.readInt();
    var count = reader.readInt();
    return SearchResultsCalendarPeriod(
        date: date, minMsgId: minMsgId, maxMsgId: maxMsgId, count: count);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3383776159, 4),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.minMsgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.maxMsgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.count, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SearchResultsCalendarPeriod{ID: $ID, date: $date, minMsgId: $minMsgId, maxMsgId: $maxMsgId, count: $count}';
  }
}

class SearchResultPosition extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2137295719;
  static const SUBCLASS_OF_ID = 3101824532;
  final classType = "constructor";
  final ID = 2137295719;
  int msgId;
  int date;
  int offset;

  SearchResultPosition(
      {required this.msgId, required this.date, required this.offset});

  static SearchResultPosition fromReader(BinaryReader reader) {
    var len;
    var msgId = reader.readInt();
    var date = reader.readInt();
    var offset = reader.readInt();
    return SearchResultPosition(msgId: msgId, date: date, offset: offset);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2137295719, 4),
      readBufferFromBigInt(this.msgId, 4, little: true, signed: true),
      readBufferFromBigInt(this.date, 4, little: true, signed: true),
      readBufferFromBigInt(this.offset, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'SearchResultPosition{ID: $ID, msgId: $msgId, date: $date, offset: $offset}';
  }
}

class ReactionCount extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1873957073;
  static const SUBCLASS_OF_ID = 3523792447;
  final classType = "constructor";
  final ID = 1873957073;
  bool? chosen;
  String reaction;
  int count;

  ReactionCount(
      {required this.chosen, required this.reaction, required this.count});

  static ReactionCount fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final chosen = (flags & 1) == 1;
    var reaction = reader.tgReadString();
    var count = reader.readInt();
    return ReactionCount(chosen: chosen, reaction: reaction, count: count);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1873957073, 4),
      [0, 0, 0, 0],
      serializeBytes(this.reaction),
      readBufferFromBigInt(this.count, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ReactionCount{ID: $ID, chosen: $chosen, reaction: $reaction, count: $count}';
  }
}

class MessageReactions extends BaseConstructor {
  static const CONSTRUCTOR_ID = 142306870;
  static const SUBCLASS_OF_ID = 2321221404;
  final classType = "constructor";
  final ID = 142306870;
  bool? min;
  bool? canSeeList;
  List<dynamic> results;
  List<dynamic>? recentReactons;

  MessageReactions(
      {required this.min,
      required this.canSeeList,
      required this.results,
      required this.recentReactons});

  static MessageReactions fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final min = (flags & 1) == 1;
    final canSeeList = (flags & 4) == 4;
    var _vectorresults = reader.readInt();
    if (_vectorresults != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> results = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      results.add(reader.tgReadObject());
    }
    var recentReactons;
    if ((flags & 2) == 2) {
      var _vectorrecentReactons = reader.readInt();
      if (_vectorrecentReactons != 481674261) throw Exception('Wrong vectorId');
      List<dynamic> recentReactons = [];
      len = reader.readInt();
      for (var i = 0; i < len; i++) {
        recentReactons.add(reader.tgReadObject());
      }
    } else {
      recentReactons = null;
    }
    return MessageReactions(
        min: min,
        canSeeList: canSeeList,
        results: results,
        recentReactons: recentReactons);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(142306870, 4),
      [0, 0, 0, 0],
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.results!.length, 4, little: true, signed: true),
      this
          .results!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
      (this.recentReactons == null || this.recentReactons == false)
          ? List<int>.empty()
          : [
              readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
              readBufferFromBigInt(this.recentReactons!.length, 4,
                  little: true, signed: true),
              this
                  .recentReactons!
                  .map((x) => (x.getBytes() as List<int>))
                  .expand((element) => element)
            ].expand((element) => element).toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageReactions{ID: $ID, min: $min, canSeeList: $canSeeList, results: $results, recentReactons: $recentReactons}';
  }
}

class MessageUserReaction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2468889850;
  static const SUBCLASS_OF_ID = 1905515325;
  final classType = "constructor";
  final ID = 2468889850;
  BigInt userId;
  String reaction;

  MessageUserReaction({required this.userId, required this.reaction});

  static MessageUserReaction fromReader(BinaryReader reader) {
    var len;
    var userId = reader.readLong();
    var reaction = reader.tgReadString();
    return MessageUserReaction(userId: userId, reaction: reaction);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2468889850, 4),
      readBufferFromBigInt(this.userId, 8, little: true, signed: true),
      serializeBytes(this.reaction),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MessageUserReaction{ID: $ID, userId: $userId, reaction: $reaction}';
  }
}

class AvailableReaction extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3229084673;
  static const SUBCLASS_OF_ID = 2350685555;
  final classType = "constructor";
  final ID = 3229084673;
  bool? inactive;
  String reaction;
  String title;
  var staticIcon;
  var appearAnimation;
  var selectAnimation;
  var activateAnimation;
  var effectAnimation;
  var aroundAnimation;
  var centerIcon;

  AvailableReaction(
      {required this.inactive,
      required this.reaction,
      required this.title,
      required this.staticIcon,
      required this.appearAnimation,
      required this.selectAnimation,
      required this.activateAnimation,
      required this.effectAnimation,
      required this.aroundAnimation,
      required this.centerIcon});

  static AvailableReaction fromReader(BinaryReader reader) {
    var len;
    final flags = reader.readInt();
    final inactive = (flags & 1) == 1;
    var reaction = reader.tgReadString();
    var title = reader.tgReadString();
    var staticIcon = reader.tgReadObject();
    var appearAnimation = reader.tgReadObject();
    var selectAnimation = reader.tgReadObject();
    var activateAnimation = reader.tgReadObject();
    var effectAnimation = reader.tgReadObject();
    var aroundAnimation;
    if ((flags & 2) == 2) {
      aroundAnimation = reader.tgReadObject();
    } else {
      aroundAnimation = null;
    }
    var centerIcon;
    if ((flags & 2) == 2) {
      centerIcon = reader.tgReadObject();
    } else {
      centerIcon = null;
    }
    return AvailableReaction(
        inactive: inactive,
        reaction: reaction,
        title: title,
        staticIcon: staticIcon,
        appearAnimation: appearAnimation,
        selectAnimation: selectAnimation,
        activateAnimation: activateAnimation,
        effectAnimation: effectAnimation,
        aroundAnimation: aroundAnimation,
        centerIcon: centerIcon);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3229084673, 4),
      [0, 0, 0, 0],
      serializeBytes(this.reaction),
      serializeBytes(this.title),
      (this.staticIcon.getBytes() as List<int>),
      (this.appearAnimation.getBytes() as List<int>),
      (this.selectAnimation.getBytes() as List<int>),
      (this.activateAnimation.getBytes() as List<int>),
      (this.effectAnimation.getBytes() as List<int>),
      (this.aroundAnimation == null || this.aroundAnimation == false)
          ? List<int>.empty()
          : [(this.aroundAnimation.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
      (this.centerIcon == null || this.centerIcon == false)
          ? List<int>.empty()
          : [(this.centerIcon.getBytes() as List<int>)]
              .expand((element) => element)
              .toList(),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'AvailableReaction{ID: $ID, inactive: $inactive, reaction: $reaction, title: $title, staticIcon: $staticIcon, appearAnimation: $appearAnimation, selectAnimation: $selectAnimation, activateAnimation: $activateAnimation, effectAnimation: $effectAnimation, aroundAnimation: $aroundAnimation, centerIcon: $centerIcon}';
  }
}

class ResPQ extends BaseConstructor {
  static const CONSTRUCTOR_ID = 85337187;
  static const SUBCLASS_OF_ID = 2020181688;
  final classType = "constructor";
  final ID = 85337187;
  BigInt nonce;
  BigInt serverNonce;
  List<int> pq;
  List<BigInt> serverPublicKeyFingerprints;

  ResPQ(
      {required this.nonce,
      required this.serverNonce,
      required this.pq,
      required this.serverPublicKeyFingerprints});

  static ResPQ fromReader(BinaryReader reader) {
    var len;
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var pq = reader.tgReadBytes();
    var _vectorserverPublicKeyFingerprints = reader.readInt();
    if (_vectorserverPublicKeyFingerprints != 481674261)
      throw Exception('Wrong vectorId');
    List<BigInt> serverPublicKeyFingerprints = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      serverPublicKeyFingerprints.add(reader.readLong());
    }
    return ResPQ(
        nonce: nonce,
        serverNonce: serverNonce,
        pq: pq,
        serverPublicKeyFingerprints: serverPublicKeyFingerprints);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(85337187, 4),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      serializeBytes(this.pq),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.serverPublicKeyFingerprints!.length, 4,
          little: true, signed: true),
      this
          .serverPublicKeyFingerprints!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ResPQ{ID: $ID, nonce: $nonce, serverNonce: $serverNonce, pq: $pq, serverPublicKeyFingerprints: $serverPublicKeyFingerprints}';
  }
}

class PQInnerData extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2211011308;
  static const SUBCLASS_OF_ID = 1097864055;
  final classType = "constructor";
  final ID = 2211011308;
  List<int> pq;
  List<int> p;
  List<int> q;
  BigInt nonce;
  BigInt serverNonce;
  BigInt newNonce;

  PQInnerData(
      {required this.pq,
      required this.p,
      required this.q,
      required this.nonce,
      required this.serverNonce,
      required this.newNonce});

  static PQInnerData fromReader(BinaryReader reader) {
    var len;
    var pq = reader.tgReadBytes();
    var p = reader.tgReadBytes();
    var q = reader.tgReadBytes();
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var newNonce = reader.readLargeInt(256);
    return PQInnerData(
        pq: pq,
        p: p,
        q: q,
        nonce: nonce,
        serverNonce: serverNonce,
        newNonce: newNonce);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2211011308, 4),
      serializeBytes(this.pq),
      serializeBytes(this.p),
      serializeBytes(this.q),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.newNonce, 32, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PQInnerData{ID: $ID, pq: $pq, p: $p, q: $q, nonce: $nonce, serverNonce: $serverNonce, newNonce: $newNonce}';
  }
}

class PQInnerDataDc extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2851430293;
  static const SUBCLASS_OF_ID = 1097864055;
  final classType = "constructor";
  final ID = 2851430293;
  List<int> pq;
  List<int> p;
  List<int> q;
  BigInt nonce;
  BigInt serverNonce;
  BigInt newNonce;
  int dc;

  PQInnerDataDc(
      {required this.pq,
      required this.p,
      required this.q,
      required this.nonce,
      required this.serverNonce,
      required this.newNonce,
      required this.dc});

  static PQInnerDataDc fromReader(BinaryReader reader) {
    var len;
    var pq = reader.tgReadBytes();
    var p = reader.tgReadBytes();
    var q = reader.tgReadBytes();
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var newNonce = reader.readLargeInt(256);
    var dc = reader.readInt();
    return PQInnerDataDc(
        pq: pq,
        p: p,
        q: q,
        nonce: nonce,
        serverNonce: serverNonce,
        newNonce: newNonce,
        dc: dc);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2851430293, 4),
      serializeBytes(this.pq),
      serializeBytes(this.p),
      serializeBytes(this.q),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.newNonce, 32, little: true, signed: true),
      readBufferFromBigInt(this.dc, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PQInnerDataDc{ID: $ID, pq: $pq, p: $p, q: $q, nonce: $nonce, serverNonce: $serverNonce, newNonce: $newNonce, dc: $dc}';
  }
}

class PQInnerDataTemp extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1013613780;
  static const SUBCLASS_OF_ID = 1097864055;
  final classType = "constructor";
  final ID = 1013613780;
  List<int> pq;
  List<int> p;
  List<int> q;
  BigInt nonce;
  BigInt serverNonce;
  BigInt newNonce;
  int expiresIn;

  PQInnerDataTemp(
      {required this.pq,
      required this.p,
      required this.q,
      required this.nonce,
      required this.serverNonce,
      required this.newNonce,
      required this.expiresIn});

  static PQInnerDataTemp fromReader(BinaryReader reader) {
    var len;
    var pq = reader.tgReadBytes();
    var p = reader.tgReadBytes();
    var q = reader.tgReadBytes();
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var newNonce = reader.readLargeInt(256);
    var expiresIn = reader.readInt();
    return PQInnerDataTemp(
        pq: pq,
        p: p,
        q: q,
        nonce: nonce,
        serverNonce: serverNonce,
        newNonce: newNonce,
        expiresIn: expiresIn);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1013613780, 4),
      serializeBytes(this.pq),
      serializeBytes(this.p),
      serializeBytes(this.q),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.newNonce, 32, little: true, signed: true),
      readBufferFromBigInt(this.expiresIn, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PQInnerDataTemp{ID: $ID, pq: $pq, p: $p, q: $q, nonce: $nonce, serverNonce: $serverNonce, newNonce: $newNonce, expiresIn: $expiresIn}';
  }
}

class PQInnerDataTempDc extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1459478408;
  static const SUBCLASS_OF_ID = 1097864055;
  final classType = "constructor";
  final ID = 1459478408;
  List<int> pq;
  List<int> p;
  List<int> q;
  BigInt nonce;
  BigInt serverNonce;
  BigInt newNonce;
  int dc;
  int expiresIn;

  PQInnerDataTempDc(
      {required this.pq,
      required this.p,
      required this.q,
      required this.nonce,
      required this.serverNonce,
      required this.newNonce,
      required this.dc,
      required this.expiresIn});

  static PQInnerDataTempDc fromReader(BinaryReader reader) {
    var len;
    var pq = reader.tgReadBytes();
    var p = reader.tgReadBytes();
    var q = reader.tgReadBytes();
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var newNonce = reader.readLargeInt(256);
    var dc = reader.readInt();
    var expiresIn = reader.readInt();
    return PQInnerDataTempDc(
        pq: pq,
        p: p,
        q: q,
        nonce: nonce,
        serverNonce: serverNonce,
        newNonce: newNonce,
        dc: dc,
        expiresIn: expiresIn);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1459478408, 4),
      serializeBytes(this.pq),
      serializeBytes(this.p),
      serializeBytes(this.q),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.newNonce, 32, little: true, signed: true),
      readBufferFromBigInt(this.dc, 4, little: true, signed: true),
      readBufferFromBigInt(this.expiresIn, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'PQInnerDataTempDc{ID: $ID, pq: $pq, p: $p, q: $q, nonce: $nonce, serverNonce: $serverNonce, newNonce: $newNonce, dc: $dc, expiresIn: $expiresIn}';
  }
}

class ServerDHParamsFail extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2043348061;
  static const SUBCLASS_OF_ID = 2786626974;
  final classType = "constructor";
  final ID = 2043348061;
  BigInt nonce;
  BigInt serverNonce;
  BigInt newNonceHash;

  ServerDHParamsFail(
      {required this.nonce,
      required this.serverNonce,
      required this.newNonceHash});

  static ServerDHParamsFail fromReader(BinaryReader reader) {
    var len;
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var newNonceHash = reader.readLargeInt(128);
    return ServerDHParamsFail(
        nonce: nonce, serverNonce: serverNonce, newNonceHash: newNonceHash);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2043348061, 4),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.newNonceHash, 16, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ServerDHParamsFail{ID: $ID, nonce: $nonce, serverNonce: $serverNonce, newNonceHash: $newNonceHash}';
  }
}

class ServerDHParamsOk extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3504867164;
  static const SUBCLASS_OF_ID = 2786626974;
  final classType = "constructor";
  final ID = 3504867164;
  BigInt nonce;
  BigInt serverNonce;
  List<int> encryptedAnswer;

  ServerDHParamsOk(
      {required this.nonce,
      required this.serverNonce,
      required this.encryptedAnswer});

  static ServerDHParamsOk fromReader(BinaryReader reader) {
    var len;
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var encryptedAnswer = reader.tgReadBytes();
    return ServerDHParamsOk(
        nonce: nonce,
        serverNonce: serverNonce,
        encryptedAnswer: encryptedAnswer);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3504867164, 4),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      serializeBytes(this.encryptedAnswer),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ServerDHParamsOk{ID: $ID, nonce: $nonce, serverNonce: $serverNonce, encryptedAnswer: $encryptedAnswer}';
  }
}

class ServerDHInnerData extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3045658042;
  static const SUBCLASS_OF_ID = 3332007868;
  final classType = "constructor";
  final ID = 3045658042;
  BigInt nonce;
  BigInt serverNonce;
  int g;
  List<int> dhPrime;
  List<int> gA;
  int serverTime;

  ServerDHInnerData(
      {required this.nonce,
      required this.serverNonce,
      required this.g,
      required this.dhPrime,
      required this.gA,
      required this.serverTime});

  static ServerDHInnerData fromReader(BinaryReader reader) {
    var len;
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var g = reader.readInt();
    var dhPrime = reader.tgReadBytes();
    var gA = reader.tgReadBytes();
    var serverTime = reader.readInt();
    return ServerDHInnerData(
        nonce: nonce,
        serverNonce: serverNonce,
        g: g,
        dhPrime: dhPrime,
        gA: gA,
        serverTime: serverTime);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3045658042, 4),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.g, 4, little: true, signed: true),
      serializeBytes(this.dhPrime),
      serializeBytes(this.gA),
      readBufferFromBigInt(this.serverTime, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ServerDHInnerData{ID: $ID, nonce: $nonce, serverNonce: $serverNonce, g: $g, dhPrime: $dhPrime, gA: $gA, serverTime: $serverTime}';
  }
}

class ClientDHInnerData extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1715713620;
  static const SUBCLASS_OF_ID = 4176408426;
  final classType = "constructor";
  final ID = 1715713620;
  BigInt nonce;
  BigInt serverNonce;
  BigInt retryId;
  List<int> gB;

  ClientDHInnerData(
      {required this.nonce,
      required this.serverNonce,
      required this.retryId,
      required this.gB});

  static ClientDHInnerData fromReader(BinaryReader reader) {
    var len;
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var retryId = reader.readLong();
    var gB = reader.tgReadBytes();
    return ClientDHInnerData(
        nonce: nonce, serverNonce: serverNonce, retryId: retryId, gB: gB);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1715713620, 4),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.retryId, 8, little: true, signed: true),
      serializeBytes(this.gB),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'ClientDHInnerData{ID: $ID, nonce: $nonce, serverNonce: $serverNonce, retryId: $retryId, gB: $gB}';
  }
}

class DhGenOk extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1003222836;
  static const SUBCLASS_OF_ID = 1440574683;
  final classType = "constructor";
  final ID = 1003222836;
  BigInt nonce;
  BigInt serverNonce;
  BigInt newNonceHash1;

  DhGenOk(
      {required this.nonce,
      required this.serverNonce,
      required this.newNonceHash1});

  static DhGenOk fromReader(BinaryReader reader) {
    var len;
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var newNonceHash1 = reader.readLargeInt(128);
    return DhGenOk(
        nonce: nonce, serverNonce: serverNonce, newNonceHash1: newNonceHash1);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1003222836, 4),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.newNonceHash1, 16, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DhGenOk{ID: $ID, nonce: $nonce, serverNonce: $serverNonce, newNonceHash1: $newNonceHash1}';
  }
}

class DhGenRetry extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1188831161;
  static const SUBCLASS_OF_ID = 1440574683;
  final classType = "constructor";
  final ID = 1188831161;
  BigInt nonce;
  BigInt serverNonce;
  BigInt newNonceHash2;

  DhGenRetry(
      {required this.nonce,
      required this.serverNonce,
      required this.newNonceHash2});

  static DhGenRetry fromReader(BinaryReader reader) {
    var len;
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var newNonceHash2 = reader.readLargeInt(128);
    return DhGenRetry(
        nonce: nonce, serverNonce: serverNonce, newNonceHash2: newNonceHash2);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1188831161, 4),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.newNonceHash2, 16, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DhGenRetry{ID: $ID, nonce: $nonce, serverNonce: $serverNonce, newNonceHash2: $newNonceHash2}';
  }
}

class DhGenFail extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2795351554;
  static const SUBCLASS_OF_ID = 1440574683;
  final classType = "constructor";
  final ID = 2795351554;
  BigInt nonce;
  BigInt serverNonce;
  BigInt newNonceHash3;

  DhGenFail(
      {required this.nonce,
      required this.serverNonce,
      required this.newNonceHash3});

  static DhGenFail fromReader(BinaryReader reader) {
    var len;
    var nonce = reader.readLargeInt(128);
    var serverNonce = reader.readLargeInt(128);
    var newNonceHash3 = reader.readLargeInt(128);
    return DhGenFail(
        nonce: nonce, serverNonce: serverNonce, newNonceHash3: newNonceHash3);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2795351554, 4),
      readBufferFromBigInt(this.nonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.serverNonce, 16, little: true, signed: true),
      readBufferFromBigInt(this.newNonceHash3, 16, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DhGenFail{ID: $ID, nonce: $nonce, serverNonce: $serverNonce, newNonceHash3: $newNonceHash3}';
  }
}

class DestroyAuthKeyOk extends BaseConstructor {
  static const CONSTRUCTOR_ID = 4133544404;
  static const SUBCLASS_OF_ID = 2190599822;
  final classType = "constructor";
  final ID = 4133544404;

  DestroyAuthKeyOk();

  static DestroyAuthKeyOk fromReader(BinaryReader reader) {
    var len;
    return DestroyAuthKeyOk();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(4133544404, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DestroyAuthKeyOk{ID: $ID, }';
  }
}

class DestroyAuthKeyNone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 178201177;
  static const SUBCLASS_OF_ID = 2190599822;
  final classType = "constructor";
  final ID = 178201177;

  DestroyAuthKeyNone();

  static DestroyAuthKeyNone fromReader(BinaryReader reader) {
    var len;
    return DestroyAuthKeyNone();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(178201177, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DestroyAuthKeyNone{ID: $ID, }';
  }
}

class DestroyAuthKeyFail extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3926956819;
  static const SUBCLASS_OF_ID = 2190599822;
  final classType = "constructor";
  final ID = 3926956819;

  DestroyAuthKeyFail();

  static DestroyAuthKeyFail fromReader(BinaryReader reader) {
    var len;
    return DestroyAuthKeyFail();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3926956819, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DestroyAuthKeyFail{ID: $ID, }';
  }
}

class MsgsAck extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1658238041;
  static const SUBCLASS_OF_ID = 2188801988;
  final classType = "constructor";
  final ID = 1658238041;
  List<BigInt> msgIds;

  MsgsAck({required this.msgIds});

  static MsgsAck fromReader(BinaryReader reader) {
    var len;
    var _vectormsgIds = reader.readInt();
    if (_vectormsgIds != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> msgIds = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      msgIds.add(reader.readLong());
    }
    return MsgsAck(msgIds: msgIds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1658238041, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.msgIds!.length, 4, little: true, signed: true),
      this
          .msgIds!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MsgsAck{ID: $ID, msgIds: $msgIds}';
  }
}

class BadMsgNotification extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2817521681;
  static const SUBCLASS_OF_ID = 3468337495;
  final classType = "constructor";
  final ID = 2817521681;
  BigInt badMsgId;
  int badMsgSeqno;
  int errorCode;

  BadMsgNotification(
      {required this.badMsgId,
      required this.badMsgSeqno,
      required this.errorCode});

  static BadMsgNotification fromReader(BinaryReader reader) {
    var len;
    var badMsgId = reader.readLong();
    var badMsgSeqno = reader.readInt();
    var errorCode = reader.readInt();
    return BadMsgNotification(
        badMsgId: badMsgId, badMsgSeqno: badMsgSeqno, errorCode: errorCode);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2817521681, 4),
      readBufferFromBigInt(this.badMsgId, 8, little: true, signed: true),
      readBufferFromBigInt(this.badMsgSeqno, 4, little: true, signed: true),
      readBufferFromBigInt(this.errorCode, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BadMsgNotification{ID: $ID, badMsgId: $badMsgId, badMsgSeqno: $badMsgSeqno, errorCode: $errorCode}';
  }
}

class BadServerSalt extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3987424379;
  static const SUBCLASS_OF_ID = 3468337495;
  final classType = "constructor";
  final ID = 3987424379;
  BigInt badMsgId;
  int badMsgSeqno;
  int errorCode;
  BigInt newServerSalt;

  BadServerSalt(
      {required this.badMsgId,
      required this.badMsgSeqno,
      required this.errorCode,
      required this.newServerSalt});

  static BadServerSalt fromReader(BinaryReader reader) {
    var len;
    var badMsgId = reader.readLong();
    var badMsgSeqno = reader.readInt();
    var errorCode = reader.readInt();
    var newServerSalt = reader.readLong();
    return BadServerSalt(
        badMsgId: badMsgId,
        badMsgSeqno: badMsgSeqno,
        errorCode: errorCode,
        newServerSalt: newServerSalt);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3987424379, 4),
      readBufferFromBigInt(this.badMsgId, 8, little: true, signed: true),
      readBufferFromBigInt(this.badMsgSeqno, 4, little: true, signed: true),
      readBufferFromBigInt(this.errorCode, 4, little: true, signed: true),
      readBufferFromBigInt(this.newServerSalt, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'BadServerSalt{ID: $ID, badMsgId: $badMsgId, badMsgSeqno: $badMsgSeqno, errorCode: $errorCode, newServerSalt: $newServerSalt}';
  }
}

class MsgsStateReq extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3664378706;
  static const SUBCLASS_OF_ID = 418389456;
  final classType = "constructor";
  final ID = 3664378706;
  List<BigInt> msgIds;

  MsgsStateReq({required this.msgIds});

  static MsgsStateReq fromReader(BinaryReader reader) {
    var len;
    var _vectormsgIds = reader.readInt();
    if (_vectormsgIds != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> msgIds = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      msgIds.add(reader.readLong());
    }
    return MsgsStateReq(msgIds: msgIds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3664378706, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.msgIds!.length, 4, little: true, signed: true),
      this
          .msgIds!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MsgsStateReq{ID: $ID, msgIds: $msgIds}';
  }
}

class MsgsStateInfo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 81704317;
  static const SUBCLASS_OF_ID = 118098532;
  final classType = "constructor";
  final ID = 81704317;
  BigInt reqMsgId;
  String info;

  MsgsStateInfo({required this.reqMsgId, required this.info});

  static MsgsStateInfo fromReader(BinaryReader reader) {
    var len;
    var reqMsgId = reader.readLong();
    var info = reader.tgReadString();
    return MsgsStateInfo(reqMsgId: reqMsgId, info: info);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(81704317, 4),
      readBufferFromBigInt(this.reqMsgId, 8, little: true, signed: true),
      serializeBytes(this.info),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MsgsStateInfo{ID: $ID, reqMsgId: $reqMsgId, info: $info}';
  }
}

class MsgsAllInfo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2361446705;
  static const SUBCLASS_OF_ID = 4203727700;
  final classType = "constructor";
  final ID = 2361446705;
  List<BigInt> msgIds;
  String info;

  MsgsAllInfo({required this.msgIds, required this.info});

  static MsgsAllInfo fromReader(BinaryReader reader) {
    var len;
    var _vectormsgIds = reader.readInt();
    if (_vectormsgIds != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> msgIds = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      msgIds.add(reader.readLong());
    }
    var info = reader.tgReadString();
    return MsgsAllInfo(msgIds: msgIds, info: info);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2361446705, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.msgIds!.length, 4, little: true, signed: true),
      this
          .msgIds!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
      serializeBytes(this.info),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MsgsAllInfo{ID: $ID, msgIds: $msgIds, info: $info}';
  }
}

class MsgDetailedInfo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 661470918;
  static const SUBCLASS_OF_ID = 1597167086;
  final classType = "constructor";
  final ID = 661470918;
  BigInt msgId;
  BigInt answerMsgId;
  int bytes;
  int status;

  MsgDetailedInfo(
      {required this.msgId,
      required this.answerMsgId,
      required this.bytes,
      required this.status});

  static MsgDetailedInfo fromReader(BinaryReader reader) {
    var len;
    var msgId = reader.readLong();
    var answerMsgId = reader.readLong();
    var bytes = reader.readInt();
    var status = reader.readInt();
    return MsgDetailedInfo(
        msgId: msgId, answerMsgId: answerMsgId, bytes: bytes, status: status);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(661470918, 4),
      readBufferFromBigInt(this.msgId, 8, little: true, signed: true),
      readBufferFromBigInt(this.answerMsgId, 8, little: true, signed: true),
      readBufferFromBigInt(this.bytes, 4, little: true, signed: true),
      readBufferFromBigInt(this.status, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MsgDetailedInfo{ID: $ID, msgId: $msgId, answerMsgId: $answerMsgId, bytes: $bytes, status: $status}';
  }
}

class MsgNewDetailedInfo extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2157819615;
  static const SUBCLASS_OF_ID = 1597167086;
  final classType = "constructor";
  final ID = 2157819615;
  BigInt answerMsgId;
  int bytes;
  int status;

  MsgNewDetailedInfo(
      {required this.answerMsgId, required this.bytes, required this.status});

  static MsgNewDetailedInfo fromReader(BinaryReader reader) {
    var len;
    var answerMsgId = reader.readLong();
    var bytes = reader.readInt();
    var status = reader.readInt();
    return MsgNewDetailedInfo(
        answerMsgId: answerMsgId, bytes: bytes, status: status);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2157819615, 4),
      readBufferFromBigInt(this.answerMsgId, 8, little: true, signed: true),
      readBufferFromBigInt(this.bytes, 4, little: true, signed: true),
      readBufferFromBigInt(this.status, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MsgNewDetailedInfo{ID: $ID, answerMsgId: $answerMsgId, bytes: $bytes, status: $status}';
  }
}

class MsgResendReq extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2105940488;
  static const SUBCLASS_OF_ID = 33703188;
  final classType = "constructor";
  final ID = 2105940488;
  List<BigInt> msgIds;

  MsgResendReq({required this.msgIds});

  static MsgResendReq fromReader(BinaryReader reader) {
    var len;
    var _vectormsgIds = reader.readInt();
    if (_vectormsgIds != 481674261) throw Exception('Wrong vectorId');
    List<BigInt> msgIds = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      msgIds.add(reader.readLong());
    }
    return MsgResendReq(msgIds: msgIds);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2105940488, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.msgIds!.length, 4, little: true, signed: true),
      this
          .msgIds!
          .map((x) => readBufferFromBigInt(x, 8, little: true, signed: true))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'MsgResendReq{ID: $ID, msgIds: $msgIds}';
  }
}

class RpcError extends BaseConstructor {
  static const CONSTRUCTOR_ID = 558156313;
  static const SUBCLASS_OF_ID = 1243079269;
  final classType = "constructor";
  final ID = 558156313;
  int errorCode;
  String errorMessage;

  RpcError({required this.errorCode, required this.errorMessage});

  static RpcError fromReader(BinaryReader reader) {
    var len;
    var errorCode = reader.readInt();
    var errorMessage = reader.tgReadString();
    return RpcError(errorCode: errorCode, errorMessage: errorMessage);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(558156313, 4),
      readBufferFromBigInt(this.errorCode, 4, little: true, signed: true),
      serializeBytes(this.errorMessage),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RpcError{ID: $ID, errorCode: $errorCode, errorMessage: $errorMessage}';
  }
}

class RpcAnswerUnknown extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1579864942;
  static const SUBCLASS_OF_ID = 1271559536;
  final classType = "constructor";
  final ID = 1579864942;

  RpcAnswerUnknown();

  static RpcAnswerUnknown fromReader(BinaryReader reader) {
    var len;
    return RpcAnswerUnknown();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1579864942, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RpcAnswerUnknown{ID: $ID, }';
  }
}

class RpcAnswerDroppedRunning extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3447252358;
  static const SUBCLASS_OF_ID = 1271559536;
  final classType = "constructor";
  final ID = 3447252358;

  RpcAnswerDroppedRunning();

  static RpcAnswerDroppedRunning fromReader(BinaryReader reader) {
    var len;
    return RpcAnswerDroppedRunning();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3447252358, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RpcAnswerDroppedRunning{ID: $ID, }';
  }
}

class RpcAnswerDropped extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2755319991;
  static const SUBCLASS_OF_ID = 1271559536;
  final classType = "constructor";
  final ID = 2755319991;
  BigInt msgId;
  int seqNo;
  int bytes;

  RpcAnswerDropped(
      {required this.msgId, required this.seqNo, required this.bytes});

  static RpcAnswerDropped fromReader(BinaryReader reader) {
    var len;
    var msgId = reader.readLong();
    var seqNo = reader.readInt();
    var bytes = reader.readInt();
    return RpcAnswerDropped(msgId: msgId, seqNo: seqNo, bytes: bytes);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2755319991, 4),
      readBufferFromBigInt(this.msgId, 8, little: true, signed: true),
      readBufferFromBigInt(this.seqNo, 4, little: true, signed: true),
      readBufferFromBigInt(this.bytes, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'RpcAnswerDropped{ID: $ID, msgId: $msgId, seqNo: $seqNo, bytes: $bytes}';
  }
}

class FutureSalt extends BaseConstructor {
  static const CONSTRUCTOR_ID = 155834844;
  static const SUBCLASS_OF_ID = 1172651471;
  final classType = "constructor";
  final ID = 155834844;
  int validSince;
  int validUntil;
  BigInt salt;

  FutureSalt(
      {required this.validSince, required this.validUntil, required this.salt});

  static FutureSalt fromReader(BinaryReader reader) {
    var len;
    var validSince = reader.readInt();
    var validUntil = reader.readInt();
    var salt = reader.readLong();
    return FutureSalt(
        validSince: validSince, validUntil: validUntil, salt: salt);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(155834844, 4),
      readBufferFromBigInt(this.validSince, 4, little: true, signed: true),
      readBufferFromBigInt(this.validUntil, 4, little: true, signed: true),
      readBufferFromBigInt(this.salt, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'FutureSalt{ID: $ID, validSince: $validSince, validUntil: $validUntil, salt: $salt}';
  }
}

class FutureSalts extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2924480661;
  static const SUBCLASS_OF_ID = 277935383;
  final classType = "constructor";
  final ID = 2924480661;
  BigInt reqMsgId;
  int now;
  List<dynamic> salts;

  FutureSalts({required this.reqMsgId, required this.now, required this.salts});

  static FutureSalts fromReader(BinaryReader reader) {
    var len;
    var reqMsgId = reader.readLong();
    var now = reader.readInt();
    List<dynamic> salts = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      salts.add(FutureSalt.fromReader(reader));
    }
    return FutureSalts(reqMsgId: reqMsgId, now: now, salts: salts);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2924480661, 4),
      readBufferFromBigInt(this.reqMsgId, 8, little: true, signed: true),
      readBufferFromBigInt(this.now, 4, little: true, signed: true),
      readBufferFromBigInt(this.salts!.length, 4, little: true, signed: true),
      this
          .salts!
          .map((x) => (x.getBytes() as List<int>).sublist(4))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'FutureSalts{ID: $ID, reqMsgId: $reqMsgId, now: $now, salts: $salts}';
  }
}

class Pong extends BaseConstructor {
  static const CONSTRUCTOR_ID = 880243653;
  static const SUBCLASS_OF_ID = 2171268721;
  final classType = "constructor";
  final ID = 880243653;
  BigInt msgId;
  BigInt pingId;

  Pong({required this.msgId, required this.pingId});

  static Pong fromReader(BinaryReader reader) {
    var len;
    var msgId = reader.readLong();
    var pingId = reader.readLong();
    return Pong(msgId: msgId, pingId: pingId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(880243653, 4),
      readBufferFromBigInt(this.msgId, 8, little: true, signed: true),
      readBufferFromBigInt(this.pingId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'Pong{ID: $ID, msgId: $msgId, pingId: $pingId}';
  }
}

class DestroySessionOk extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3793765884;
  static const SUBCLASS_OF_ID = 2936858557;
  final classType = "constructor";
  final ID = 3793765884;
  BigInt sessionId;

  DestroySessionOk({required this.sessionId});

  static DestroySessionOk fromReader(BinaryReader reader) {
    var len;
    var sessionId = reader.readLong();
    return DestroySessionOk(sessionId: sessionId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3793765884, 4),
      readBufferFromBigInt(this.sessionId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DestroySessionOk{ID: $ID, sessionId: $sessionId}';
  }
}

class DestroySessionNone extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1658015945;
  static const SUBCLASS_OF_ID = 2936858557;
  final classType = "constructor";
  final ID = 1658015945;
  BigInt sessionId;

  DestroySessionNone({required this.sessionId});

  static DestroySessionNone fromReader(BinaryReader reader) {
    var len;
    var sessionId = reader.readLong();
    return DestroySessionNone(sessionId: sessionId);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1658015945, 4),
      readBufferFromBigInt(this.sessionId, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'DestroySessionNone{ID: $ID, sessionId: $sessionId}';
  }
}

class NewSessionCreated extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2663516424;
  static const SUBCLASS_OF_ID = 1359818801;
  final classType = "constructor";
  final ID = 2663516424;
  BigInt firstMsgId;
  BigInt uniqueId;
  BigInt serverSalt;

  NewSessionCreated(
      {required this.firstMsgId,
      required this.uniqueId,
      required this.serverSalt});

  static NewSessionCreated fromReader(BinaryReader reader) {
    var len;
    var firstMsgId = reader.readLong();
    var uniqueId = reader.readLong();
    var serverSalt = reader.readLong();
    return NewSessionCreated(
        firstMsgId: firstMsgId, uniqueId: uniqueId, serverSalt: serverSalt);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2663516424, 4),
      readBufferFromBigInt(this.firstMsgId, 8, little: true, signed: true),
      readBufferFromBigInt(this.uniqueId, 8, little: true, signed: true),
      readBufferFromBigInt(this.serverSalt, 8, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'NewSessionCreated{ID: $ID, firstMsgId: $firstMsgId, uniqueId: $uniqueId, serverSalt: $serverSalt}';
  }
}

class HttpWait extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2459514271;
  static const SUBCLASS_OF_ID = 310685398;
  final classType = "constructor";
  final ID = 2459514271;
  int maxDelay;
  int waitAfter;
  int maxWait;

  HttpWait(
      {required this.maxDelay, required this.waitAfter, required this.maxWait});

  static HttpWait fromReader(BinaryReader reader) {
    var len;
    var maxDelay = reader.readInt();
    var waitAfter = reader.readInt();
    var maxWait = reader.readInt();
    return HttpWait(maxDelay: maxDelay, waitAfter: waitAfter, maxWait: maxWait);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2459514271, 4),
      readBufferFromBigInt(this.maxDelay, 4, little: true, signed: true),
      readBufferFromBigInt(this.waitAfter, 4, little: true, signed: true),
      readBufferFromBigInt(this.maxWait, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'HttpWait{ID: $ID, maxDelay: $maxDelay, waitAfter: $waitAfter, maxWait: $maxWait}';
  }
}

class IpPort extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3560156531;
  static const SUBCLASS_OF_ID = 2728408870;
  final classType = "constructor";
  final ID = 3560156531;
  int ipv4;
  int port;

  IpPort({required this.ipv4, required this.port});

  static IpPort fromReader(BinaryReader reader) {
    var len;
    var ipv4 = reader.readInt();
    var port = reader.readInt();
    return IpPort(ipv4: ipv4, port: port);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3560156531, 4),
      readBufferFromBigInt(this.ipv4, 4, little: true, signed: true),
      readBufferFromBigInt(this.port, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'IpPort{ID: $ID, ipv4: $ipv4, port: $port}';
  }
}

class IpPortSecret extends BaseConstructor {
  static const CONSTRUCTOR_ID = 932718150;
  static const SUBCLASS_OF_ID = 2728408870;
  final classType = "constructor";
  final ID = 932718150;
  int ipv4;
  int port;
  List<int> secret;

  IpPortSecret({required this.ipv4, required this.port, required this.secret});

  static IpPortSecret fromReader(BinaryReader reader) {
    var len;
    var ipv4 = reader.readInt();
    var port = reader.readInt();
    var secret = reader.tgReadBytes();
    return IpPortSecret(ipv4: ipv4, port: port, secret: secret);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(932718150, 4),
      readBufferFromBigInt(this.ipv4, 4, little: true, signed: true),
      readBufferFromBigInt(this.port, 4, little: true, signed: true),
      serializeBytes(this.secret),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'IpPortSecret{ID: $ID, ipv4: $ipv4, port: $port, secret: $secret}';
  }
}

class AccessPointRule extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1182381663;
  static const SUBCLASS_OF_ID = 2980880637;
  final classType = "constructor";
  final ID = 1182381663;
  String phonePrefixRules;
  int dcId;
  List<dynamic> ips;

  AccessPointRule(
      {required this.phonePrefixRules, required this.dcId, required this.ips});

  static AccessPointRule fromReader(BinaryReader reader) {
    var len;
    var phonePrefixRules = reader.tgReadString();
    var dcId = reader.readInt();
    List<dynamic> ips = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      ips.add(reader.tgReadObject());
    }
    return AccessPointRule(
        phonePrefixRules: phonePrefixRules, dcId: dcId, ips: ips);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1182381663, 4),
      serializeBytes(this.phonePrefixRules),
      readBufferFromBigInt(this.dcId, 4, little: true, signed: true),
      readBufferFromBigInt(this.ips!.length, 4, little: true, signed: true),
      this
          .ips!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'AccessPointRule{ID: $ID, phonePrefixRules: $phonePrefixRules, dcId: $dcId, ips: $ips}';
  }
}

class TlsClientHello extends BaseConstructor {
  static const CONSTRUCTOR_ID = 262524817;
  static const SUBCLASS_OF_ID = 3203533088;
  final classType = "constructor";
  final ID = 262524817;
  List<dynamic> blocks;

  TlsClientHello({required this.blocks});

  static TlsClientHello fromReader(BinaryReader reader) {
    var len;
    List<dynamic> blocks = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      blocks.add(reader.tgReadObject());
    }
    return TlsClientHello(blocks: blocks);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(262524817, 4),
      readBufferFromBigInt(this.blocks!.length, 4, little: true, signed: true),
      this
          .blocks!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TlsClientHello{ID: $ID, blocks: $blocks}';
  }
}

class TlsBlockString extends BaseConstructor {
  static const CONSTRUCTOR_ID = 1488907607;
  static const SUBCLASS_OF_ID = 4044764304;
  final classType = "constructor";
  final ID = 1488907607;
  String data;

  TlsBlockString({required this.data});

  static TlsBlockString fromReader(BinaryReader reader) {
    var len;
    var data = reader.tgReadString();
    return TlsBlockString(data: data);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(1488907607, 4),
      serializeBytes(this.data),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TlsBlockString{ID: $ID, data: $data}';
  }
}

class TlsBlockRandom extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3265966728;
  static const SUBCLASS_OF_ID = 4044764304;
  final classType = "constructor";
  final ID = 3265966728;
  int length;

  TlsBlockRandom({required this.length});

  static TlsBlockRandom fromReader(BinaryReader reader) {
    var len;
    var length = reader.readInt();
    return TlsBlockRandom(length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3265966728, 4),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TlsBlockRandom{ID: $ID, length: $length}';
  }
}

class TlsBlockZero extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3400654219;
  static const SUBCLASS_OF_ID = 4044764304;
  final classType = "constructor";
  final ID = 3400654219;
  int length;

  TlsBlockZero({required this.length});

  static TlsBlockZero fromReader(BinaryReader reader) {
    var len;
    var length = reader.readInt();
    return TlsBlockZero(length: length);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3400654219, 4),
      readBufferFromBigInt(this.length, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TlsBlockZero{ID: $ID, length: $length}';
  }
}

class TlsBlockDomain extends BaseConstructor {
  static const CONSTRUCTOR_ID = 283665263;
  static const SUBCLASS_OF_ID = 4044764304;
  final classType = "constructor";
  final ID = 283665263;

  TlsBlockDomain();

  static TlsBlockDomain fromReader(BinaryReader reader) {
    var len;
    return TlsBlockDomain();
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(283665263, 4),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TlsBlockDomain{ID: $ID, }';
  }
}

class TlsBlockGrease extends BaseConstructor {
  static const CONSTRUCTOR_ID = 2623335513;
  static const SUBCLASS_OF_ID = 4044764304;
  final classType = "constructor";
  final ID = 2623335513;
  int seed;

  TlsBlockGrease({required this.seed});

  static TlsBlockGrease fromReader(BinaryReader reader) {
    var len;
    var seed = reader.readInt();
    return TlsBlockGrease(seed: seed);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(2623335513, 4),
      readBufferFromBigInt(this.seed, 4, little: true, signed: true),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TlsBlockGrease{ID: $ID, seed: $seed}';
  }
}

class TlsBlockScope extends BaseConstructor {
  static const CONSTRUCTOR_ID = 3638474097;
  static const SUBCLASS_OF_ID = 4044764304;
  final classType = "constructor";
  final ID = 3638474097;
  List<dynamic> entries;

  TlsBlockScope({required this.entries});

  static TlsBlockScope fromReader(BinaryReader reader) {
    var len;
    var _vectorentries = reader.readInt();
    if (_vectorentries != 481674261) throw Exception('Wrong vectorId');
    List<dynamic> entries = [];
    len = reader.readInt();
    for (var i = 0; i < len; i++) {
      entries.add(reader.tgReadObject());
    }
    return TlsBlockScope(entries: entries);
  }

  @override
  List<int> getBytes() {
    return [
      readBufferFromBigInt(3638474097, 4),
      readBufferFromBigInt(0x15c4b51c, 4, little: false, signed: false),
      readBufferFromBigInt(this.entries!.length, 4, little: true, signed: true),
      this
          .entries!
          .map((x) => (x.getBytes() as List<int>))
          .expand((element) => element),
    ].expand((element) => element).toList();
  }

  @override
  int getConstId() {
    return CONSTRUCTOR_ID;
  }

  @override
  int getSubId() {
    return SUBCLASS_OF_ID;
  }

  @override
  String toString() {
    return 'TlsBlockScope{ID: $ID, entries: $entries}';
  }
}
